
SD_Karte_Testapplikation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00002752  000027e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001031  00800214  00800214  000027fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000282c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e7c  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001156  00000000  00000000  00006850  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a4b  00000000  00000000  000079a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  000093f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d58  00000000  00000000  000099bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029ec  00000000  00000000  0000a714  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000d100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bf c2       	rjmp	.+1406   	; 0x580 <__ctors_end>
       2:	00 00       	nop
       4:	de c2       	rjmp	.+1468   	; 0x5c2 <__bad_interrupt>
       6:	00 00       	nop
       8:	dc c2       	rjmp	.+1464   	; 0x5c2 <__bad_interrupt>
       a:	00 00       	nop
       c:	da c2       	rjmp	.+1460   	; 0x5c2 <__bad_interrupt>
       e:	00 00       	nop
      10:	d8 c2       	rjmp	.+1456   	; 0x5c2 <__bad_interrupt>
      12:	00 00       	nop
      14:	d6 c2       	rjmp	.+1452   	; 0x5c2 <__bad_interrupt>
      16:	00 00       	nop
      18:	d4 c2       	rjmp	.+1448   	; 0x5c2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d2 c2       	rjmp	.+1444   	; 0x5c2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d0 c2       	rjmp	.+1440   	; 0x5c2 <__bad_interrupt>
      22:	00 00       	nop
      24:	ce c2       	rjmp	.+1436   	; 0x5c2 <__bad_interrupt>
      26:	00 00       	nop
      28:	cc c2       	rjmp	.+1432   	; 0x5c2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ca c2       	rjmp	.+1428   	; 0x5c2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c8 c2       	rjmp	.+1424   	; 0x5c2 <__bad_interrupt>
      32:	00 00       	nop
      34:	c6 c2       	rjmp	.+1420   	; 0x5c2 <__bad_interrupt>
      36:	00 00       	nop
      38:	c4 c2       	rjmp	.+1416   	; 0x5c2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c2 c2       	rjmp	.+1412   	; 0x5c2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c0 c2       	rjmp	.+1408   	; 0x5c2 <__bad_interrupt>
      42:	00 00       	nop
      44:	be c2       	rjmp	.+1404   	; 0x5c2 <__bad_interrupt>
      46:	00 00       	nop
      48:	bc c2       	rjmp	.+1400   	; 0x5c2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ba c2       	rjmp	.+1396   	; 0x5c2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b8 c2       	rjmp	.+1392   	; 0x5c2 <__bad_interrupt>
      52:	00 00       	nop
      54:	b6 c2       	rjmp	.+1388   	; 0x5c2 <__bad_interrupt>
      56:	00 00       	nop
      58:	b4 c2       	rjmp	.+1384   	; 0x5c2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b2 c2       	rjmp	.+1380   	; 0x5c2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b0 c2       	rjmp	.+1376   	; 0x5c2 <__bad_interrupt>
      62:	00 00       	nop
      64:	ae c2       	rjmp	.+1372   	; 0x5c2 <__bad_interrupt>
      66:	00 00       	nop
      68:	ac c2       	rjmp	.+1368   	; 0x5c2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	aa c2       	rjmp	.+1364   	; 0x5c2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a8 c2       	rjmp	.+1360   	; 0x5c2 <__bad_interrupt>
      72:	00 00       	nop
      74:	a6 c2       	rjmp	.+1356   	; 0x5c2 <__bad_interrupt>
      76:	00 00       	nop
      78:	a4 c2       	rjmp	.+1352   	; 0x5c2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a2 c2       	rjmp	.+1348   	; 0x5c2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a0 c2       	rjmp	.+1344   	; 0x5c2 <__bad_interrupt>
      82:	00 00       	nop
      84:	9e c2       	rjmp	.+1340   	; 0x5c2 <__bad_interrupt>
      86:	00 00       	nop
      88:	9c c2       	rjmp	.+1336   	; 0x5c2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9a c2       	rjmp	.+1332   	; 0x5c2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	98 c2       	rjmp	.+1328   	; 0x5c2 <__bad_interrupt>
      92:	00 00       	nop
      94:	96 c2       	rjmp	.+1324   	; 0x5c2 <__bad_interrupt>
      96:	00 00       	nop
      98:	94 c2       	rjmp	.+1320   	; 0x5c2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	92 c2       	rjmp	.+1316   	; 0x5c2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	90 c2       	rjmp	.+1312   	; 0x5c2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8e c2       	rjmp	.+1308   	; 0x5c2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8c c2       	rjmp	.+1304   	; 0x5c2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8a c2       	rjmp	.+1300   	; 0x5c2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	88 c2       	rjmp	.+1296   	; 0x5c2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	86 c2       	rjmp	.+1292   	; 0x5c2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	84 c2       	rjmp	.+1288   	; 0x5c2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	82 c2       	rjmp	.+1284   	; 0x5c2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	80 c2       	rjmp	.+1280   	; 0x5c2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	7e c2       	rjmp	.+1276   	; 0x5c2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7c c2       	rjmp	.+1272   	; 0x5c2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7a c2       	rjmp	.+1268   	; 0x5c2 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	78 c2       	rjmp	.+1264   	; 0x5c2 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	76 c2       	rjmp	.+1260   	; 0x5c2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	74 c2       	rjmp	.+1256   	; 0x5c2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	72 c2       	rjmp	.+1252   	; 0x5c2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	70 c2       	rjmp	.+1248   	; 0x5c2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3d 10       	cpse	r3, r13
      e6:	5d 10       	cpse	r5, r13
      e8:	a8 10       	cpse	r10, r8
      ea:	4a 11       	cpse	r20, r10
      ec:	4a 11       	cpse	r20, r10
      ee:	e0 10       	cpse	r14, r0
      f0:	ea 10       	cpse	r14, r10
      f2:	ea 10       	cpse	r14, r10
      f4:	ea 10       	cpse	r14, r10
      f6:	47 11       	cpse	r20, r7

000000f8 <__trampolines_end>:
      f8:	20 46       	sbci	r18, 0x60	; 96
      fa:	72 65       	ori	r23, 0x52	; 82
      fc:	65 20       	and	r6, r5
      fe:	4d 65       	ori	r20, 0x5D	; 93
     100:	6d 6f       	ori	r22, 0xFD	; 253
     102:	72 79       	andi	r23, 0x92	; 146
     104:	3a 20       	and	r3, r10
	...

00000107 <__c.2114>:
     107:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000116 <__c.2087>:
     116:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     126:	20 63 6c 75 73 74 65 72 00                           cluster.

0000012f <__c.2085>:
     12f:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
     13f:	68 61 69 6e 00                                      hain.

00000144 <__c.2077>:
     144:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 00         File Created!.

00000153 <__c.2072>:
     153:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

00000163 <__c.2069>:
     163:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     173:	21 00                                               !.

00000175 <__c.2060>:
     175:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
     185:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

0000018f <__c.2058>:
     18f:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     19f:	21 00                                               !.

000001a1 <__c.2056>:
     1a1:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

000001b2 <__c.2052>:
     1b2:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     1c2:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     1d2:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

000001dc <__c.2011>:
     1dc:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     1ec:	2e 2e 00                                            ...

000001ef <__c.1999>:
     1ef:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     1ff:	20 63 6c 75 73 74 65 72 00                           cluster.

00000208 <__c.1978>:
     208:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     218:	20 63 6c 75 73 74 65 72 00                           cluster.

00000221 <__c.1970>:
     221:	52 4f 4f 54 00                                      ROOT.

00000226 <__c.1968>:
     226:	44 49 52 00                                         DIR.

0000022a <__c.1966>:
     22a:	20 20 20 00                                            .

0000022e <__c.1964>:
     22e:	46 49 4c 45 00                                      FILE.

00000233 <__c.1962>:
     233:	20 20 20 00                                            .

00000237 <__c.1956>:
     237:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

00000245 <__c.1954>:
     245:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

00000250 <__c.1949>:
     250:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     260:	69 73 74 21 00                                      ist!.

00000265 <__c.2149>:
     265:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

00000276 <__c.2144>:
     276:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     286:	6f 6e 67 2e 2e 00                                   ong...

0000028c <__c.2137>:
     28c:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     29c:	20 00                                                .

0000029e <__c.2131>:
     29e:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

000002af <__c.2126>:
     2af:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

000002bd <__c.2123>:
     2bd:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     2cd:	21 00                                               !.

000002cf <__c.2121>:
     2cf:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

000002de <__c.2117>:
     2de:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     2ee:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000002f8 <__c.2113>:
     2f8:	45 72 61 73 65 64 21 00                             Erased!.

00000300 <__c.2111>:
     300:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

0000030f <__c.2108>:
     30f:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     31f:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     32f:	39 29 3a 00                                         9):.

00000333 <__c.2105>:
     333:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     343:	73 61 62 6c 65 64 21 00                             sabled!.

0000034b <__c.2103>:
     34b:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     35b:	28 30 2d 39 29 3a 20 00                             (0-9): .

00000363 <__c.2101>:
     363:	3e 20 39 20 3a 20 52 65 61 64 20 53 44 20 4d 65     > 9 : Read SD Me
     373:	6d 6f 72 79 20 43 61 70 61 63 69 74 79 20 28 54     mory Capacity (T
     383:	6f 74 61 6c 2f 46 72 65 65 29 00                    otal/Free).

0000038e <__c.2099>:
     38e:	3e 20 38 20 3a 20 44 65 6c 65 74 65 20 46 69 6c     > 8 : Delete Fil
     39e:	65 00                                               e.

000003a0 <__c.2097>:
     3a0:	3e 20 37 20 3a 20 57 72 69 74 65 20 46 69 6c 65     > 7 : Write File
	...

000003b1 <__c.2095>:
     3b1:	3e 20 36 20 3a 20 52 65 61 64 20 46 69 6c 65 00     > 6 : Read File.

000003c1 <__c.2093>:
     3c1:	3e 20 35 20 3a 20 47 65 74 20 66 69 6c 65 20 6c     > 5 : Get file l
     3d1:	69 73 74 00                                         ist.

000003d5 <__c.2091>:
     3d5:	3e 20 32 20 3a 20 52 65 61 64 20 73 69 6e 67 6c     > 2 : Read singl
     3e5:	65 20 42 6c 6f 63 6b 00                             e Block.

000003ed <__c.2089>:
     3ed:	3e 20 31 20 3a 20 57 72 69 74 65 20 73 69 6e 67     > 1 : Write sing
     3fd:	6c 65 20 42 6c 6f 63 6b 00                          le Block.

00000406 <__c.2087>:
     406:	3e 20 30 20 3a 20 45 72 61 73 65 20 42 6c 6f 63     > 0 : Erase Bloc
     416:	6b 73 00                                            ks.

00000419 <__c.2085>:
     419:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

0000042a <__c.2083>:
     42a:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

0000043b <__c.2081>:
     43b:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     44b:	44 65 74 65 63 74 65 64 21 00                       Detected!.

00000455 <__c.2078>:
     455:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     465:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     475:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000480 <__c.2075>:
     480:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     490:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

0000049d <__c.2071>:
     49d:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     4ad:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     4bd:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000004c8 <__c.2067>:
     4c8:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     4d8:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

000004e5 <__c.2065>:
     4e5:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     4f5:	63 74 65 64 2e 2e 00                                cted...

000004fc <__c.2060>:
     4fc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     50c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     51c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

0000052a <__c.2058>:
     52a:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
     53a:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
     54a:	69 6e 67 2e 2e 20 20 00                             ing..  .

00000552 <__c.2056>:
     552:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     562:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     572:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

00000580 <__ctors_end>:
     580:	11 24       	eor	r1, r1
     582:	1f be       	out	0x3f, r1	; 63
     584:	cf ef       	ldi	r28, 0xFF	; 255
     586:	d1 e2       	ldi	r29, 0x21	; 33
     588:	de bf       	out	0x3e, r29	; 62
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	0c bf       	out	0x3c, r16	; 60

00000590 <__do_copy_data>:
     590:	12 e0       	ldi	r17, 0x02	; 2
     592:	a0 e0       	ldi	r26, 0x00	; 0
     594:	b2 e0       	ldi	r27, 0x02	; 2
     596:	e2 e5       	ldi	r30, 0x52	; 82
     598:	f7 e2       	ldi	r31, 0x27	; 39
     59a:	00 e0       	ldi	r16, 0x00	; 0
     59c:	0b bf       	out	0x3b, r16	; 59
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__do_copy_data+0x14>
     5a0:	07 90       	elpm	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	a4 31       	cpi	r26, 0x14	; 20
     5a6:	b1 07       	cpc	r27, r17
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__do_copy_data+0x10>

000005aa <__do_clear_bss>:
     5aa:	22 e1       	ldi	r18, 0x12	; 18
     5ac:	a4 e1       	ldi	r26, 0x14	; 20
     5ae:	b2 e0       	ldi	r27, 0x02	; 2
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	a5 34       	cpi	r26, 0x45	; 69
     5b6:	b2 07       	cpc	r27, r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>
     5ba:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <main>
     5be:	0c 94 a7 13 	jmp	0x274e	; 0x274e <_exit>

000005c2 <__bad_interrupt>:
     5c2:	1e cd       	rjmp	.-1476   	; 0x0 <__vectors>

000005c4 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     5c4:	cf 92       	push	r12
     5c6:	df 92       	push	r13
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     5cc:	a0 91 2e 12 	lds	r26, 0x122E	; 0x80122e <sectorPerCluster>
     5d0:	b0 91 2f 12 	lds	r27, 0x122F	; 0x80122f <sectorPerCluster+0x1>
     5d4:	c0 90 18 02 	lds	r12, 0x0218	; 0x800218 <firstDataSector>
     5d8:	d0 90 19 02 	lds	r13, 0x0219	; 0x800219 <firstDataSector+0x1>
     5dc:	e0 90 1a 02 	lds	r14, 0x021A	; 0x80021a <firstDataSector+0x2>
     5e0:	f0 90 1b 02 	lds	r15, 0x021B	; 0x80021b <firstDataSector+0x3>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	22 50       	subi	r18, 0x02	; 2
     5ea:	31 09       	sbc	r19, r1
     5ec:	41 09       	sbc	r20, r1
     5ee:	51 09       	sbc	r21, r1
     5f0:	0e 94 9d 13 	call	0x273a	; 0x273a <__muluhisi3>
     5f4:	6c 0d       	add	r22, r12
     5f6:	7d 1d       	adc	r23, r13
     5f8:	8e 1d       	adc	r24, r14
     5fa:	9f 1d       	adc	r25, r15
}
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	08 95       	ret

00000606 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     606:	4f 92       	push	r4
     608:	5f 92       	push	r5
     60a:	6f 92       	push	r6
     60c:	7f 92       	push	r7
     60e:	8f 92       	push	r8
     610:	9f 92       	push	r9
     612:	af 92       	push	r10
     614:	bf 92       	push	r11
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	d4 2f       	mov	r29, r20
     628:	28 01       	movw	r4, r16
     62a:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     62c:	40 91 39 12 	lds	r20, 0x1239	; 0x801239 <reservedSectorCount>
     630:	50 91 3a 12 	lds	r21, 0x123A	; 0x80123a <reservedSectorCount+0x1>
     634:	4b 01       	movw	r8, r22
     636:	5c 01       	movw	r10, r24
     638:	88 0c       	add	r8, r8
     63a:	99 1c       	adc	r9, r9
     63c:	aa 1c       	adc	r10, r10
     63e:	bb 1c       	adc	r11, r11
     640:	88 0c       	add	r8, r8
     642:	99 1c       	adc	r9, r9
     644:	aa 1c       	adc	r10, r10
     646:	bb 1c       	adc	r11, r11
     648:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <bytesPerSector>
     64c:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <bytesPerSector+0x1>
     650:	c0 90 30 12 	lds	r12, 0x1230	; 0x801230 <unusedSectors>
     654:	d0 90 31 12 	lds	r13, 0x1231	; 0x801231 <unusedSectors+0x1>
     658:	e0 90 32 12 	lds	r14, 0x1232	; 0x801232 <unusedSectors+0x2>
     65c:	f0 90 33 12 	lds	r15, 0x1233	; 0x801233 <unusedSectors+0x3>
     660:	c4 0e       	add	r12, r20
     662:	d5 1e       	adc	r13, r21
     664:	e1 1c       	adc	r14, r1
     666:	f1 1c       	adc	r15, r1
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	c5 01       	movw	r24, r10
     66e:	b4 01       	movw	r22, r8
     670:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__udivmodsi4>
     674:	c2 0e       	add	r12, r18
     676:	d3 1e       	adc	r13, r19
     678:	e4 1e       	adc	r14, r20
     67a:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     67c:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <bytesPerSector>
     680:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <bytesPerSector+0x1>
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	c5 01       	movw	r24, r10
     68a:	b4 01       	movw	r22, r8
     68c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__udivmodsi4>
     690:	4b 01       	movw	r8, r22
     692:	5c 01       	movw	r10, r24
     694:	ca e0       	ldi	r28, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     696:	c7 01       	movw	r24, r14
     698:	b6 01       	movw	r22, r12
     69a:	0e 94 99 12 	call	0x2532	; 0x2532 <SD_readSingleBlock>
     69e:	88 23       	and	r24, r24
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <getSetNextCluster+0xa0>
     6a2:	c1 50       	subi	r28, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     6a4:	c1 f7       	brne	.-16     	; 0x696 <getSetNextCluster+0x90>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     6a6:	f4 01       	movw	r30, r8
     6a8:	e2 5d       	subi	r30, 0xD2	; 210
     6aa:	fd 4f       	sbci	r31, 0xFD	; 253

if(get_set == GET)
     6ac:	d1 11       	cpse	r29, r1
     6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <getSetNextCluster+0xba>
  return ((*FATEntryValue) & 0x0fffffff);
     6b0:	80 81       	ld	r24, Z
     6b2:	91 81       	ldd	r25, Z+1	; 0x01
     6b4:	a2 81       	ldd	r26, Z+2	; 0x02
     6b6:	b3 81       	ldd	r27, Z+3	; 0x03
     6b8:	bc 01       	movw	r22, r24
     6ba:	cd 01       	movw	r24, r26
     6bc:	9f 70       	andi	r25, 0x0F	; 15
     6be:	0b c0       	rjmp	.+22     	; 0x6d6 <getSetNextCluster+0xd0>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     6c0:	40 82       	st	Z, r4
     6c2:	51 82       	std	Z+1, r5	; 0x01
     6c4:	62 82       	std	Z+2, r6	; 0x02
     6c6:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     6c8:	c7 01       	movw	r24, r14
     6ca:	b6 01       	movw	r22, r12
     6cc:	0e 94 c1 12 	call	0x2582	; 0x2582 <SD_writeSingleBlock>

return (0);
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	cb 01       	movw	r24, r22
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	7f 90       	pop	r7
     6f0:	6f 90       	pop	r6
     6f2:	5f 90       	pop	r5
     6f4:	4f 90       	pop	r4
     6f6:	08 95       	ret

000006f8 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	d8 2f       	mov	r29, r24
     706:	c6 2f       	mov	r28, r22
     708:	69 01       	movw	r12, r18
     70a:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     70c:	80 91 30 12 	lds	r24, 0x1230	; 0x801230 <unusedSectors>
     710:	90 91 31 12 	lds	r25, 0x1231	; 0x801231 <unusedSectors+0x1>
     714:	a0 91 32 12 	lds	r26, 0x1232	; 0x801232 <unusedSectors+0x2>
     718:	b0 91 33 12 	lds	r27, 0x1233	; 0x801233 <unusedSectors+0x3>
     71c:	bc 01       	movw	r22, r24
     71e:	cd 01       	movw	r24, r26
     720:	6f 5f       	subi	r22, 0xFF	; 255
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	8f 4f       	sbci	r24, 0xFF	; 255
     726:	9f 4f       	sbci	r25, 0xFF	; 255
     728:	0e 94 99 12 	call	0x2532	; 0x2532 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     72c:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <buffer>
     730:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <buffer+0x1>
     734:	a0 91 30 02 	lds	r26, 0x0230	; 0x800230 <buffer+0x2>
     738:	b0 91 31 02 	lds	r27, 0x0231	; 0x800231 <buffer+0x3>
     73c:	82 35       	cpi	r24, 0x52	; 82
     73e:	92 45       	sbci	r25, 0x52	; 82
     740:	a1 46       	sbci	r26, 0x61	; 97
     742:	b1 44       	sbci	r27, 0x41	; 65
     744:	09 f0       	breq	.+2      	; 0x748 <getSetFreeCluster+0x50>
     746:	58 c0       	rjmp	.+176    	; 0x7f8 <getSetFreeCluster+0x100>
     748:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <buffer+0x1e4>
     74c:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <buffer+0x1e5>
     750:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <buffer+0x1e6>
     754:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <buffer+0x1e7>
     758:	82 37       	cpi	r24, 0x72	; 114
     75a:	92 47       	sbci	r25, 0x72	; 114
     75c:	a1 44       	sbci	r26, 0x41	; 65
     75e:	b1 46       	sbci	r27, 0x61	; 97
     760:	09 f0       	breq	.+2      	; 0x764 <getSetFreeCluster+0x6c>
     762:	4e c0       	rjmp	.+156    	; 0x800 <getSetFreeCluster+0x108>
     764:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <buffer+0x1fc>
     768:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <buffer+0x1fd>
     76c:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <buffer+0x1fe>
     770:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <buffer+0x1ff>
     774:	00 97       	sbiw	r24, 0x00	; 0
     776:	a5 45       	sbci	r26, 0x55	; 85
     778:	ba 4a       	sbci	r27, 0xAA	; 170
     77a:	09 f0       	breq	.+2      	; 0x77e <getSetFreeCluster+0x86>
     77c:	45 c0       	rjmp	.+138    	; 0x808 <getSetFreeCluster+0x110>
  return 0xffffffff;

 if(get_set == GET)
     77e:	c1 11       	cpse	r28, r1
     780:	14 c0       	rjmp	.+40     	; 0x7aa <getSetFreeCluster+0xb2>
 {
   if(totOrNext == TOTAL_FREE)
     782:	d1 30       	cpi	r29, 0x01	; 1
     784:	49 f4       	brne	.+18     	; 0x798 <getSetFreeCluster+0xa0>
      return(FS->freeClusterCount);
     786:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <buffer+0x1e8>
     78a:	70 91 17 04 	lds	r23, 0x0417	; 0x800417 <buffer+0x1e9>
     78e:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <buffer+0x1ea>
     792:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <buffer+0x1eb>
     796:	3b c0       	rjmp	.+118    	; 0x80e <getSetFreeCluster+0x116>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     798:	60 91 1a 04 	lds	r22, 0x041A	; 0x80041a <buffer+0x1ec>
     79c:	70 91 1b 04 	lds	r23, 0x041B	; 0x80041b <buffer+0x1ed>
     7a0:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <buffer+0x1ee>
     7a4:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <buffer+0x1ef>
     7a8:	32 c0       	rjmp	.+100    	; 0x80e <getSetFreeCluster+0x116>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     7aa:	d1 30       	cpi	r29, 0x01	; 1
     7ac:	49 f4       	brne	.+18     	; 0x7c0 <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
     7ae:	c0 92 16 04 	sts	0x0416, r12	; 0x800416 <buffer+0x1e8>
     7b2:	d0 92 17 04 	sts	0x0417, r13	; 0x800417 <buffer+0x1e9>
     7b6:	e0 92 18 04 	sts	0x0418, r14	; 0x800418 <buffer+0x1ea>
     7ba:	f0 92 19 04 	sts	0x0419, r15	; 0x800419 <buffer+0x1eb>
     7be:	08 c0       	rjmp	.+16     	; 0x7d0 <getSetFreeCluster+0xd8>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     7c0:	c0 92 1a 04 	sts	0x041A, r12	; 0x80041a <buffer+0x1ec>
     7c4:	d0 92 1b 04 	sts	0x041B, r13	; 0x80041b <buffer+0x1ed>
     7c8:	e0 92 1c 04 	sts	0x041C, r14	; 0x80041c <buffer+0x1ee>
     7cc:	f0 92 1d 04 	sts	0x041D, r15	; 0x80041d <buffer+0x1ef>
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     7d0:	80 91 30 12 	lds	r24, 0x1230	; 0x801230 <unusedSectors>
     7d4:	90 91 31 12 	lds	r25, 0x1231	; 0x801231 <unusedSectors+0x1>
     7d8:	a0 91 32 12 	lds	r26, 0x1232	; 0x801232 <unusedSectors+0x2>
     7dc:	b0 91 33 12 	lds	r27, 0x1233	; 0x801233 <unusedSectors+0x3>
     7e0:	bc 01       	movw	r22, r24
     7e2:	cd 01       	movw	r24, r26
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	8f 4f       	sbci	r24, 0xFF	; 255
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	0e 94 c1 12 	call	0x2582	; 0x2582 <SD_writeSingleBlock>
 }
 return 0xffffffff;
     7f0:	6f ef       	ldi	r22, 0xFF	; 255
     7f2:	7f ef       	ldi	r23, 0xFF	; 255
     7f4:	cb 01       	movw	r24, r22
     7f6:	0b c0       	rjmp	.+22     	; 0x80e <getSetFreeCluster+0x116>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
     7f8:	6f ef       	ldi	r22, 0xFF	; 255
     7fa:	7f ef       	ldi	r23, 0xFF	; 255
     7fc:	cb 01       	movw	r24, r22
     7fe:	07 c0       	rjmp	.+14     	; 0x80e <getSetFreeCluster+0x116>
     800:	6f ef       	ldi	r22, 0xFF	; 255
     802:	7f ef       	ldi	r23, 0xFF	; 255
     804:	cb 01       	movw	r24, r22
     806:	03 c0       	rjmp	.+6      	; 0x80e <getSetFreeCluster+0x116>
     808:	6f ef       	ldi	r22, 0xFF	; 255
     80a:	7f ef       	ldi	r23, 0xFF	; 255
     80c:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	08 95       	ret

0000081c <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     828:	10 92 30 12 	sts	0x1230, r1	; 0x801230 <unusedSectors>
     82c:	10 92 31 12 	sts	0x1231, r1	; 0x801231 <unusedSectors+0x1>
     830:	10 92 32 12 	sts	0x1232, r1	; 0x801232 <unusedSectors+0x2>
     834:	10 92 33 12 	sts	0x1233, r1	; 0x801233 <unusedSectors+0x3>

SD_readSingleBlock(0);
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	cb 01       	movw	r24, r22
     83e:	0e 94 99 12 	call	0x2532	; 0x2532 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     842:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <buffer>
     846:	8d 7f       	andi	r24, 0xFD	; 253
     848:	89 3e       	cpi	r24, 0xE9	; 233
     84a:	01 f1       	breq	.+64     	; 0x88c <getBootSectorData+0x70>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     84c:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <buffer+0x1fe>
     850:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <buffer+0x1ff>
     854:	85 35       	cpi	r24, 0x55	; 85
     856:	9a 4a       	sbci	r25, 0xAA	; 170
     858:	09 f0       	breq	.+2      	; 0x85c <getBootSectorData+0x40>
     85a:	96 c0       	rjmp	.+300    	; 0x988 <getBootSectorData+0x16c>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     85c:	60 91 f4 03 	lds	r22, 0x03F4	; 0x8003f4 <buffer+0x1c6>
     860:	70 91 f5 03 	lds	r23, 0x03F5	; 0x8003f5 <buffer+0x1c7>
     864:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <buffer+0x1c8>
     868:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <buffer+0x1c9>
     86c:	60 93 30 12 	sts	0x1230, r22	; 0x801230 <unusedSectors>
     870:	70 93 31 12 	sts	0x1231, r23	; 0x801231 <unusedSectors+0x1>
     874:	80 93 32 12 	sts	0x1232, r24	; 0x801232 <unusedSectors+0x2>
     878:	90 93 33 12 	sts	0x1233, r25	; 0x801233 <unusedSectors+0x3>
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     87c:	0e 94 99 12 	call	0x2532	; 0x2532 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     880:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <buffer>
     884:	8d 7f       	andi	r24, 0xFD	; 253
     886:	89 3e       	cpi	r24, 0xE9	; 233
     888:	09 f0       	breq	.+2      	; 0x88c <getBootSectorData+0x70>
     88a:	80 c0       	rjmp	.+256    	; 0x98c <getBootSectorData+0x170>
}

bytesPerSector = bpb->bytesPerSector;
     88c:	ee e2       	ldi	r30, 0x2E	; 46
     88e:	f2 e0       	ldi	r31, 0x02	; 2
     890:	83 85       	ldd	r24, Z+11	; 0x0b
     892:	94 85       	ldd	r25, Z+12	; 0x0c
     894:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <bytesPerSector+0x1>
     898:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <bytesPerSector>
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     89c:	85 85       	ldd	r24, Z+13	; 0x0d
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	90 93 2f 12 	sts	0x122F, r25	; 0x80122f <sectorPerCluster+0x1>
     8a4:	80 93 2e 12 	sts	0x122E, r24	; 0x80122e <sectorPerCluster>
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     8a8:	c6 85       	ldd	r28, Z+14	; 0x0e
     8aa:	d7 85       	ldd	r29, Z+15	; 0x0f
     8ac:	d0 93 3a 12 	sts	0x123A, r29	; 0x80123a <reservedSectorCount+0x1>
     8b0:	c0 93 39 12 	sts	0x1239, r28	; 0x801239 <reservedSectorCount>
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     8b4:	84 a5       	ldd	r24, Z+44	; 0x2c
     8b6:	95 a5       	ldd	r25, Z+45	; 0x2d
     8b8:	a6 a5       	ldd	r26, Z+46	; 0x2e
     8ba:	b7 a5       	ldd	r27, Z+47	; 0x2f
     8bc:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <rootCluster>
     8c0:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <rootCluster+0x1>
     8c4:	a0 93 28 02 	sts	0x0228, r26	; 0x800228 <rootCluster+0x2>
     8c8:	b0 93 29 02 	sts	0x0229, r27	; 0x800229 <rootCluster+0x3>
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     8cc:	00 91 39 12 	lds	r16, 0x1239	; 0x801239 <reservedSectorCount>
     8d0:	10 91 3a 12 	lds	r17, 0x123A	; 0x80123a <reservedSectorCount+0x1>
     8d4:	a0 89       	ldd	r26, Z+16	; 0x10
     8d6:	24 a1       	ldd	r18, Z+36	; 0x24
     8d8:	35 a1       	ldd	r19, Z+37	; 0x25
     8da:	46 a1       	ldd	r20, Z+38	; 0x26
     8dc:	57 a1       	ldd	r21, Z+39	; 0x27
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	0e 94 9d 13 	call	0x273a	; 0x273a <__muluhisi3>
     8e4:	ab 01       	movw	r20, r22
     8e6:	bc 01       	movw	r22, r24
     8e8:	84 8d       	ldd	r24, Z+28	; 0x1c
     8ea:	95 8d       	ldd	r25, Z+29	; 0x1d
     8ec:	a6 8d       	ldd	r26, Z+30	; 0x1e
     8ee:	b7 8d       	ldd	r27, Z+31	; 0x1f
     8f0:	80 0f       	add	r24, r16
     8f2:	91 1f       	adc	r25, r17
     8f4:	a1 1d       	adc	r26, r1
     8f6:	b1 1d       	adc	r27, r1
     8f8:	84 0f       	add	r24, r20
     8fa:	95 1f       	adc	r25, r21
     8fc:	a6 1f       	adc	r26, r22
     8fe:	b7 1f       	adc	r27, r23
     900:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <firstDataSector>
     904:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <firstDataSector+0x1>
     908:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <firstDataSector+0x2>
     90c:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <firstDataSector+0x3>

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     910:	20 91 2e 12 	lds	r18, 0x122E	; 0x80122e <sectorPerCluster>
     914:	30 91 2f 12 	lds	r19, 0x122F	; 0x80122f <sectorPerCluster+0x1>
     918:	80 a1       	ldd	r24, Z+32	; 0x20
     91a:	91 a1       	ldd	r25, Z+33	; 0x21
     91c:	a2 a1       	ldd	r26, Z+34	; 0x22
     91e:	b3 a1       	ldd	r27, Z+35	; 0x23
     920:	8c 1b       	sub	r24, r28
     922:	9d 0b       	sbc	r25, r29
     924:	a1 09       	sbc	r26, r1
     926:	b1 09       	sbc	r27, r1
     928:	7c 01       	movw	r14, r24
     92a:	8d 01       	movw	r16, r26
     92c:	e4 1a       	sub	r14, r20
     92e:	f5 0a       	sbc	r15, r21
     930:	06 0b       	sbc	r16, r22
     932:	17 0b       	sbc	r17, r23
     934:	c8 01       	movw	r24, r16
     936:	b7 01       	movw	r22, r14
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__udivmodsi4>
     940:	20 93 22 02 	sts	0x0222, r18	; 0x800222 <totalClusters>
     944:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <totalClusters+0x1>
     948:	40 93 24 02 	sts	0x0224, r20	; 0x800224 <totalClusters+0x2>
     94c:	50 93 25 02 	sts	0x0225, r21	; 0x800225 <totalClusters+0x3>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	a9 01       	movw	r20, r18
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	ce de       	rcall	.-612    	; 0x6f8 <getSetFreeCluster>
     95c:	00 91 22 02 	lds	r16, 0x0222	; 0x800222 <totalClusters>
     960:	10 91 23 02 	lds	r17, 0x0223	; 0x800223 <totalClusters+0x1>
     964:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <totalClusters+0x2>
     968:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <totalClusters+0x3>
     96c:	06 17       	cp	r16, r22
     96e:	17 07       	cpc	r17, r23
     970:	28 07       	cpc	r18, r24
     972:	39 07       	cpc	r19, r25
     974:	20 f4       	brcc	.+8      	; 0x97e <getBootSectorData+0x162>
     freeClusterCountUpdated = 0;
     976:	10 92 40 12 	sts	0x1240, r1	; 0x801240 <freeClusterCountUpdated>
else
	 freeClusterCountUpdated = 1;
return 0;
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	08 c0       	rjmp	.+16     	; 0x98e <getBootSectorData+0x172>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 40 12 	sts	0x1240, r24	; 0x801240 <freeClusterCountUpdated>
return 0;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	03 c0       	rjmp	.+6      	; 0x98e <getBootSectorData+0x172>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	01 c0       	rjmp	.+2      	; 0x98e <getBootSectorData+0x172>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     98c:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	08 95       	ret

0000099c <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	2b 97       	sbiw	r28, 0x0b	; 11
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	bc 01       	movw	r22, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     9b2:	dc 01       	movw	r26, r24
     9b4:	8c 91       	ld	r24, X
     9b6:	8e 32       	cpi	r24, 0x2E	; 46
     9b8:	61 f1       	breq	.+88     	; 0xa12 <convertFileName+0x76>
     9ba:	fb 01       	movw	r30, r22
     9bc:	31 96       	adiw	r30, 0x01	; 1
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     9be:	91 e0       	ldi	r25, 0x01	; 1
if(fileName[j] == '.') break;
     9c0:	81 91       	ld	r24, Z+
     9c2:	8e 32       	cpi	r24, 0x2E	; 46
     9c4:	21 f0       	breq	.+8      	; 0x9ce <convertFileName+0x32>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     9c6:	9f 5f       	subi	r25, 0xFF	; 255
     9c8:	9c 30       	cpi	r25, 0x0C	; 12
     9ca:	d1 f7       	brne	.-12     	; 0x9c0 <convertFileName+0x24>
     9cc:	06 c0       	rjmp	.+12     	; 0x9da <convertFileName+0x3e>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     9ce:	99 30       	cpi	r25, 0x09	; 9
     9d0:	20 f4       	brcc	.+8      	; 0x9da <convertFileName+0x3e>

for(k=0; k<j; k++) //setting file name
     9d2:	91 11       	cpse	r25, r1
     9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <convertFileName+0x4a>
     9d6:	29 2f       	mov	r18, r25
     9d8:	1e c0       	rjmp	.+60     	; 0xa16 <convertFileName+0x7a>
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     9da:	8c ed       	ldi	r24, 0xDC	; 220
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	62 c0       	rjmp	.+196    	; 0xaaa <convertFileName+0x10e>
     9e6:	fb 01       	movw	r30, r22
     9e8:	9e 01       	movw	r18, r28
     9ea:	2f 5f       	subi	r18, 0xFF	; 255
     9ec:	3f 4f       	sbci	r19, 0xFF	; 255
     9ee:	4f ef       	ldi	r20, 0xFF	; 255
     9f0:	49 0f       	add	r20, r25
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	4f 5f       	subi	r20, 0xFF	; 255
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	46 0f       	add	r20, r22
     9fa:	57 1f       	adc	r21, r23

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
     9fc:	81 91       	ld	r24, Z+
     9fe:	d9 01       	movw	r26, r18
     a00:	8d 93       	st	X+, r24
     a02:	9d 01       	movw	r18, r26
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     a04:	4e 17       	cp	r20, r30
     a06:	5f 07       	cpc	r21, r31
     a08:	c9 f7       	brne	.-14     	; 0x9fc <convertFileName+0x60>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     a0a:	98 30       	cpi	r25, 0x08	; 8
     a0c:	78 f4       	brcc	.+30     	; 0xa2c <convertFileName+0x90>
     a0e:	29 2f       	mov	r18, r25
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <convertFileName+0x7a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     a12:	90 e0       	ldi	r25, 0x00	; 0
if(fileName[j] == '.') break;
     a14:	20 e0       	ldi	r18, 0x00	; 0

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     a16:	80 e2       	ldi	r24, 0x20	; 32
     a18:	e1 e0       	ldi	r30, 0x01	; 1
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	ec 0f       	add	r30, r28
     a1e:	fd 1f       	adc	r31, r29
     a20:	e2 0f       	add	r30, r18
     a22:	f1 1d       	adc	r31, r1
     a24:	80 83       	st	Z, r24
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     a26:	2f 5f       	subi	r18, 0xFF	; 255
     a28:	28 30       	cpi	r18, 0x08	; 8
     a2a:	b0 f3       	brcs	.-20     	; 0xa18 <convertFileName+0x7c>
  fileNameFAT[k] = ' ';

j++;
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	29 0f       	add	r18, r25
for(k=8; k<11; k++) //setting file extention
     a30:	98 e0       	ldi	r25, 0x08	; 8
{
  if(fileName[j] != 0)
     a32:	fb 01       	movw	r30, r22
     a34:	e2 0f       	add	r30, r18
     a36:	f1 1d       	adc	r31, r1
     a38:	80 81       	ld	r24, Z
     a3a:	81 11       	cpse	r24, r1
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <convertFileName+0xa8>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     a3e:	9b 30       	cpi	r25, 0x0B	; 11
     a40:	50 f0       	brcs	.+20     	; 0xa56 <convertFileName+0xba>
     a42:	15 c0       	rjmp	.+42     	; 0xa6e <convertFileName+0xd2>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
     a44:	2f 5f       	subi	r18, 0xFF	; 255
     a46:	e1 e0       	ldi	r30, 0x01	; 1
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	ec 0f       	add	r30, r28
     a4c:	fd 1f       	adc	r31, r29
     a4e:	e9 0f       	add	r30, r25
     a50:	f1 1d       	adc	r31, r1
     a52:	80 83       	st	Z, r24
     a54:	0c c0       	rjmp	.+24     	; 0xa6e <convertFileName+0xd2>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     a56:	20 e2       	ldi	r18, 0x20	; 32
     a58:	e1 e0       	ldi	r30, 0x01	; 1
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	ec 0f       	add	r30, r28
     a5e:	fd 1f       	adc	r31, r29
     a60:	e9 0f       	add	r30, r25
     a62:	f1 1d       	adc	r31, r1
     a64:	20 83       	st	Z, r18
     a66:	9f 5f       	subi	r25, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     a68:	9b 30       	cpi	r25, 0x0B	; 11
     a6a:	b1 f7       	brne	.-20     	; 0xa58 <convertFileName+0xbc>
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <convertFileName+0xd8>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     a6e:	9f 5f       	subi	r25, 0xFF	; 255
     a70:	9b 30       	cpi	r25, 0x0B	; 11
     a72:	f8 f2       	brcs	.-66     	; 0xa32 <convertFileName+0x96>
     a74:	9e 01       	movw	r18, r28
     a76:	2f 5f       	subi	r18, 0xFF	; 255
     a78:	3f 4f       	sbci	r19, 0xFF	; 255
     a7a:	ae 01       	movw	r20, r28
     a7c:	44 5f       	subi	r20, 0xF4	; 244
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	f9 01       	movw	r30, r18
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     a82:	80 81       	ld	r24, Z
     a84:	9f e9       	ldi	r25, 0x9F	; 159
     a86:	98 0f       	add	r25, r24
     a88:	9a 31       	cpi	r25, 0x1A	; 26
     a8a:	10 f4       	brcc	.+4      	; 0xa90 <convertFileName+0xf4>
    fileNameFAT[j] -= 0x20;
     a8c:	80 52       	subi	r24, 0x20	; 32
     a8e:	80 83       	st	Z, r24
     a90:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     a92:	4e 17       	cp	r20, r30
     a94:	5f 07       	cpc	r21, r31
     a96:	a9 f7       	brne	.-22     	; 0xa82 <convertFileName+0xe6>
     a98:	fb 01       	movw	r30, r22
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     a9a:	d9 01       	movw	r26, r18
     a9c:	8d 91       	ld	r24, X+
     a9e:	9d 01       	movw	r18, r26
     aa0:	81 93       	st	Z+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     aa2:	a4 17       	cp	r26, r20
     aa4:	b5 07       	cpc	r27, r21
     aa6:	c9 f7       	brne	.-14     	; 0xa9a <convertFileName+0xfe>
  fileName[j] = fileNameFAT[j];

return 0;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
}
     aaa:	2b 96       	adiw	r28, 0x0b	; 11
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     abc:	4f 92       	push	r4
     abe:	5f 92       	push	r5
     ac0:	6f 92       	push	r6
     ac2:	7f 92       	push	r7
     ac4:	8f 92       	push	r8
     ac6:	9f 92       	push	r9
     ac8:	af 92       	push	r10
     aca:	bf 92       	push	r11
     acc:	cf 92       	push	r12
     ace:	df 92       	push	r13
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     ad8:	6b 01       	movw	r12, r22
     ada:	7c 01       	movw	r14, r24
     adc:	20 e8       	ldi	r18, 0x80	; 128
     ade:	c2 22       	and	r12, r18
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     ae0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <totalClusters>
     ae4:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <totalClusters+0x1>
     ae8:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <totalClusters+0x2>
     aec:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <totalClusters+0x3>
     af0:	c8 16       	cp	r12, r24
     af2:	d9 06       	cpc	r13, r25
     af4:	ea 06       	cpc	r14, r26
     af6:	fb 06       	cpc	r15, r27
     af8:	08 f0       	brcs	.+2      	; 0xafc <searchNextFreeCluster+0x40>
     afa:	70 c0       	rjmp	.+224    	; 0xbdc <searchNextFreeCluster+0x120>
     afc:	46 01       	movw	r8, r12
     afe:	57 01       	movw	r10, r14
     b00:	88 0c       	add	r8, r8
     b02:	99 1c       	adc	r9, r9
     b04:	aa 1c       	adc	r10, r10
     b06:	bb 1c       	adc	r11, r11
     b08:	88 0c       	add	r8, r8
     b0a:	99 1c       	adc	r9, r9
     b0c:	aa 1c       	adc	r10, r10
     b0e:	bb 1c       	adc	r11, r11
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     b10:	ce e2       	ldi	r28, 0x2E	; 46
     b12:	d2 e0       	ldi	r29, 0x02	; 2
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     b14:	40 91 39 12 	lds	r20, 0x1239	; 0x801239 <reservedSectorCount>
     b18:	50 91 3a 12 	lds	r21, 0x123A	; 0x80123a <reservedSectorCount+0x1>
     b1c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <bytesPerSector>
     b20:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <bytesPerSector+0x1>
      SD_readSingleBlock(sector);
     b24:	40 90 30 12 	lds	r4, 0x1230	; 0x801230 <unusedSectors>
     b28:	50 90 31 12 	lds	r5, 0x1231	; 0x801231 <unusedSectors+0x1>
     b2c:	60 90 32 12 	lds	r6, 0x1232	; 0x801232 <unusedSectors+0x2>
     b30:	70 90 33 12 	lds	r7, 0x1233	; 0x801233 <unusedSectors+0x3>
     b34:	44 0e       	add	r4, r20
     b36:	55 1e       	adc	r5, r21
     b38:	61 1c       	adc	r6, r1
     b3a:	71 1c       	adc	r7, r1
     b3c:	9c 01       	movw	r18, r24
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	c5 01       	movw	r24, r10
     b44:	b4 01       	movw	r22, r8
     b46:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__udivmodsi4>
     b4a:	c3 01       	movw	r24, r6
     b4c:	b2 01       	movw	r22, r4
     b4e:	62 0f       	add	r22, r18
     b50:	73 1f       	adc	r23, r19
     b52:	84 1f       	adc	r24, r20
     b54:	95 1f       	adc	r25, r21
     b56:	0e 94 99 12 	call	0x2532	; 0x2532 <SD_readSingleBlock>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     b5a:	88 81       	ld	r24, Y
     b5c:	99 81       	ldd	r25, Y+1	; 0x01
     b5e:	aa 81       	ldd	r26, Y+2	; 0x02
     b60:	bb 81       	ldd	r27, Y+3	; 0x03
     b62:	bf 70       	andi	r27, 0x0F	; 15
     b64:	89 2b       	or	r24, r25
     b66:	8a 2b       	or	r24, r26
     b68:	8b 2b       	or	r24, r27
     b6a:	99 f0       	breq	.+38     	; 0xb92 <searchNextFreeCluster+0xd6>
     b6c:	21 e0       	ldi	r18, 0x01	; 1
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
     b6e:	e2 2f       	mov	r30, r18
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
         if(((*value) & 0x0fffffff) == 0)
     b7a:	e2 5d       	subi	r30, 0xD2	; 210
     b7c:	fd 4f       	sbci	r31, 0xFD	; 253
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	a2 81       	ldd	r26, Z+2	; 0x02
     b84:	b3 81       	ldd	r27, Z+3	; 0x03
     b86:	bf 70       	andi	r27, 0x0F	; 15
     b88:	89 2b       	or	r24, r25
     b8a:	8a 2b       	or	r24, r26
     b8c:	8b 2b       	or	r24, r27
     b8e:	49 f4       	brne	.+18     	; 0xba2 <searchNextFreeCluster+0xe6>
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <searchNextFreeCluster+0xd8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     b92:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
     b94:	c7 01       	movw	r24, r14
     b96:	b6 01       	movw	r22, r12
     b98:	62 0f       	add	r22, r18
     b9a:	71 1d       	adc	r23, r1
     b9c:	81 1d       	adc	r24, r1
     b9e:	91 1d       	adc	r25, r1
     ba0:	20 c0       	rjmp	.+64     	; 0xbe2 <searchNextFreeCluster+0x126>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     ba2:	2f 5f       	subi	r18, 0xFF	; 255
     ba4:	22 f7       	brpl	.-56     	; 0xb6e <searchNextFreeCluster+0xb2>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     ba6:	80 e8       	ldi	r24, 0x80	; 128
     ba8:	c8 0e       	add	r12, r24
     baa:	d1 1c       	adc	r13, r1
     bac:	e1 1c       	adc	r14, r1
     bae:	f1 1c       	adc	r15, r1
     bb0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <totalClusters>
     bb4:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <totalClusters+0x1>
     bb8:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <totalClusters+0x2>
     bbc:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <totalClusters+0x3>
     bc0:	22 e0       	ldi	r18, 0x02	; 2
     bc2:	92 0e       	add	r9, r18
     bc4:	a1 1c       	adc	r10, r1
     bc6:	b1 1c       	adc	r11, r1
     bc8:	c8 16       	cp	r12, r24
     bca:	d9 06       	cpc	r13, r25
     bcc:	ea 06       	cpc	r14, r26
     bce:	fb 06       	cpc	r15, r27
     bd0:	08 f4       	brcc	.+2      	; 0xbd4 <searchNextFreeCluster+0x118>
     bd2:	a0 cf       	rjmp	.-192    	; 0xb14 <searchNextFreeCluster+0x58>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	cb 01       	movw	r24, r22
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <searchNextFreeCluster+0x126>
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	cb 01       	movw	r24, r22
}
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	7f 90       	pop	r7
     bf8:	6f 90       	pop	r6
     bfa:	5f 90       	pop	r5
     bfc:	4f 90       	pop	r4
     bfe:	08 95       	ret

00000c00 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     c00:	8f 92       	push	r8
     c02:	9f 92       	push	r9
     c04:	af 92       	push	r10
     c06:	bf 92       	push	r11
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	64 97       	sbiw	r28, 0x14	; 20
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	d8 2e       	mov	r13, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	ba 01       	movw	r22, r20
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     c2c:	24 e1       	ldi	r18, 0x14	; 20
     c2e:	e0 e0       	ldi	r30, 0x00	; 0
     c30:	f2 e0       	ldi	r31, 0x02	; 2
     c32:	de 01       	movw	r26, r28
     c34:	11 96       	adiw	r26, 0x01	; 1
     c36:	01 90       	ld	r0, Z+
     c38:	0d 92       	st	X+, r0
     c3a:	2a 95       	dec	r18
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <displayMemory+0x36>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     c3e:	1c e0       	ldi	r17, 0x0C	; 12
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     c40:	0c e2       	ldi	r16, 0x2C	; 44
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     c42:	0f 2e       	mov	r0, r31
     c44:	fa e0       	ldi	r31, 0x0A	; 10
     c46:	8f 2e       	mov	r8, r31
     c48:	91 2c       	mov	r9, r1
     c4a:	a1 2c       	mov	r10, r1
     c4c:	b1 2c       	mov	r11, r1
     c4e:	f0 2d       	mov	r31, r0
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     c50:	15 30       	cpi	r17, 0x05	; 5
     c52:	11 f0       	breq	.+4      	; 0xc58 <displayMemory+0x58>
     c54:	19 30       	cpi	r17, 0x09	; 9
     c56:	29 f4       	brne	.+10     	; 0xc62 <displayMemory+0x62>
	{
	   memoryString[i-1] = ',';  
     c58:	fe 01       	movw	r30, r28
     c5a:	e1 0f       	add	r30, r17
     c5c:	f1 1d       	adc	r31, r1
     c5e:	00 83       	st	Z, r16
	   i--;
     c60:	11 50       	subi	r17, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     c62:	7e 01       	movw	r14, r28
     c64:	e1 0e       	add	r14, r17
     c66:	f1 1c       	adc	r15, r1
     c68:	a5 01       	movw	r20, r10
     c6a:	94 01       	movw	r18, r8
     c6c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__udivmodsi4>
     c70:	60 63       	ori	r22, 0x30	; 48
     c72:	f7 01       	movw	r30, r14
     c74:	60 83       	st	Z, r22
    memory /= 10;
     c76:	62 2f       	mov	r22, r18
     c78:	73 2f       	mov	r23, r19
     c7a:	84 2f       	mov	r24, r20
     c7c:	95 2f       	mov	r25, r21
	if(memory == 0) break;
     c7e:	61 15       	cp	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	81 05       	cpc	r24, r1
     c84:	91 05       	cpc	r25, r1
     c86:	11 f0       	breq	.+4      	; 0xc8c <displayMemory+0x8c>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     c88:	11 50       	subi	r17, 0x01	; 1
     c8a:	11 f7       	brne	.-60     	; 0xc50 <displayMemory+0x50>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     c8c:	f1 e0       	ldi	r31, 0x01	; 1
     c8e:	df 12       	cpse	r13, r31
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <displayMemory+0x96>
     c92:	8b e4       	ldi	r24, 0x4B	; 75
     c94:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	0e 94 47 13 	call	0x268e	; 0x268e <transmitString>
}
     c9e:	64 96       	adiw	r28, 0x14	; 20
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	08 95       	ret

00000cc2 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     cc2:	4f 92       	push	r4
     cc4:	5f 92       	push	r5
     cc6:	6f 92       	push	r6
     cc8:	7f 92       	push	r7
     cca:	8f 92       	push	r8
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <memoryStatistics+0x22>
     ce4:	1f 92       	push	r1
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
     cea:	a0 91 2e 12 	lds	r26, 0x122E	; 0x80122e <sectorPerCluster>
     cee:	b0 91 2f 12 	lds	r27, 0x122F	; 0x80122f <sectorPerCluster+0x1>
     cf2:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <totalClusters>
     cf6:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <totalClusters+0x1>
     cfa:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <totalClusters+0x2>
     cfe:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <totalClusters+0x3>
     d02:	0e 94 9d 13 	call	0x273a	; 0x273a <__muluhisi3>
     d06:	9b 01       	movw	r18, r22
     d08:	ac 01       	movw	r20, r24
     d0a:	01 2e       	mov	r0, r17
     d0c:	1a e0       	ldi	r17, 0x0A	; 10
     d0e:	56 95       	lsr	r21
     d10:	47 95       	ror	r20
     d12:	37 95       	ror	r19
     d14:	27 95       	ror	r18
     d16:	1a 95       	dec	r17
     d18:	d1 f7       	brne	.-12     	; 0xd0e <memoryStatistics+0x4c>
     d1a:	10 2d       	mov	r17, r0
totalMemory *= bytesPerSector;
     d1c:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <bytesPerSector>
     d20:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <bytesPerSector+0x1>
     d24:	0e 94 9d 13 	call	0x273a	; 0x273a <__muluhisi3>
     d28:	6b 01       	movw	r12, r22
     d2a:	7c 01       	movw	r14, r24

TX_NEWLINE;
     d2c:	8d e0       	ldi	r24, 0x0D	; 13
     d2e:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
     d32:	8a e0       	ldi	r24, 0x0A	; 10
     d34:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
TX_NEWLINE;
     d38:	8d e0       	ldi	r24, 0x0D	; 13
     d3a:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
     d3e:	8a e0       	ldi	r24, 0x0A	; 10
     d40:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
transmitString_F(PSTR("Total Memory: "));
     d44:	87 e0       	ldi	r24, 0x07	; 7
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>

displayMemory (HIGH, totalMemory);
     d4c:	b7 01       	movw	r22, r14
     d4e:	a6 01       	movw	r20, r12
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	56 df       	rcall	.-340    	; 0xc00 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	a9 01       	movw	r20, r18
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	cc dc       	rcall	.-1640   	; 0x6f8 <getSetFreeCluster>
     d60:	4b 01       	movw	r8, r22
     d62:	5c 01       	movw	r10, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     d64:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <totalClusters>
     d68:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <totalClusters+0x1>
     d6c:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <totalClusters+0x2>
     d70:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <totalClusters+0x3>
     d74:	88 15       	cp	r24, r8
     d76:	99 05       	cpc	r25, r9
     d78:	aa 05       	cpc	r26, r10
     d7a:	bb 05       	cpc	r27, r11
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <memoryStatistics+0xbe>
     d7e:	85 c0       	rjmp	.+266    	; 0xe8a <memoryStatistics+0x1c8>
{
   freeClusterCountUpdated = 0;
     d80:	10 92 40 12 	sts	0x1240, r1	; 0x801240 <freeClusterCountUpdated>
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     d84:	40 90 26 02 	lds	r4, 0x0226	; 0x800226 <rootCluster>
     d88:	50 90 27 02 	lds	r5, 0x0227	; 0x800227 <rootCluster+0x1>
     d8c:	60 90 28 02 	lds	r6, 0x0228	; 0x800228 <rootCluster+0x2>
     d90:	70 90 29 02 	lds	r7, 0x0229	; 0x800229 <rootCluster+0x3>
     d94:	a3 01       	movw	r20, r6
     d96:	92 01       	movw	r18, r4
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	44 1f       	adc	r20, r20
     d9e:	55 1f       	adc	r21, r21
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	29 83       	std	Y+1, r18	; 0x01
     daa:	3a 83       	std	Y+2, r19	; 0x02
     dac:	4b 83       	std	Y+3, r20	; 0x03
     dae:	5c 83       	std	Y+4, r21	; 0x04

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
   totalClusterCount = 0;
     db0:	c1 2c       	mov	r12, r1
     db2:	d1 2c       	mov	r13, r1
     db4:	76 01       	movw	r14, r12
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
     db6:	81 2c       	mov	r8, r1
     db8:	91 2c       	mov	r9, r1
     dba:	54 01       	movw	r10, r8
   totalClusterCount = 0;
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     dbc:	60 91 39 12 	lds	r22, 0x1239	; 0x801239 <reservedSectorCount>
     dc0:	70 91 3a 12 	lds	r23, 0x123A	; 0x80123a <reservedSectorCount+0x1>
     dc4:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <bytesPerSector>
     dc8:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <bytesPerSector+0x1>
      SD_readSingleBlock(sector);
     dcc:	00 91 30 12 	lds	r16, 0x1230	; 0x801230 <unusedSectors>
     dd0:	10 91 31 12 	lds	r17, 0x1231	; 0x801231 <unusedSectors+0x1>
     dd4:	20 91 32 12 	lds	r18, 0x1232	; 0x801232 <unusedSectors+0x2>
     dd8:	30 91 33 12 	lds	r19, 0x1233	; 0x801233 <unusedSectors+0x3>
     ddc:	28 01       	movw	r4, r16
     dde:	39 01       	movw	r6, r18
     de0:	46 0e       	add	r4, r22
     de2:	57 1e       	adc	r5, r23
     de4:	61 1c       	adc	r6, r1
     de6:	71 1c       	adc	r7, r1
     de8:	9c 01       	movw	r18, r24
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	69 81       	ldd	r22, Y+1	; 0x01
     df0:	7a 81       	ldd	r23, Y+2	; 0x02
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__udivmodsi4>
     dfa:	c3 01       	movw	r24, r6
     dfc:	b2 01       	movw	r22, r4
     dfe:	62 0f       	add	r22, r18
     e00:	73 1f       	adc	r23, r19
     e02:	84 1f       	adc	r24, r20
     e04:	95 1f       	adc	r25, r21
     e06:	0e 94 99 12 	call	0x2532	; 0x2532 <SD_readSingleBlock>
     e0a:	ee e2       	ldi	r30, 0x2E	; 46
     e0c:	f2 e0       	ldi	r31, 0x02	; 2
      for(i=0; i<128; i++)
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     e12:	81 91       	ld	r24, Z+
     e14:	91 91       	ld	r25, Z+
     e16:	a1 91       	ld	r26, Z+
     e18:	b1 91       	ld	r27, Z+
     e1a:	bf 70       	andi	r27, 0x0F	; 15
     e1c:	89 2b       	or	r24, r25
     e1e:	8a 2b       	or	r24, r26
     e20:	8b 2b       	or	r24, r27
     e22:	29 f4       	brne	.+10     	; 0xe2e <memoryStatistics+0x16c>
            freeClusters++;;
     e24:	4f ef       	ldi	r20, 0xFF	; 255
     e26:	84 1a       	sub	r8, r20
     e28:	94 0a       	sbc	r9, r20
     e2a:	a4 0a       	sbc	r10, r20
     e2c:	b4 0a       	sbc	r11, r20
        
         totalClusterCount++;
     e2e:	5f ef       	ldi	r21, 0xFF	; 255
     e30:	c5 1a       	sub	r12, r21
     e32:	d5 0a       	sbc	r13, r21
     e34:	e5 0a       	sbc	r14, r21
     e36:	f5 0a       	sbc	r15, r21
         if(totalClusterCount == (totalClusters+2)) break;
     e38:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <totalClusters>
     e3c:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <totalClusters+0x1>
     e40:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <totalClusters+0x2>
     e44:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <totalClusters+0x3>
     e48:	02 96       	adiw	r24, 0x02	; 2
     e4a:	a1 1d       	adc	r26, r1
     e4c:	b1 1d       	adc	r27, r1
     e4e:	c8 16       	cp	r12, r24
     e50:	d9 06       	cpc	r13, r25
     e52:	ea 06       	cpc	r14, r26
     e54:	fb 06       	cpc	r15, r27
     e56:	41 f0       	breq	.+16     	; 0xe68 <memoryStatistics+0x1a6>
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     e58:	2f 5f       	subi	r18, 0xFF	; 255
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	20 38       	cpi	r18, 0x80	; 128
     e5e:	31 05       	cpc	r19, r1
     e60:	c1 f6       	brne	.-80     	; 0xe12 <memoryStatistics+0x150>
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
            freeClusters++;;
        
         totalClusterCount++;
     e62:	d7 01       	movw	r26, r14
     e64:	c6 01       	movw	r24, r12
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <memoryStatistics+0x1ac>
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
     e68:	20 38       	cpi	r18, 0x80	; 128
     e6a:	31 05       	cpc	r19, r1
     e6c:	70 f0       	brcs	.+28     	; 0xe8a <memoryStatistics+0x1c8>
     e6e:	29 81       	ldd	r18, Y+1	; 0x01
     e70:	3a 81       	ldd	r19, Y+2	; 0x02
     e72:	4b 81       	ldd	r20, Y+3	; 0x03
     e74:	5c 81       	ldd	r21, Y+4	; 0x04
     e76:	3e 5f       	subi	r19, 0xFE	; 254
     e78:	4f 4f       	sbci	r20, 0xFF	; 255
     e7a:	5f 4f       	sbci	r21, 0xFF	; 255
     e7c:	29 83       	std	Y+1, r18	; 0x01
     e7e:	3a 83       	std	Y+2, r19	; 0x02
     e80:	4b 83       	std	Y+3, r20	; 0x03
     e82:	5c 83       	std	Y+4, r21	; 0x04
      cluster+=128;
    } 
     e84:	6c 01       	movw	r12, r24
     e86:	7d 01       	movw	r14, r26
     e88:	99 cf       	rjmp	.-206    	; 0xdbc <memoryStatistics+0xfa>
}

if(!freeClusterCountUpdated)
     e8a:	80 91 40 12 	lds	r24, 0x1240	; 0x801240 <freeClusterCountUpdated>
     e8e:	81 11       	cpse	r24, r1
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <memoryStatistics+0x1da>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     e92:	a5 01       	movw	r20, r10
     e94:	94 01       	movw	r18, r8
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	2e dc       	rcall	.-1956   	; 0x6f8 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 40 12 	sts	0x1240, r24	; 0x801240 <freeClusterCountUpdated>
freeMemory = freeClusters * sectorPerCluster / 1024;
     ea2:	a0 91 2e 12 	lds	r26, 0x122E	; 0x80122e <sectorPerCluster>
     ea6:	b0 91 2f 12 	lds	r27, 0x122F	; 0x80122f <sectorPerCluster+0x1>
     eaa:	a5 01       	movw	r20, r10
     eac:	94 01       	movw	r18, r8
     eae:	0e 94 9d 13 	call	0x273a	; 0x273a <__muluhisi3>
     eb2:	9b 01       	movw	r18, r22
     eb4:	ac 01       	movw	r20, r24
     eb6:	01 2e       	mov	r0, r17
     eb8:	1a e0       	ldi	r17, 0x0A	; 10
     eba:	56 95       	lsr	r21
     ebc:	47 95       	ror	r20
     ebe:	37 95       	ror	r19
     ec0:	27 95       	ror	r18
     ec2:	1a 95       	dec	r17
     ec4:	d1 f7       	brne	.-12     	; 0xeba <memoryStatistics+0x1f8>
     ec6:	10 2d       	mov	r17, r0
freeMemory *= bytesPerSector ;
     ec8:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <bytesPerSector>
     ecc:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <bytesPerSector+0x1>
     ed0:	0e 94 9d 13 	call	0x273a	; 0x273a <__muluhisi3>
     ed4:	6b 01       	movw	r12, r22
     ed6:	7c 01       	movw	r14, r24
TX_NEWLINE;
     ed8:	8d e0       	ldi	r24, 0x0D	; 13
     eda:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
     ede:	8a e0       	ldi	r24, 0x0A	; 10
     ee0:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
     ee4:	88 ef       	ldi	r24, 0xF8	; 248
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
displayMemory (HIGH, freeMemory);
     eec:	b7 01       	movw	r22, r14
     eee:	a6 01       	movw	r20, r12
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	86 de       	rcall	.-756    	; 0xc00 <displayMemory>
TX_NEWLINE; 
     ef4:	8d e0       	ldi	r24, 0x0D	; 13
     ef6:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
     efa:	8a e0       	ldi	r24, 0x0A	; 10
     efc:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	8f 90       	pop	r8
     f20:	7f 90       	pop	r7
     f22:	6f 90       	pop	r6
     f24:	5f 90       	pop	r5
     f26:	4f 90       	pop	r4
     f28:	08 95       	ret

00000f2a <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     f2a:	cf 92       	push	r12
     f2c:	df 92       	push	r13
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	cf 93       	push	r28
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     f34:	6a 01       	movw	r12, r20
     f36:	7b 01       	movw	r14, r22
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	d9 22       	and	r13, r25
     f3c:	ee 24       	eor	r14, r14
     f3e:	ff 24       	eor	r15, r15
     f40:	cd 28       	or	r12, r13
     f42:	ce 28       	or	r12, r14
     f44:	cf 28       	or	r12, r15
     f46:	51 f4       	brne	.+20     	; 0xf5c <freeMemoryUpdate+0x32>
     f48:	03 2e       	mov	r0, r19
     f4a:	39 e0       	ldi	r19, 0x09	; 9
     f4c:	76 95       	lsr	r23
     f4e:	67 95       	ror	r22
     f50:	57 95       	ror	r21
     f52:	47 95       	ror	r20
     f54:	3a 95       	dec	r19
     f56:	d1 f7       	brne	.-12     	; 0xf4c <freeMemoryUpdate+0x22>
     f58:	30 2d       	mov	r19, r0
     f5a:	0d c0       	rjmp	.+26     	; 0xf76 <freeMemoryUpdate+0x4c>
  else size = (size / 512) +1;
     f5c:	03 2e       	mov	r0, r19
     f5e:	39 e0       	ldi	r19, 0x09	; 9
     f60:	76 95       	lsr	r23
     f62:	67 95       	ror	r22
     f64:	57 95       	ror	r21
     f66:	47 95       	ror	r20
     f68:	3a 95       	dec	r19
     f6a:	d1 f7       	brne	.-12     	; 0xf60 <freeMemoryUpdate+0x36>
     f6c:	30 2d       	mov	r19, r0
     f6e:	4f 5f       	subi	r20, 0xFF	; 255
     f70:	5f 4f       	sbci	r21, 0xFF	; 255
     f72:	6f 4f       	sbci	r22, 0xFF	; 255
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
     f76:	6a 01       	movw	r12, r20
     f78:	7b 01       	movw	r14, r22
     f7a:	97 e0       	ldi	r25, 0x07	; 7
     f7c:	c9 22       	and	r12, r25
     f7e:	dd 24       	eor	r13, r13
     f80:	ee 24       	eor	r14, r14
     f82:	ff 24       	eor	r15, r15
     f84:	cd 28       	or	r12, r13
     f86:	ce 28       	or	r12, r14
     f88:	cf 28       	or	r12, r15
     f8a:	59 f4       	brne	.+22     	; 0xfa2 <freeMemoryUpdate+0x78>
     f8c:	6a 01       	movw	r12, r20
     f8e:	7b 01       	movw	r14, r22
     f90:	68 94       	set
     f92:	12 f8       	bld	r1, 2
     f94:	f6 94       	lsr	r15
     f96:	e7 94       	ror	r14
     f98:	d7 94       	ror	r13
     f9a:	c7 94       	ror	r12
     f9c:	16 94       	lsr	r1
     f9e:	d1 f7       	brne	.-12     	; 0xf94 <freeMemoryUpdate+0x6a>
     fa0:	0f c0       	rjmp	.+30     	; 0xfc0 <freeMemoryUpdate+0x96>
  else size = (size / 8) +1;
     fa2:	68 94       	set
     fa4:	12 f8       	bld	r1, 2
     fa6:	76 95       	lsr	r23
     fa8:	67 95       	ror	r22
     faa:	57 95       	ror	r21
     fac:	47 95       	ror	r20
     fae:	16 94       	lsr	r1
     fb0:	d1 f7       	brne	.-12     	; 0xfa6 <freeMemoryUpdate+0x7c>
     fb2:	6a 01       	movw	r12, r20
     fb4:	7b 01       	movw	r14, r22
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
     fb8:	c9 1a       	sub	r12, r25
     fba:	d9 0a       	sbc	r13, r25
     fbc:	e9 0a       	sbc	r14, r25
     fbe:	f9 0a       	sbc	r15, r25

  if(freeClusterCountUpdated)
     fc0:	90 91 40 12 	lds	r25, 0x1240	; 0x801240 <freeClusterCountUpdated>
     fc4:	99 23       	and	r25, r25
     fc6:	c9 f0       	breq	.+50     	; 0xffa <freeMemoryUpdate+0xd0>
     fc8:	c8 2f       	mov	r28, r24
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	91 db       	rcall	.-2270   	; 0x6f8 <getSetFreeCluster>
	if(flag == ADD)
     fd6:	c1 11       	cpse	r28, r1
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <freeMemoryUpdate+0xbe>
  	   freeClusters = freeClusters + size;
     fda:	a7 01       	movw	r20, r14
     fdc:	96 01       	movw	r18, r12
     fde:	26 0f       	add	r18, r22
     fe0:	37 1f       	adc	r19, r23
     fe2:	48 1f       	adc	r20, r24
     fe4:	59 1f       	adc	r21, r25
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <freeMemoryUpdate+0xca>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     fe8:	9b 01       	movw	r18, r22
     fea:	ac 01       	movw	r20, r24
     fec:	2c 19       	sub	r18, r12
     fee:	3d 09       	sbc	r19, r13
     ff0:	4e 09       	sbc	r20, r14
     ff2:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	7f db       	rcall	.-2306   	; 0x6f8 <getSetFreeCluster>
  }
}
     ffa:	cf 91       	pop	r28
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	08 95       	ret

00001006 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1006:	2f 92       	push	r2
    1008:	3f 92       	push	r3
    100a:	4f 92       	push	r4
    100c:	5f 92       	push	r5
    100e:	6f 92       	push	r6
    1010:	7f 92       	push	r7
    1012:	8f 92       	push	r8
    1014:	9f 92       	push	r9
    1016:	af 92       	push	r10
    1018:	bf 92       	push	r11
    101a:	cf 92       	push	r12
    101c:	df 92       	push	r13
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	2c 97       	sbiw	r28, 0x0c	; 12
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	8e 83       	std	Y+6, r24	; 0x06
    103c:	1b 01       	movw	r2, r22
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    103e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <rootCluster>
    1042:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <rootCluster+0x1>
    1046:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <rootCluster+0x2>
    104a:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <rootCluster+0x3>
    104e:	8f 83       	std	Y+7, r24	; 0x07
    1050:	98 87       	std	Y+8, r25	; 0x08
    1052:	a9 87       	std	Y+9, r26	; 0x09
    1054:	ba 87       	std	Y+10, r27	; 0x0a
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1056:	9e 81       	ldd	r25, Y+6	; 0x06
    1058:	91 50       	subi	r25, 0x01	; 1
    105a:	99 83       	std	Y+1, r25	; 0x01
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    105c:	0f 2e       	mov	r0, r31
    105e:	f1 e2       	ldi	r31, 0x21	; 33
    1060:	cf 2e       	mov	r12, r31
    1062:	f2 e0       	ldi	r31, 0x02	; 2
    1064:	df 2e       	mov	r13, r31
    1066:	f0 2d       	mov	r31, r0

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    1068:	6f 81       	ldd	r22, Y+7	; 0x07
    106a:	78 85       	ldd	r23, Y+8	; 0x08
    106c:	89 85       	ldd	r24, Y+9	; 0x09
    106e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1070:	a9 da       	rcall	.-2734   	; 0x5c4 <getFirstSector>
    1072:	4b 01       	movw	r8, r22
    1074:	5c 01       	movw	r10, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
    1076:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <sectorPerCluster>
    107a:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <sectorPerCluster+0x1>
    107e:	89 2b       	or	r24, r25
    1080:	09 f4       	brne	.+2      	; 0x1084 <findFiles+0x7e>
    1082:	73 c1       	rjmp	.+742    	; 0x136a <findFiles+0x364>
    1084:	41 2c       	mov	r4, r1
    1086:	51 2c       	mov	r5, r1
    1088:	32 01       	movw	r6, r4
   {
     SD_readSingleBlock (firstSector + sector);
    108a:	d5 01       	movw	r26, r10
    108c:	c4 01       	movw	r24, r8
    108e:	84 0d       	add	r24, r4
    1090:	95 1d       	adc	r25, r5
    1092:	a6 1d       	adc	r26, r6
    1094:	b7 1d       	adc	r27, r7
    1096:	8a 83       	std	Y+2, r24	; 0x02
    1098:	9b 83       	std	Y+3, r25	; 0x03
    109a:	ac 83       	std	Y+4, r26	; 0x04
    109c:	bd 83       	std	Y+5, r27	; 0x05
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	0e 94 99 12 	call	0x2532	; 0x2532 <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    10a6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <bytesPerSector>
    10aa:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <bytesPerSector+0x1>
    10ae:	89 2b       	or	r24, r25
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <findFiles+0xae>
    10b2:	4a c1       	rjmp	.+660    	; 0x1348 <findFiles+0x342>
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    10b4:	ae e2       	ldi	r26, 0x2E	; 46
    10b6:	b2 e0       	ldi	r27, 0x02	; 2
    10b8:	8c 91       	ld	r24, X
    10ba:	88 23       	and	r24, r24
    10bc:	51 f0       	breq	.+20     	; 0x10d2 <findFiles+0xcc>
    10be:	8d 01       	movw	r16, r26
    10c0:	e1 2c       	mov	r14, r1
    10c2:	f1 2c       	mov	r15, r1
    10c4:	12 c0       	rjmp	.+36     	; 0x10ea <findFiles+0xe4>
    10c6:	00 5e       	subi	r16, 0xE0	; 224
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ca:	f8 01       	movw	r30, r16
    10cc:	80 81       	ld	r24, Z
    10ce:	81 11       	cpse	r24, r1
    10d0:	0c c0       	rjmp	.+24     	; 0x10ea <findFiles+0xe4>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    10d2:	8e 81       	ldd	r24, Y+6	; 0x06
    10d4:	81 50       	subi	r24, 0x01	; 1
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <findFiles+0xd6>
    10da:	67 c1       	rjmp	.+718    	; 0x13aa <findFiles+0x3a4>
		      transmitString_F(PSTR("File does not exist!"));
    10dc:	80 e5       	ldi	r24, 0x50	; 80
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
		  return 0;   
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	65 c1       	rjmp	.+714    	; 0x13b4 <findFiles+0x3ae>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    10ea:	85 3e       	cpi	r24, 0xE5	; 229
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <findFiles+0xea>
    10ee:	21 c1       	rjmp	.+578    	; 0x1332 <findFiles+0x32c>
    10f0:	d8 01       	movw	r26, r16
    10f2:	1b 96       	adiw	r26, 0x0b	; 11
    10f4:	8c 91       	ld	r24, X
    10f6:	8f 30       	cpi	r24, 0x0F	; 15
    10f8:	09 f4       	brne	.+2      	; 0x10fc <findFiles+0xf6>
    10fa:	1b c1       	rjmp	.+566    	; 0x1332 <findFiles+0x32c>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    10fc:	b9 81       	ldd	r27, Y+1	; 0x01
    10fe:	b2 30       	cpi	r27, 0x02	; 2
    1100:	08 f0       	brcs	.+2      	; 0x1104 <findFiles+0xfe>
    1102:	ca c0       	rjmp	.+404    	; 0x1298 <findFiles+0x292>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    1104:	f8 01       	movw	r30, r16
    1106:	90 81       	ld	r25, Z
    1108:	d1 01       	movw	r26, r2
    110a:	8c 91       	ld	r24, X
    110c:	98 13       	cpse	r25, r24
    110e:	11 c1       	rjmp	.+546    	; 0x1332 <findFiles+0x32c>
    1110:	d8 01       	movw	r26, r16
    1112:	11 96       	adiw	r26, 0x01	; 1
    1114:	f1 01       	movw	r30, r2
    1116:	31 96       	adiw	r30, 0x01	; 1
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1118:	81 e0       	ldi	r24, 0x01	; 1
            if(dir->name[j] != fileName[j]) break;
    111a:	2d 91       	ld	r18, X+
    111c:	91 91       	ld	r25, Z+
    111e:	29 13       	cpse	r18, r25
    1120:	04 c0       	rjmp	.+8      	; 0x112a <findFiles+0x124>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1122:	8f 5f       	subi	r24, 0xFF	; 255
    1124:	8b 30       	cpi	r24, 0x0B	; 11
    1126:	c9 f7       	brne	.-14     	; 0x111a <findFiles+0x114>
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <findFiles+0x12a>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    112a:	8b 30       	cpi	r24, 0x0B	; 11
    112c:	09 f0       	breq	.+2      	; 0x1130 <findFiles+0x12a>
    112e:	01 c1       	rjmp	.+514    	; 0x1332 <findFiles+0x32c>
			{
			  if(flag == GET_FILE)
    1130:	be 81       	ldd	r27, Y+6	; 0x06
    1132:	b1 30       	cpi	r27, 0x01	; 1
    1134:	09 f0       	breq	.+2      	; 0x1138 <findFiles+0x132>
    1136:	41 c0       	rjmp	.+130    	; 0x11ba <findFiles+0x1b4>
              {
			    appendFileSector = firstSector + sector;
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	ac 81       	ldd	r26, Y+4	; 0x04
    113e:	bd 81       	ldd	r27, Y+5	; 0x05
    1140:	80 93 41 12 	sts	0x1241, r24	; 0x801241 <appendFileSector>
    1144:	90 93 42 12 	sts	0x1242, r25	; 0x801242 <appendFileSector+0x1>
    1148:	a0 93 43 12 	sts	0x1243, r26	; 0x801243 <appendFileSector+0x2>
    114c:	b0 93 44 12 	sts	0x1244, r27	; 0x801244 <appendFileSector+0x3>
				appendFileLocation = i;
    1150:	c7 01       	movw	r24, r14
    1152:	a0 e0       	ldi	r26, 0x00	; 0
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
    115a:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
    115e:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <__data_end+0x2>
    1162:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <__data_end+0x3>
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1166:	d8 01       	movw	r26, r16
    1168:	54 96       	adiw	r26, 0x14	; 20
    116a:	8d 91       	ld	r24, X+
    116c:	9c 91       	ld	r25, X
    116e:	55 97       	sbiw	r26, 0x15	; 21
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	dc 01       	movw	r26, r24
    1176:	99 27       	eor	r25, r25
    1178:	88 27       	eor	r24, r24
    117a:	f8 01       	movw	r30, r16
    117c:	42 8d       	ldd	r20, Z+26	; 0x1a
    117e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	84 2b       	or	r24, r20
    1186:	95 2b       	or	r25, r21
    1188:	a6 2b       	or	r26, r22
    118a:	b7 2b       	or	r27, r23
    118c:	80 93 3b 12 	sts	0x123B, r24	; 0x80123b <appendStartCluster>
    1190:	90 93 3c 12 	sts	0x123C, r25	; 0x80123c <appendStartCluster+0x1>
    1194:	a0 93 3d 12 	sts	0x123D, r26	; 0x80123d <appendStartCluster+0x2>
    1198:	b0 93 3e 12 	sts	0x123E, r27	; 0x80123e <appendStartCluster+0x3>
				fileSize = dir->fileSize;
    119c:	84 8d       	ldd	r24, Z+28	; 0x1c
    119e:	95 8d       	ldd	r25, Z+29	; 0x1d
    11a0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    11a2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    11a4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <fileSize>
    11a8:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <fileSize+0x1>
    11ac:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <fileSize+0x2>
    11b0:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <fileSize+0x3>
			    return (dir);
    11b4:	80 2f       	mov	r24, r16
    11b6:	91 2f       	mov	r25, r17
    11b8:	fd c0       	rjmp	.+506    	; 0x13b4 <findFiles+0x3ae>
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    11ba:	8d e0       	ldi	r24, 0x0D	; 13
    11bc:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
    11c0:	8a e0       	ldi	r24, 0x0A	; 10
    11c2:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    11c6:	85 e4       	ldi	r24, 0x45	; 69
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
				 TX_NEWLINE;
    11ce:	8d e0       	ldi	r24, 0x0D	; 13
    11d0:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
    11d4:	8a e0       	ldi	r24, 0x0A	; 10
    11d6:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
				 TX_NEWLINE;
    11da:	8d e0       	ldi	r24, 0x0D	; 13
    11dc:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
    11e0:	8a e0       	ldi	r24, 0x0A	; 10
    11e2:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    11e6:	d8 01       	movw	r26, r16
    11e8:	54 96       	adiw	r26, 0x14	; 20
    11ea:	cd 90       	ld	r12, X+
    11ec:	dc 90       	ld	r13, X
    11ee:	55 97       	sbiw	r26, 0x15	; 21
    11f0:	e1 2c       	mov	r14, r1
    11f2:	f1 2c       	mov	r15, r1
    11f4:	d6 01       	movw	r26, r12
    11f6:	99 27       	eor	r25, r25
    11f8:	88 27       	eor	r24, r24
    11fa:	f8 01       	movw	r30, r16
    11fc:	c2 8c       	ldd	r12, Z+26	; 0x1a
    11fe:	d3 8c       	ldd	r13, Z+27	; 0x1b
    1200:	e1 2c       	mov	r14, r1
    1202:	f1 2c       	mov	r15, r1
    1204:	c8 2a       	or	r12, r24
    1206:	d9 2a       	or	r13, r25
    1208:	ea 2a       	or	r14, r26
    120a:	fb 2a       	or	r15, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    120c:	85 ee       	ldi	r24, 0xE5	; 229
    120e:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    1210:	6a 81       	ldd	r22, Y+2	; 0x02
    1212:	7b 81       	ldd	r23, Y+3	; 0x03
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	0e 94 c1 12 	call	0x2582	; 0x2582 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    121c:	d8 01       	movw	r26, r16
    121e:	5c 96       	adiw	r26, 0x1c	; 28
    1220:	4d 91       	ld	r20, X+
    1222:	5d 91       	ld	r21, X+
    1224:	6d 91       	ld	r22, X+
    1226:	7c 91       	ld	r23, X
    1228:	5f 97       	sbiw	r26, 0x1f	; 31
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	7e de       	rcall	.-772    	; 0xf2a <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	a9 01       	movw	r20, r18
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	5f da       	rcall	.-2882   	; 0x6f8 <getSetFreeCluster>
				 if(firstCluster < cluster)
    123a:	c6 16       	cp	r12, r22
    123c:	d7 06       	cpc	r13, r23
    123e:	e8 06       	cpc	r14, r24
    1240:	f9 06       	cpc	r15, r25
    1242:	28 f4       	brcc	.+10     	; 0x124e <findFiles+0x248>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1244:	a7 01       	movw	r20, r14
    1246:	96 01       	movw	r18, r12
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	55 da       	rcall	.-2902   	; 0x6f8 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    124e:	00 e0       	ldi	r16, 0x00	; 0
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	98 01       	movw	r18, r16
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	c7 01       	movw	r24, r14
    1258:	b6 01       	movw	r22, r12
    125a:	d5 d9       	rcall	.-3158   	; 0x606 <getSetNextCluster>
    125c:	a6 2e       	mov	r10, r22
    125e:	b7 2e       	mov	r11, r23
    1260:	8a 83       	std	Y+2, r24	; 0x02
    1262:	99 83       	std	Y+1, r25	; 0x01
					getSetNextCluster (firstCluster, SET, 0);
    1264:	00 e0       	ldi	r16, 0x00	; 0
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	98 01       	movw	r18, r16
    126a:	41 e0       	ldi	r20, 0x01	; 1
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	ca d9       	rcall	.-3180   	; 0x606 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
    1272:	ca 2c       	mov	r12, r10
    1274:	db 2c       	mov	r13, r11
    1276:	ea 80       	ldd	r14, Y+2	; 0x02
    1278:	f9 80       	ldd	r15, Y+1	; 0x01
				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
    127a:	b7 ef       	ldi	r27, 0xF7	; 247
    127c:	cb 16       	cp	r12, r27
    127e:	bf ef       	ldi	r27, 0xFF	; 255
    1280:	db 06       	cpc	r13, r27
    1282:	eb 06       	cpc	r14, r27
    1284:	bf e0       	ldi	r27, 0x0F	; 15
    1286:	fb 06       	cpc	r15, r27
    1288:	10 f3       	brcs	.-60     	; 0x124e <findFiles+0x248>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    128a:	87 e3       	ldi	r24, 0x37	; 55
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	8e c0       	rjmp	.+284    	; 0x13b4 <findFiles+0x3ae>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    1298:	8d e0       	ldi	r24, 0x0D	; 13
    129a:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
    129e:	8a e0       	ldi	r24, 0x0A	; 10
    12a0:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
    12a4:	e1 e0       	ldi	r30, 0x01	; 1
    12a6:	1b 86       	std	Y+11, r1	; 0x0b
    12a8:	ec 87       	std	Y+12, r30	; 0x0c
    12aa:	06 c0       	rjmp	.+12     	; 0x12b8 <findFiles+0x2b2>
    12ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    12ae:	2f 5f       	subi	r18, 0xFF	; 255
    12b0:	2b 87       	std	Y+11, r18	; 0x0b
    12b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    12b4:	3f 5f       	subi	r19, 0xFF	; 255
    12b6:	3c 87       	std	Y+12, r19	; 0x0c
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    12b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ba:	88 30       	cpi	r24, 0x08	; 8
    12bc:	59 f4       	brne	.+22     	; 0x12d4 <findFiles+0x2ce>
    12be:	80 e2       	ldi	r24, 0x20	; 32
    12c0:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
			   transmitByte (dir->name[j]);
    12c4:	f8 01       	movw	r30, r16
    12c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c8:	e9 0f       	add	r30, r25
    12ca:	f1 1d       	adc	r31, r1
    12cc:	80 81       	ld	r24, Z
    12ce:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
    12d2:	ec cf       	rjmp	.-40     	; 0x12ac <findFiles+0x2a6>
    12d4:	f8 01       	movw	r30, r16
    12d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    12d8:	ea 0f       	add	r30, r26
    12da:	f1 1d       	adc	r31, r1
    12dc:	80 81       	ld	r24, Z
    12de:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    12e2:	bc 85       	ldd	r27, Y+12	; 0x0c
    12e4:	bb 30       	cpi	r27, 0x0B	; 11
    12e6:	10 f3       	brcs	.-60     	; 0x12ac <findFiles+0x2a6>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    12e8:	83 e3       	ldi	r24, 0x33	; 51
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    12f0:	f8 01       	movw	r30, r16
    12f2:	83 85       	ldd	r24, Z+11	; 0x0b
    12f4:	80 31       	cpi	r24, 0x10	; 16
    12f6:	a1 f0       	breq	.+40     	; 0x1320 <findFiles+0x31a>
    12f8:	88 30       	cpi	r24, 0x08	; 8
    12fa:	b9 f0       	breq	.+46     	; 0x132a <findFiles+0x324>
			 {
			     transmitString_F (PSTR("FILE" ));
    12fc:	8e e2       	ldi	r24, 0x2E	; 46
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
		         transmitString_F (PSTR("   "));
    1304:	8a e2       	ldi	r24, 0x2A	; 42
    1306:	92 e0       	ldi	r25, 0x02	; 2
    1308:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    130c:	d8 01       	movw	r26, r16
    130e:	5c 96       	adiw	r26, 0x1c	; 28
    1310:	4d 91       	ld	r20, X+
    1312:	5d 91       	ld	r21, X+
    1314:	6d 91       	ld	r22, X+
    1316:	7c 91       	ld	r23, X
    1318:	5f 97       	sbiw	r26, 0x1f	; 31
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	71 dc       	rcall	.-1822   	; 0xc00 <displayMemory>
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <findFiles+0x32c>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1320:	e6 e2       	ldi	r30, 0x26	; 38
    1322:	f2 e0       	ldi	r31, 0x02	; 2
    1324:	8e 2f       	mov	r24, r30
    1326:	9f 2f       	mov	r25, r31
    1328:	02 c0       	rjmp	.+4      	; 0x132e <findFiles+0x328>
    132a:	8c 2d       	mov	r24, r12
    132c:	9d 2d       	mov	r25, r13
    132e:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1332:	f0 e2       	ldi	r31, 0x20	; 32
    1334:	ef 0e       	add	r14, r31
    1336:	f1 1c       	adc	r15, r1
    1338:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <bytesPerSector>
    133c:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <bytesPerSector+0x1>
    1340:	e8 16       	cp	r14, r24
    1342:	f9 06       	cpc	r15, r25
    1344:	08 f4       	brcc	.+2      	; 0x1348 <findFiles+0x342>
    1346:	bf ce       	rjmp	.-642    	; 0x10c6 <findFiles+0xc0>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	42 1a       	sub	r4, r18
    134c:	52 0a       	sbc	r5, r18
    134e:	62 0a       	sbc	r6, r18
    1350:	72 0a       	sbc	r7, r18
    1352:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <sectorPerCluster>
    1356:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <sectorPerCluster+0x1>
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	48 16       	cp	r4, r24
    1360:	59 06       	cpc	r5, r25
    1362:	6a 06       	cpc	r6, r26
    1364:	7b 06       	cpc	r7, r27
    1366:	08 f4       	brcc	.+2      	; 0x136a <findFiles+0x364>
    1368:	90 ce       	rjmp	.-736    	; 0x108a <findFiles+0x84>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    136a:	00 e0       	ldi	r16, 0x00	; 0
    136c:	10 e0       	ldi	r17, 0x00	; 0
    136e:	98 01       	movw	r18, r16
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	45 d9       	rcall	.-3446   	; 0x606 <getSetNextCluster>
    137c:	6f 83       	std	Y+7, r22	; 0x07
    137e:	78 87       	std	Y+8, r23	; 0x08
    1380:	89 87       	std	Y+9, r24	; 0x09
    1382:	9a 87       	std	Y+10, r25	; 0x0a

   if(cluster > 0x0ffffff6)
    1384:	67 3f       	cpi	r22, 0xF7	; 247
    1386:	3f ef       	ldi	r19, 0xFF	; 255
    1388:	73 07       	cpc	r23, r19
    138a:	83 07       	cpc	r24, r19
    138c:	3f e0       	ldi	r19, 0x0F	; 15
    138e:	93 07       	cpc	r25, r19
    1390:	78 f4       	brcc	.+30     	; 0x13b0 <findFiles+0x3aa>
   	 return 0;
   if(cluster == 0) 
    1392:	67 2b       	or	r22, r23
    1394:	68 2b       	or	r22, r24
    1396:	69 2b       	or	r22, r25
    1398:	09 f0       	breq	.+2      	; 0x139c <findFiles+0x396>
    139a:	66 ce       	rjmp	.-820    	; 0x1068 <findFiles+0x62>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    139c:	88 e0       	ldi	r24, 0x08	; 8
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <findFiles+0x3ae>

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <findFiles+0x3ae>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    13b4:	2c 96       	adiw	r28, 0x0c	; 12
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	bf 90       	pop	r11
    13d2:	af 90       	pop	r10
    13d4:	9f 90       	pop	r9
    13d6:	8f 90       	pop	r8
    13d8:	7f 90       	pop	r7
    13da:	6f 90       	pop	r6
    13dc:	5f 90       	pop	r5
    13de:	4f 90       	pop	r4
    13e0:	3f 90       	pop	r3
    13e2:	2f 90       	pop	r2
    13e4:	08 95       	ret

000013e6 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    13e6:	4f 92       	push	r4
    13e8:	5f 92       	push	r5
    13ea:	6f 92       	push	r6
    13ec:	7f 92       	push	r7
    13ee:	8f 92       	push	r8
    13f0:	9f 92       	push	r9
    13f2:	af 92       	push	r10
    13f4:	bf 92       	push	r11
    13f6:	cf 92       	push	r12
    13f8:	df 92       	push	r13
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	00 d0       	rcall	.+0      	; 0x1408 <readFile+0x22>
    1408:	00 d0       	rcall	.+0      	; 0x140a <readFile+0x24>
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	18 2f       	mov	r17, r24
    1410:	7a 83       	std	Y+2, r23	; 0x02
    1412:	69 83       	std	Y+1, r22	; 0x01
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    1414:	cb 01       	movw	r24, r22
    1416:	c2 da       	rcall	.-2684   	; 0x99c <convertFileName>
if(error) return 2;
    1418:	81 11       	cpse	r24, r1
    141a:	92 c0       	rjmp	.+292    	; 0x1540 <readFile+0x15a>

dir = findFiles (GET_FILE, fileName); //get the file location
    141c:	69 81       	ldd	r22, Y+1	; 0x01
    141e:	7a 81       	ldd	r23, Y+2	; 0x02
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	f1 dd       	rcall	.-1054   	; 0x1006 <findFiles>
if(dir == 0) 
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	09 f4       	brne	.+2      	; 0x142a <readFile+0x44>
    1428:	8d c0       	rjmp	.+282    	; 0x1544 <readFile+0x15e>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    142a:	11 30       	cpi	r17, 0x01	; 1
    142c:	09 f4       	brne	.+2      	; 0x1430 <readFile+0x4a>
    142e:	8c c0       	rjmp	.+280    	; 0x1548 <readFile+0x162>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1430:	dc 01       	movw	r26, r24
    1432:	54 96       	adiw	r26, 0x14	; 20
    1434:	4d 91       	ld	r20, X+
    1436:	5c 91       	ld	r21, X
    1438:	55 97       	sbiw	r26, 0x15	; 21
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	ba 01       	movw	r22, r20
    1440:	55 27       	eor	r21, r21
    1442:	44 27       	eor	r20, r20
    1444:	5a 96       	adiw	r26, 0x1a	; 26
    1446:	cd 90       	ld	r12, X+
    1448:	dc 90       	ld	r13, X
    144a:	5b 97       	sbiw	r26, 0x1b	; 27
    144c:	e1 2c       	mov	r14, r1
    144e:	f1 2c       	mov	r15, r1
    1450:	8a 01       	movw	r16, r20
    1452:	9b 01       	movw	r18, r22
    1454:	0c 29       	or	r16, r12
    1456:	1d 29       	or	r17, r13
    1458:	2e 29       	or	r18, r14
    145a:	3f 29       	or	r19, r15
    145c:	09 83       	std	Y+1, r16	; 0x01
    145e:	1a 83       	std	Y+2, r17	; 0x02
    1460:	2b 83       	std	Y+3, r18	; 0x03
    1462:	3c 83       	std	Y+4, r19	; 0x04

fileSize = dir->fileSize;
    1464:	5c 96       	adiw	r26, 0x1c	; 28
    1466:	8d 90       	ld	r8, X+
    1468:	9d 90       	ld	r9, X+
    146a:	ad 90       	ld	r10, X+
    146c:	bc 90       	ld	r11, X
    146e:	5f 97       	sbiw	r26, 0x1f	; 31

TX_NEWLINE;
    1470:	8d e0       	ldi	r24, 0x0D	; 13
    1472:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
    1476:	8a e0       	ldi	r24, 0x0A	; 10
    1478:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
TX_NEWLINE;
    147c:	8d e0       	ldi	r24, 0x0D	; 13
    147e:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
    1482:	8a e0       	ldi	r24, 0x0A	; 10
    1484:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    1488:	c1 2c       	mov	r12, r1
    148a:	d1 2c       	mov	r13, r1
    148c:	76 01       	movw	r14, r12
TX_NEWLINE;
TX_NEWLINE;

while(1)
{
  firstSector = getFirstSector (cluster);
    148e:	69 81       	ldd	r22, Y+1	; 0x01
    1490:	7a 81       	ldd	r23, Y+2	; 0x02
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	96 d8       	rcall	.-3796   	; 0x5c4 <getFirstSector>
    1498:	2b 01       	movw	r4, r22
    149a:	3c 01       	movw	r6, r24

  for(j=0; j<sectorPerCluster; j++)
    149c:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <sectorPerCluster>
    14a0:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <sectorPerCluster+0x1>
    14a4:	89 2b       	or	r24, r25
    14a6:	a1 f1       	breq	.+104    	; 0x1510 <readFile+0x12a>
    14a8:	10 e0       	ldi	r17, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <readFile+0xca>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    14ac:	6c 01       	movw	r12, r24
    14ae:	7d 01       	movw	r14, r26
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    14b0:	c3 01       	movw	r24, r6
    14b2:	b2 01       	movw	r22, r4
    14b4:	61 0f       	add	r22, r17
    14b6:	71 1d       	adc	r23, r1
    14b8:	81 1d       	adc	r24, r1
    14ba:	91 1d       	adc	r25, r1
    14bc:	0e 94 99 12 	call	0x2532	; 0x2532 <SD_readSingleBlock>
    
	for(k=0; k<512; k++)
    14c0:	1e 82       	std	Y+6, r1	; 0x06
    14c2:	1d 82       	std	Y+5, r1	; 0x05
    {
      transmitByte(buffer[k]);
    14c4:	ed 81       	ldd	r30, Y+5	; 0x05
    14c6:	fe 81       	ldd	r31, Y+6	; 0x06
    14c8:	e2 5d       	subi	r30, 0xD2	; 210
    14ca:	fd 4f       	sbci	r31, 0xFD	; 253
    14cc:	80 81       	ld	r24, Z
    14ce:	0e 94 2d 13 	call	0x265a	; 0x265a <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    14d2:	d7 01       	movw	r26, r14
    14d4:	c6 01       	movw	r24, r12
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	a1 1d       	adc	r26, r1
    14da:	b1 1d       	adc	r27, r1
    14dc:	c8 14       	cp	r12, r8
    14de:	d9 04       	cpc	r13, r9
    14e0:	ea 04       	cpc	r14, r10
    14e2:	fb 04       	cpc	r15, r11
    14e4:	98 f5       	brcc	.+102    	; 0x154c <readFile+0x166>

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    14e6:	2d 81       	ldd	r18, Y+5	; 0x05
    14e8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ea:	2f 5f       	subi	r18, 0xFF	; 255
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	3e 83       	std	Y+6, r19	; 0x06
    14f0:	2d 83       	std	Y+5, r18	; 0x05
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    14f2:	6c 01       	movw	r12, r24
    14f4:	7d 01       	movw	r14, r26

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    14f6:	21 15       	cp	r18, r1
    14f8:	32 40       	sbci	r19, 0x02	; 2
    14fa:	21 f7       	brne	.-56     	; 0x14c4 <readFile+0xde>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    14fc:	1f 5f       	subi	r17, 0xFF	; 255
    14fe:	20 91 2e 12 	lds	r18, 0x122E	; 0x80122e <sectorPerCluster>
    1502:	30 91 2f 12 	lds	r19, 0x122F	; 0x80122f <sectorPerCluster+0x1>
    1506:	41 2f       	mov	r20, r17
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	42 17       	cp	r20, r18
    150c:	53 07       	cpc	r21, r19
    150e:	70 f2       	brcs	.-100    	; 0x14ac <readFile+0xc6>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    1510:	00 e0       	ldi	r16, 0x00	; 0
    1512:	10 e0       	ldi	r17, 0x00	; 0
    1514:	98 01       	movw	r18, r16
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	69 81       	ldd	r22, Y+1	; 0x01
    151a:	7a 81       	ldd	r23, Y+2	; 0x02
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	72 d8       	rcall	.-3868   	; 0x606 <getSetNextCluster>
    1522:	69 83       	std	Y+1, r22	; 0x01
    1524:	7a 83       	std	Y+2, r23	; 0x02
    1526:	8b 83       	std	Y+3, r24	; 0x03
    1528:	9c 83       	std	Y+4, r25	; 0x04
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    152a:	67 2b       	or	r22, r23
    152c:	68 2b       	or	r22, r24
    152e:	69 2b       	or	r22, r25
    1530:	09 f0       	breq	.+2      	; 0x1534 <readFile+0x14e>
    1532:	ad cf       	rjmp	.-166    	; 0x148e <readFile+0xa8>
    1534:	8f ee       	ldi	r24, 0xEF	; 239
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	07 c0       	rjmp	.+14     	; 0x154e <readFile+0x168>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	05 c0       	rjmp	.+10     	; 0x154e <readFile+0x168>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0) 
  return (0);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	03 c0       	rjmp	.+6      	; 0x154e <readFile+0x168>

if(flag == VERIFY) return (1);	//specified file name is already existing
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	01 c0       	rjmp	.+2      	; 0x154e <readFile+0x168>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    154c:	80 e0       	ldi	r24, 0x00	; 0
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    154e:	26 96       	adiw	r28, 0x06	; 6
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	bf 90       	pop	r11
    156c:	af 90       	pop	r10
    156e:	9f 90       	pop	r9
    1570:	8f 90       	pop	r8
    1572:	7f 90       	pop	r7
    1574:	6f 90       	pop	r6
    1576:	5f 90       	pop	r5
    1578:	4f 90       	pop	r4
    157a:	08 95       	ret

0000157c <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1582:	0c da       	rcall	.-3048   	; 0x99c <convertFileName>
  if(error) return;
    1584:	81 11       	cpse	r24, r1
    1586:	03 c0       	rjmp	.+6      	; 0x158e <deleteFile+0x12>

  findFiles (DELETE, fileName);
    1588:	be 01       	movw	r22, r28
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	3c dd       	rcall	.-1416   	; 0x1006 <findFiles>
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	08 95       	ret

00001594 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    1594:	2f 92       	push	r2
    1596:	3f 92       	push	r3
    1598:	4f 92       	push	r4
    159a:	5f 92       	push	r5
    159c:	6f 92       	push	r6
    159e:	7f 92       	push	r7
    15a0:	8f 92       	push	r8
    15a2:	9f 92       	push	r9
    15a4:	af 92       	push	r10
    15a6:	bf 92       	push	r11
    15a8:	cf 92       	push	r12
    15aa:	df 92       	push	r13
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	62 97       	sbiw	r28, 0x12	; 18
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    15cc:	bc 01       	movw	r22, r24
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	0a df       	rcall	.-492    	; 0x13e6 <readFile>

if(j == 1) 
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <writeFile+0x44>
    15d6:	52 c0       	rjmp	.+164    	; 0x167c <writeFile+0xe8>
{
  transmitString_F(PSTR("  File already existing, appending data..")); 
    15d8:	82 eb       	ldi	r24, 0xB2	; 178
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	0e 94 35 13 	call	0x266a	; 0x266a <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    15e0:	80 90 3b 12 	lds	r8, 0x123B	; 0x80123b <appendStartCluster>
    15e4:	90 90 3c 12 	lds	r9, 0x123C	; 0x80123c <appendStartCluster+0x1>
    15e8:	a0 90 3d 12 	lds	r10, 0x123D	; 0x80123d <appendStartCluster+0x2>
    15ec:	b0 90 3e 12 	lds	r11, 0x123E	; 0x80123e <appendStartCluster+0x3>
  clusterCount=0;
    15f0:	c1 2c       	mov	r12, r1
    15f2:	d1 2c       	mov	r13, r1
    15f4:	76 01       	movw	r14, r12
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    15f6:	00 e0       	ldi	r16, 0x00	; 0
    15f8:	10 e0       	ldi	r17, 0x00	; 0
    15fa:	98 01       	movw	r18, r16
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	c5 01       	movw	r24, r10
    1600:	b4 01       	movw	r22, r8
    1602:	01 d8       	rcall	.-4094   	; 0x606 <getSetNextCluster>
    if(nextCluster == EOF) break;
    1604:	6f 3f       	cpi	r22, 0xFF	; 255
    1606:	2f ef       	ldi	r18, 0xFF	; 255
    1608:	72 07       	cpc	r23, r18
    160a:	82 07       	cpc	r24, r18
    160c:	2f e0       	ldi	r18, 0x0F	; 15
    160e:	92 07       	cpc	r25, r18
    1610:	41 f0       	breq	.+16     	; 0x1622 <writeFile+0x8e>
	cluster = nextCluster;
	clusterCount++;
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	c3 1a       	sub	r12, r19
    1616:	d3 0a       	sbc	r13, r19
    1618:	e3 0a       	sbc	r14, r19
    161a:	f3 0a       	sbc	r15, r19
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    161c:	4b 01       	movw	r8, r22
    161e:	5c 01       	movw	r10, r24
	clusterCount++;
  }
    1620:	ea cf       	rjmp	.-44     	; 0x15f6 <writeFile+0x62>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    1622:	20 91 2e 12 	lds	r18, 0x122E	; 0x80122e <sectorPerCluster>
    1626:	30 91 2f 12 	lds	r19, 0x122F	; 0x80122f <sectorPerCluster+0x1>
    162a:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <bytesPerSector>
    162e:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <bytesPerSector+0x1>
    1632:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <bytesPerSector>
    1636:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <bytesPerSector+0x1>
    163a:	0e 94 8e 13 	call	0x271c	; 0x271c <__umulhisi3>
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	c7 01       	movw	r24, r14
    1644:	b6 01       	movw	r22, r12
    1646:	0e 94 55 13 	call	0x26aa	; 0x26aa <__mulsi3>
    164a:	00 91 1c 02 	lds	r16, 0x021C	; 0x80021c <fileSize>
    164e:	10 91 1d 02 	lds	r17, 0x021D	; 0x80021d <fileSize+0x1>
    1652:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <fileSize+0x2>
    1656:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <fileSize+0x3>
    165a:	68 01       	movw	r12, r16
    165c:	79 01       	movw	r14, r18
    165e:	c6 1a       	sub	r12, r22
    1660:	d7 0a       	sbc	r13, r23
    1662:	e8 0a       	sbc	r14, r24
    1664:	f9 0a       	sbc	r15, r25
    1666:	c7 01       	movw	r24, r14
    1668:	b6 01       	movw	r22, r12
    166a:	9f 01       	movw	r18, r30
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__udivmodsi4>
    1674:	22 2e       	mov	r2, r18
  start = 1;
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	2f 83       	std	Y+7, r18	; 0x07
    167a:	49 c0       	rjmp	.+146    	; 0x170e <writeFile+0x17a>
//  appendFile();
//  return;
}
else if(j == 2) 
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	09 f4       	brne	.+2      	; 0x1682 <writeFile+0xee>
   return; //invalid file name
else
{
  TX_NEWLINE;
    1680:	50 c3       	rjmp	.+1696   	; 0x1d22 <writeFile+0x78e>
    1682:	8d e0       	ldi	r24, 0x0D	; 13
    1684:	ea d7       	rcall	.+4052   	; 0x265a <transmitByte>
    1686:	8a e0       	ldi	r24, 0x0A	; 10
  transmitString_F(PSTR(" Creating File.."));
    1688:	e8 d7       	rcall	.+4048   	; 0x265a <transmitByte>
    168a:	81 ea       	ldi	r24, 0xA1	; 161
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	ed d7       	rcall	.+4058   	; 0x266a <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	a9 01       	movw	r20, r18
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	2e d8       	rcall	.-4004   	; 0x6f8 <getSetFreeCluster>
  if(cluster > totalClusters)
    169c:	00 91 22 02 	lds	r16, 0x0222	; 0x800222 <totalClusters>
    16a0:	10 91 23 02 	lds	r17, 0x0223	; 0x800223 <totalClusters+0x1>
    16a4:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <totalClusters+0x2>
    16a8:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <totalClusters+0x3>
    16ac:	06 17       	cp	r16, r22
    16ae:	17 07       	cpc	r17, r23
    16b0:	28 07       	cpc	r18, r24
    16b2:	39 07       	cpc	r19, r25
    16b4:	40 f4       	brcc	.+16     	; 0x16c6 <writeFile+0x132>
     cluster = rootCluster;
    16b6:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <rootCluster>
    16ba:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <rootCluster+0x1>
    16be:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <rootCluster+0x2>
    16c2:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <rootCluster+0x3>

  cluster = searchNextFreeCluster(cluster);
    16c6:	fa d9       	rcall	.-3084   	; 0xabc <searchNextFreeCluster>
    16c8:	4b 01       	movw	r8, r22
   if(cluster == 0)
    16ca:	5c 01       	movw	r10, r24
    16cc:	61 15       	cp	r22, r1
    16ce:	71 05       	cpc	r23, r1
    16d0:	81 05       	cpc	r24, r1
   {
      TX_NEWLINE;
    16d2:	91 05       	cpc	r25, r1
    16d4:	41 f4       	brne	.+16     	; 0x16e6 <writeFile+0x152>
    16d6:	8d e0       	ldi	r24, 0x0D	; 13
    16d8:	c0 d7       	rcall	.+3968   	; 0x265a <transmitByte>
    16da:	8a e0       	ldi	r24, 0x0A	; 10
    16dc:	be d7       	rcall	.+3964   	; 0x265a <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    16de:	8f e8       	ldi	r24, 0x8F	; 143
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	c3 d7       	rcall	.+3974   	; 0x266a <transmitString_F>
    16e4:	1e c3       	rjmp	.+1596   	; 0x1d22 <writeFile+0x78e>
	  return;
    16e6:	0f ef       	ldi	r16, 0xFF	; 255
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    16e8:	1f ef       	ldi	r17, 0xFF	; 255
    16ea:	2f ef       	ldi	r18, 0xFF	; 255
    16ec:	3f e0       	ldi	r19, 0x0F	; 15
    16ee:	41 e0       	ldi	r20, 0x01	; 1
    16f0:	0e 94 03 03 	call	0x606	; 0x606 <getSetNextCluster>
    16f4:	bc 86       	std	Y+12, r11	; 0x0c
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    16f6:	ab 86       	std	Y+11, r10	; 0x0b
    16f8:	98 8a       	std	Y+16, r9	; 0x10
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    16fa:	8f 86       	std	Y+15, r8	; 0x0f
    16fc:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <fileSize>
  fileSize = 0;
    1700:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <fileSize+0x1>
    1704:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <fileSize+0x2>
    1708:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <fileSize+0x3>
    170c:	1f 82       	std	Y+7, r1	; 0x07
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
    170e:	8f 81       	ldd	r24, Y+7	; 0x07
    1710:	f1 2c       	mov	r15, r1
    1712:	22 2d       	mov	r18, r2
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	29 83       	std	Y+1, r18	; 0x01
    171c:	3a 83       	std	Y+2, r19	; 0x02
    171e:	4b 83       	std	Y+3, r20	; 0x03
    1720:	5c 83       	std	Y+4, r21	; 0x04
    1722:	31 2c       	mov	r3, r1
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		fileSize++;
	 }

	sectorEndFlag = 0;
    1724:	dd 24       	eor	r13, r13
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    1726:	d3 94       	inc	r13
    1728:	e3 2c       	mov	r14, r3
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    172a:	cd 2c       	mov	r12, r13
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    172c:	88 23       	and	r24, r24



while(1)
{
   if(start)
    172e:	81 f1       	breq	.+96     	; 0x1790 <writeFile+0x1fc>
    1730:	c5 01       	movw	r24, r10
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    1732:	b4 01       	movw	r22, r8
    1734:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <getFirstSector>
    1738:	29 81       	ldd	r18, Y+1	; 0x01
    173a:	3a 81       	ldd	r19, Y+2	; 0x02
    173c:	4b 81       	ldd	r20, Y+3	; 0x03
    173e:	5c 81       	ldd	r21, Y+4	; 0x04
    1740:	26 0f       	add	r18, r22
    1742:	37 1f       	adc	r19, r23
    1744:	48 1f       	adc	r20, r24
    1746:	59 1f       	adc	r21, r25
    1748:	20 93 2a 02 	sts	0x022A, r18	; 0x80022a <startBlock>
    174c:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <startBlock+0x1>
    1750:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <startBlock+0x2>
    1754:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <startBlock+0x3>
    1758:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <startBlock>
	  SD_readSingleBlock (startBlock);
    175c:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <startBlock+0x1>
    1760:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <startBlock+0x2>
    1764:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <startBlock+0x3>
    1768:	e4 d6       	rcall	.+3528   	; 0x2532 <SD_readSingleBlock>
    176a:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <bytesPerSector>
	  i = fileSize % bytesPerSector;
    176e:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <bytesPerSector+0x1>
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <fileSize>
    177a:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <fileSize+0x1>
    177e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <fileSize+0x2>
    1782:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <fileSize+0x3>
    1786:	a0 d7       	rcall	.+3904   	; 0x26c8 <__udivmodsi4>
    1788:	7a 8b       	std	Y+18, r23	; 0x12
    178a:	69 8b       	std	Y+17, r22	; 0x11
    178c:	02 2d       	mov	r16, r2
	  j = sector;
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <writeFile+0x21a>
    1790:	c5 01       	movw	r24, r10
   }
   else
   {
      startBlock = getFirstSector (cluster);
    1792:	b4 01       	movw	r22, r8
    1794:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <getFirstSector>
    1798:	60 93 2a 02 	sts	0x022A, r22	; 0x80022a <startBlock>
    179c:	70 93 2b 02 	sts	0x022B, r23	; 0x80022b <startBlock+0x1>
    17a0:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <startBlock+0x2>
	  i=0;
    17a4:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <startBlock+0x3>
	  j=0;
   }
   

   TX_NEWLINE;
    17a8:	1a 8a       	std	Y+18, r1	; 0x12
    17aa:	19 8a       	std	Y+17, r1	; 0x11
    17ac:	00 e0       	ldi	r16, 0x00	; 0
    17ae:	8d e0       	ldi	r24, 0x0D	; 13
    17b0:	54 d7       	rcall	.+3752   	; 0x265a <transmitByte>
    17b2:	8a e0       	ldi	r24, 0x0A	; 10
   transmitString_F(PSTR(" Enter text (end with ~):"));
    17b4:	52 d7       	rcall	.+3748   	; 0x265a <transmitByte>
    17b6:	85 e7       	ldi	r24, 0x75	; 117
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	57 d7       	rcall	.+3758   	; 0x266a <transmitString_F>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    17bc:	51 e0       	ldi	r21, 0x01	; 1
    17be:	f5 12       	cpse	r15, r21
    17c0:	20 c0       	rjmp	.+64     	; 0x1802 <writeFile+0x26e>
	 {
	 	transmitByte ('\n');
    17c2:	8a e0       	ldi	r24, 0x0A	; 10
    17c4:	4a d7       	rcall	.+3732   	; 0x265a <transmitByte>
    17c6:	e9 89       	ldd	r30, Y+17	; 0x11
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    17c8:	fa 89       	ldd	r31, Y+18	; 0x12
    17ca:	e2 5d       	subi	r30, 0xD2	; 210
    17cc:	fd 4f       	sbci	r31, 0xFD	; 253
    17ce:	8a e0       	ldi	r24, 0x0A	; 10
    17d0:	80 83       	st	Z, r24
    17d2:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <fileSize>
		fileSize++;
    17d6:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <fileSize+0x1>
    17da:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <fileSize+0x2>
    17de:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <fileSize+0x3>
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	a1 1d       	adc	r26, r1
    17e6:	b1 1d       	adc	r27, r1
    17e8:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <fileSize>
    17ec:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <fileSize+0x1>
    17f0:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <fileSize+0x2>
    17f4:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <fileSize+0x3>
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
	 {
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    17f8:	89 89       	ldd	r24, Y+17	; 0x11
    17fa:	9a 89       	ldd	r25, Y+18	; 0x12
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	9a 8b       	std	Y+18, r25	; 0x12
    1800:	89 8b       	std	Y+17, r24	; 0x11
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    1802:	21 d7       	rcall	.+3650   	; 0x2646 <receiveByte>
    1804:	18 2f       	mov	r17, r24
    1806:	88 30       	cpi	r24, 0x08	; 8
	 if(data == 0x08)	//'Back Space' key pressed
    1808:	21 f5       	brne	.+72     	; 0x1852 <writeFile+0x2be>
    180a:	a9 89       	ldd	r26, Y+17	; 0x11
	 { 
	   if(i != 0)
    180c:	ba 89       	ldd	r27, Y+18	; 0x12
    180e:	ab 2b       	or	r26, r27
    1810:	09 f4       	brne	.+2      	; 0x1814 <writeFile+0x280>
    1812:	6d c2       	rjmp	.+1242   	; 0x1cee <writeFile+0x75a>
    1814:	88 e0       	ldi	r24, 0x08	; 8
	   { 
	     transmitByte(data);
    1816:	21 d7       	rcall	.+3650   	; 0x265a <transmitByte>
    1818:	80 e2       	ldi	r24, 0x20	; 32
		 transmitByte(' '); 
    181a:	1f d7       	rcall	.+3646   	; 0x265a <transmitByte>
    181c:	88 e0       	ldi	r24, 0x08	; 8
    181e:	1d d7       	rcall	.+3642   	; 0x265a <transmitByte>
	     transmitByte(data); 
    1820:	e9 89       	ldd	r30, Y+17	; 0x11
    1822:	fa 89       	ldd	r31, Y+18	; 0x12
    1824:	31 97       	sbiw	r30, 0x01	; 1
	     i--; 
    1826:	fa 8b       	std	Y+18, r31	; 0x12
    1828:	e9 8b       	std	Y+17, r30	; 0x11
    182a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <fileSize>
    182e:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <fileSize+0x1>
		 fileSize--;
    1832:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <fileSize+0x2>
    1836:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <fileSize+0x3>
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	a1 09       	sbc	r26, r1
    183e:	b1 09       	sbc	r27, r1
    1840:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <fileSize>
    1844:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <fileSize+0x1>
    1848:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <fileSize+0x2>
    184c:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <fileSize+0x3>
    1850:	4e c2       	rjmp	.+1180   	; 0x1cee <writeFile+0x75a>
    1852:	03 d7       	rcall	.+3590   	; 0x265a <transmitByte>
    1854:	69 88       	ldd	r6, Y+17	; 0x11
	   } 
	   continue;     
	 }
	 transmitByte(data);
    1856:	7a 88       	ldd	r7, Y+18	; 0x12
    1858:	ff ef       	ldi	r31, 0xFF	; 255
     buffer[i++] = data;
    185a:	6f 1a       	sub	r6, r31
    185c:	7f 0a       	sbc	r7, r31
    185e:	e9 89       	ldd	r30, Y+17	; 0x11
    1860:	fa 89       	ldd	r31, Y+18	; 0x12
    1862:	e2 5d       	subi	r30, 0xD2	; 210
    1864:	fd 4f       	sbci	r31, 0xFD	; 253
    1866:	10 83       	st	Z, r17
    1868:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <fileSize>
    186c:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <fileSize+0x1>
	 fileSize++;
    1870:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <fileSize+0x2>
    1874:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <fileSize+0x3>
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	a1 1d       	adc	r26, r1
    187c:	b1 1d       	adc	r27, r1
    187e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <fileSize>
    1882:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <fileSize+0x1>
    1886:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <fileSize+0x2>
    188a:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <fileSize+0x3>
    188e:	1d 30       	cpi	r17, 0x0D	; 13
    1890:	49 f5       	brne	.+82     	; 0x18e4 <writeFile+0x350>
    1892:	61 14       	cp	r6, r1
     if(data == '\r')  //'Carriege Return (CR)' character
    1894:	22 e0       	ldi	r18, 0x02	; 2
     {
        if(i == 512)
    1896:	72 06       	cpc	r7, r18
    1898:	59 f1       	breq	.+86     	; 0x18f0 <writeFile+0x35c>
    189a:	8a e0       	ldi	r24, 0x0A	; 10
    189c:	de d6       	rcall	.+3516   	; 0x265a <transmitByte>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    189e:	49 89       	ldd	r20, Y+17	; 0x11
    18a0:	5a 89       	ldd	r21, Y+18	; 0x12
    18a2:	4e 5f       	subi	r20, 0xFE	; 254
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255
    18a6:	5a 8b       	std	Y+18, r21	; 0x12
    18a8:	49 8b       	std	Y+17, r20	; 0x11
    18aa:	f3 01       	movw	r30, r6
    18ac:	e2 5d       	subi	r30, 0xD2	; 210
    18ae:	fd 4f       	sbci	r31, 0xFD	; 253
    18b0:	8a e0       	ldi	r24, 0x0A	; 10
    18b2:	80 83       	st	Z, r24
    18b4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <fileSize>
    18b8:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <fileSize+0x1>
		   fileSize++;
    18bc:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <fileSize+0x2>
    18c0:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <fileSize+0x3>
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	a1 1d       	adc	r26, r1
    18c8:	b1 1d       	adc	r27, r1
    18ca:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <fileSize>
    18ce:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <fileSize+0x1>
    18d2:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <fileSize+0x2>
    18d6:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <fileSize+0x3>
    18da:	41 15       	cp	r20, r1
    18dc:	52 40       	sbci	r21, 0x02	; 2
    18de:	50 f4       	brcc	.+20     	; 0x18f4 <writeFile+0x360>
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    18e0:	fe 2c       	mov	r15, r14
    18e2:	6c cf       	rjmp	.-296    	; 0x17bc <writeFile+0x228>
    18e4:	61 14       	cp	r6, r1
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		fileSize++;
	 }

	sectorEndFlag = 0;
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	79 06       	cpc	r7, r25
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    18ea:	70 f1       	brcs	.+92     	; 0x1948 <writeFile+0x3b4>
    18ec:	fe 2c       	mov	r15, r14
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <writeFile+0x362>
    18f0:	fc 2c       	mov	r15, r12
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		fileSize++;
	 }

	sectorEndFlag = 0;
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <writeFile+0x362>
    18f4:	fe 2c       	mov	r15, r14
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    18f6:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <startBlock>
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		fileSize++;
	 }

	sectorEndFlag = 0;
    18fa:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <startBlock+0x1>
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    18fe:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <startBlock+0x2>
    1902:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <startBlock+0x3>
    1906:	3d d6       	rcall	.+3194   	; 0x2582 <SD_writeSingleBlock>
    1908:	0f 5f       	subi	r16, 0xFF	; 255
    190a:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <sectorPerCluster>
       j++;
    190e:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <sectorPerCluster+0x1>
	   if(j == sectorPerCluster) {j = 0; break;}
    1912:	20 2f       	mov	r18, r16
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	28 17       	cp	r18, r24
    1918:	39 07       	cpc	r19, r25
    191a:	e9 f0       	breq	.+58     	; 0x1956 <writeFile+0x3c2>
    191c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <startBlock>
    1920:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <startBlock+0x1>
	   startBlock++; 
    1924:	a0 91 2c 02 	lds	r26, 0x022C	; 0x80022c <startBlock+0x2>
    1928:	b0 91 2d 02 	lds	r27, 0x022D	; 0x80022d <startBlock+0x3>
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	a1 1d       	adc	r26, r1
    1930:	b1 1d       	adc	r27, r1
    1932:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <startBlock>
    1936:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <startBlock+0x1>
    193a:	a0 93 2c 02 	sts	0x022C, r26	; 0x80022c <startBlock+0x2>
    193e:	b0 93 2d 02 	sts	0x022D, r27	; 0x80022d <startBlock+0x3>
    1942:	1a 8a       	std	Y+18, r1	; 0x12
    1944:	19 8a       	std	Y+17, r1	; 0x11
    1946:	03 c0       	rjmp	.+6      	; 0x194e <writeFile+0x3ba>
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    1948:	7a 8a       	std	Y+18, r7	; 0x12
    194a:	69 8a       	std	Y+17, r6	; 0x11
    194c:	fe 2c       	mov	r15, r14
		 fileSize--;
	   } 
	   continue;     
	 }
	 transmitByte(data);
     buffer[i++] = data;
    194e:	1e 37       	cpi	r17, 0x7E	; 126
    1950:	09 f0       	breq	.+2      	; 0x1954 <writeFile+0x3c0>
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		fileSize++;
	 }

	sectorEndFlag = 0;
    1952:	34 cf       	rjmp	.-408    	; 0x17bc <writeFile+0x228>
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');
    1954:	04 c0       	rjmp	.+8      	; 0x195e <writeFile+0x3ca>
    1956:	1e 37       	cpi	r17, 0x7E	; 126
    1958:	09 f0       	breq	.+2      	; 0x195c <writeFile+0x3c8>
    195a:	3f c0       	rjmp	.+126    	; 0x19da <writeFile+0x446>

   if(data == '~') 
    195c:	ce c1       	rjmp	.+924    	; 0x1cfa <writeFile+0x766>
    195e:	c9 88       	ldd	r12, Y+17	; 0x11
    1960:	da 88       	ldd	r13, Y+18	; 0x12
    1962:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <fileSize>
    1966:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <fileSize+0x1>
   {
      fileSize--;	//to remove the last entered '~' character
    196a:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <fileSize+0x2>
    196e:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <fileSize+0x3>
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	a1 09       	sbc	r26, r1
    1976:	b1 09       	sbc	r27, r1
    1978:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <fileSize>
    197c:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <fileSize+0x1>
    1980:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <fileSize+0x2>
    1984:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <fileSize+0x3>
    1988:	96 01       	movw	r18, r12
    198a:	21 50       	subi	r18, 0x01	; 1
    198c:	31 09       	sbc	r19, r1
	  i--;
    198e:	3a 83       	std	Y+2, r19	; 0x02
    1990:	29 83       	std	Y+1, r18	; 0x01
    1992:	21 15       	cp	r18, r1
    1994:	32 40       	sbci	r19, 0x02	; 2
    1996:	68 f4       	brcc	.+26     	; 0x19b2 <writeFile+0x41e>
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    1998:	e9 81       	ldd	r30, Y+1	; 0x01
    199a:	fa 81       	ldd	r31, Y+2	; 0x02
    199c:	e2 5d       	subi	r30, 0xD2	; 210
        buffer[i]= 0x00;
    199e:	fd 4f       	sbci	r31, 0xFD	; 253
    19a0:	10 82       	st	Z, r1
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	01 96       	adiw	r24, 0x01	; 1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	81 15       	cp	r24, r1
    19ae:	92 40       	sbci	r25, 0x02	; 2
    19b0:	99 f7       	brne	.-26     	; 0x1998 <writeFile+0x404>
    19b2:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <startBlock>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    19b6:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <startBlock+0x1>
    19ba:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <startBlock+0x2>
    19be:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <startBlock+0x3>
    19c2:	df d5       	rcall	.+3006   	; 0x2582 <SD_writeSingleBlock>
    19c4:	a5 01       	movw	r20, r10
    19c6:	94 01       	movw	r18, r8
    19c8:	61 e0       	ldi	r22, 0x01	; 1

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <getSetFreeCluster>
    19d0:	cf 80       	ldd	r12, Y+7	; 0x07
    19d2:	cc 20       	and	r12, r12

if(appendFile)  //executes this loop if file is to be appended
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <writeFile+0x444>
    19d6:	65 c0       	rjmp	.+202    	; 0x1aa2 <writeFile+0x50e>
    19d8:	26 c0       	rjmp	.+76     	; 0x1a26 <writeFile+0x492>
    19da:	c5 01       	movw	r24, r10
    19dc:	b4 01       	movw	r22, r8
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    19de:	6e d8       	rcall	.-3876   	; 0xabc <searchNextFreeCluster>
    19e0:	2b 01       	movw	r4, r22
    19e2:	3c 01       	movw	r6, r24
    19e4:	61 15       	cp	r22, r1

   if(cluster == 0)
    19e6:	71 05       	cpc	r23, r1
    19e8:	81 05       	cpc	r24, r1
    19ea:	91 05       	cpc	r25, r1
    19ec:	41 f4       	brne	.+16     	; 0x19fe <writeFile+0x46a>
   {
      TX_NEWLINE;
    19ee:	8d e0       	ldi	r24, 0x0D	; 13
    19f0:	34 d6       	rcall	.+3176   	; 0x265a <transmitByte>
    19f2:	8a e0       	ldi	r24, 0x0A	; 10
    19f4:	32 d6       	rcall	.+3172   	; 0x265a <transmitByte>
    19f6:	83 e6       	ldi	r24, 0x63	; 99
    19f8:	91 e0       	ldi	r25, 0x01	; 1
      transmitString_F(PSTR(" No free cluster!"));
    19fa:	37 d6       	rcall	.+3182   	; 0x266a <transmitString_F>
    19fc:	92 c1       	rjmp	.+804    	; 0x1d22 <writeFile+0x78e>
    19fe:	8b 01       	movw	r16, r22
    1a00:	9c 01       	movw	r18, r24
	  return;
    1a02:	4d 2d       	mov	r20, r13
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1a04:	c5 01       	movw	r24, r10
    1a06:	b4 01       	movw	r22, r8
    1a08:	0e 94 03 03 	call	0x606	; 0x606 <getSetNextCluster>
    1a0c:	0f ef       	ldi	r16, 0xFF	; 255
    1a0e:	1f ef       	ldi	r17, 0xFF	; 255
    1a10:	2f ef       	ldi	r18, 0xFF	; 255
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1a12:	3f e0       	ldi	r19, 0x0F	; 15
    1a14:	4d 2d       	mov	r20, r13
    1a16:	c3 01       	movw	r24, r6
    1a18:	b2 01       	movw	r22, r4
    1a1a:	0e 94 03 03 	call	0x606	; 0x606 <getSetNextCluster>
    1a1e:	83 2d       	mov	r24, r3
    1a20:	53 01       	movw	r10, r6
    1a22:	42 01       	movw	r8, r4
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1a24:	83 ce       	rjmp	.-762    	; 0x172c <writeFile+0x198>
    1a26:	60 91 41 12 	lds	r22, 0x1241	; 0x801241 <appendFileSector>

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
    1a2a:	70 91 42 12 	lds	r23, 0x1242	; 0x801242 <appendFileSector+0x1>
    1a2e:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <appendFileSector+0x2>
    1a32:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <appendFileSector+0x3>
    1a36:	7d d5       	rcall	.+2810   	; 0x2532 <SD_readSingleBlock>
    1a38:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <__data_end>
    1a3c:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <__data_end+0x1>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    1a40:	e2 5d       	subi	r30, 0xD2	; 210
    1a42:	fd 4f       	sbci	r31, 0xFD	; 253
    1a44:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <fileSize>
    1a48:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <fileSize+0x1>
  extraMemory = fileSize - dir->fileSize;
    1a4c:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <fileSize+0x2>
    1a50:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <fileSize+0x3>
    1a54:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a56:	55 8d       	ldd	r21, Z+29	; 0x1d
    1a58:	66 8d       	ldd	r22, Z+30	; 0x1e
    1a5a:	77 8d       	ldd	r23, Z+31	; 0x1f
    1a5c:	6c 01       	movw	r12, r24
    1a5e:	7d 01       	movw	r14, r26
    1a60:	c4 1a       	sub	r12, r20
    1a62:	d5 0a       	sbc	r13, r21
    1a64:	e6 0a       	sbc	r14, r22
    1a66:	f7 0a       	sbc	r15, r23
    1a68:	84 8f       	std	Z+28, r24	; 0x1c
    1a6a:	95 8f       	std	Z+29, r25	; 0x1d
  dir->fileSize = fileSize;
    1a6c:	a6 8f       	std	Z+30, r26	; 0x1e
    1a6e:	b7 8f       	std	Z+31, r27	; 0x1f
    1a70:	60 91 41 12 	lds	r22, 0x1241	; 0x801241 <appendFileSector>
  SD_writeSingleBlock (appendFileSector);
    1a74:	70 91 42 12 	lds	r23, 0x1242	; 0x801242 <appendFileSector+0x1>
    1a78:	80 91 43 12 	lds	r24, 0x1243	; 0x801243 <appendFileSector+0x2>
    1a7c:	90 91 44 12 	lds	r25, 0x1244	; 0x801244 <appendFileSector+0x3>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    1a80:	80 d5       	rcall	.+2816   	; 0x2582 <SD_writeSingleBlock>
    1a82:	b7 01       	movw	r22, r14
    1a84:	a6 01       	movw	r20, r12
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	50 da       	rcall	.-2912   	; 0xf2a <freeMemoryUpdate>

  
  TX_NEWLINE;
    1a8a:	8d e0       	ldi	r24, 0x0D	; 13
    1a8c:	e6 d5       	rcall	.+3020   	; 0x265a <transmitByte>
    1a8e:	8a e0       	ldi	r24, 0x0A	; 10
    1a90:	e4 d5       	rcall	.+3016   	; 0x265a <transmitByte>
    1a92:	83 e5       	ldi	r24, 0x53	; 83
    1a94:	91 e0       	ldi	r25, 0x01	; 1
  transmitString_F(PSTR(" File appended!"));
    1a96:	e9 d5       	rcall	.+3026   	; 0x266a <transmitString_F>
    1a98:	8d e0       	ldi	r24, 0x0D	; 13
    1a9a:	df d5       	rcall	.+3006   	; 0x265a <transmitByte>
    1a9c:	8a e0       	ldi	r24, 0x0A	; 10
  TX_NEWLINE;
    1a9e:	dd d5       	rcall	.+3002   	; 0x265a <transmitByte>
    1aa0:	40 c1       	rjmp	.+640    	; 0x1d22 <writeFile+0x78e>
    1aa2:	c0 90 26 02 	lds	r12, 0x0226	; 0x800226 <rootCluster>
    1aa6:	d0 90 27 02 	lds	r13, 0x0227	; 0x800227 <rootCluster+0x1>
  return;
    1aaa:	e0 90 28 02 	lds	r14, 0x0228	; 0x800228 <rootCluster+0x2>
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1aae:	f0 90 29 02 	lds	r15, 0x0229	; 0x800229 <rootCluster+0x3>
    1ab2:	cf 82       	std	Y+7, r12	; 0x07
    1ab4:	d8 86       	std	Y+8, r13	; 0x08
    1ab6:	e9 86       	std	Y+9, r14	; 0x09
    1ab8:	fa 86       	std	Y+10, r15	; 0x0a
    1aba:	19 82       	std	Y+1, r1	; 0x01
    1abc:	2d 81       	ldd	r18, Y+5	; 0x05
    1abe:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac0:	25 5f       	subi	r18, 0xF5	; 245
    1ac2:	3f 4f       	sbci	r19, 0xFF	; 255
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
    1ac4:	68 94       	set
    1ac6:	66 24       	eor	r6, r6
    1ac8:	65 f8       	bld	r6, 5
    1aca:	0f 2e       	mov	r0, r31
    1acc:	f4 e8       	ldi	r31, 0x84	; 132

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1ace:	2f 2e       	mov	r2, r31
    1ad0:	f6 e9       	ldi	r31, 0x96	; 150
    1ad2:	3f 2e       	mov	r3, r31
		  dir->NTreserved = 0;			//always set to 0
		  dir->timeTenth = 0;			//always set to 0
		  dir->createTime = 0x9684;		//fixed time of creation
    1ad4:	f0 2d       	mov	r31, r0
    1ad6:	0f 2e       	mov	r0, r31
    1ad8:	f7 e3       	ldi	r31, 0x37	; 55
    1ada:	4f 2e       	mov	r4, r31
    1adc:	fa e3       	ldi	r31, 0x3A	; 58
    1ade:	5f 2e       	mov	r5, r31
		  dir->createDate = 0x3a37;		//fixed date of creation
    1ae0:	f0 2d       	mov	r31, r0
    1ae2:	eb 84       	ldd	r14, Y+11	; 0x0b
    1ae4:	fc 84       	ldd	r15, Y+12	; 0x0c
    1ae6:	cf 84       	ldd	r12, Y+15	; 0x0f
    1ae8:	d8 88       	ldd	r13, Y+16	; 0x10
    1aea:	3a 8b       	std	Y+18, r19	; 0x12
    1aec:	29 8b       	std	Y+17, r18	; 0x11
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <getFirstSector>

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    1afa:	6b 87       	std	Y+11, r22	; 0x0b
    1afc:	7c 87       	std	Y+12, r23	; 0x0c
    1afe:	8d 87       	std	Y+13, r24	; 0x0d
    1b00:	9e 87       	std	Y+14, r25	; 0x0e
    1b02:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <sectorPerCluster>
    1b06:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <sectorPerCluster+0x1>

   for(sector = 0; sector < sectorPerCluster; sector++)
    1b0a:	89 2b       	or	r24, r25
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <writeFile+0x57c>
    1b0e:	9f c0       	rjmp	.+318    	; 0x1c4e <writeFile+0x6ba>
    1b10:	71 2c       	mov	r7, r1
    1b12:	8b 84       	ldd	r8, Y+11	; 0x0b
    1b14:	9c 84       	ldd	r9, Y+12	; 0x0c
    1b16:	ad 84       	ldd	r10, Y+13	; 0x0d
    1b18:	be 84       	ldd	r11, Y+14	; 0x0e
   {
     SD_readSingleBlock (firstSector + sector);
    1b1a:	87 0c       	add	r8, r7
    1b1c:	91 1c       	adc	r9, r1
    1b1e:	a1 1c       	adc	r10, r1
    1b20:	b1 1c       	adc	r11, r1
    1b22:	c5 01       	movw	r24, r10
    1b24:	b4 01       	movw	r22, r8
    1b26:	05 d5       	rcall	.+2570   	; 0x2532 <SD_readSingleBlock>
    1b28:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <bytesPerSector>
    1b2c:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <bytesPerSector+0x1>
    1b30:	89 2b       	or	r24, r25
	

     for(i=0; i<bytesPerSector; i+=32)
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <writeFile+0x5a2>
    1b34:	81 c0       	rjmp	.+258    	; 0x1c38 <writeFile+0x6a4>
    1b36:	59 81       	ldd	r21, Y+1	; 0x01
    1b38:	51 11       	cpse	r21, r1
    1b3a:	07 c0       	rjmp	.+14     	; 0x1b4a <writeFile+0x5b6>
    1b3c:	8e e2       	ldi	r24, 0x2E	; 46
    1b3e:	92 e0       	ldi	r25, 0x02	; 2
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1b40:	00 e0       	ldi	r16, 0x00	; 0
    1b42:	10 e0       	ldi	r17, 0x00	; 0
    1b44:	06 c0       	rjmp	.+12     	; 0x1b52 <writeFile+0x5be>
    1b46:	80 96       	adiw	r24, 0x20	; 32
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <writeFile+0x5be>
    1b4a:	ee e2       	ldi	r30, 0x2E	; 46
    1b4c:	f2 e0       	ldi	r31, 0x02	; 2
    1b4e:	10 82       	st	Z, r1
    1b50:	e8 c0       	rjmp	.+464    	; 0x1d22 <writeFile+0x78e>
    1b52:	fc 01       	movw	r30, r24
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1b54:	20 81       	ld	r18, Z
    1b56:	22 23       	and	r18, r18

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <writeFile+0x5cc>
           return;
    1b5a:	25 3e       	cpi	r18, 0xE5	; 229
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <writeFile+0x5cc>
    1b5e:	62 c0       	rjmp	.+196    	; 0x1c24 <writeFile+0x690>
    1b60:	ed 81       	ldd	r30, Y+5	; 0x05
    1b62:	fe 81       	ldd	r31, Y+6	; 0x06
    1b64:	dc 01       	movw	r26, r24
    1b66:	21 91       	ld	r18, Z+
    1b68:	2d 93       	st	X+, r18
    1b6a:	49 89       	ldd	r20, Y+17	; 0x11
    1b6c:	5a 89       	ldd	r21, Y+18	; 0x12
    1b6e:	e4 17       	cp	r30, r20
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    1b70:	f5 07       	cpc	r31, r21
    1b72:	c9 f7       	brne	.-14     	; 0x1b66 <writeFile+0x5d2>
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    1b74:	dc 01       	movw	r26, r24
    1b76:	1b 96       	adiw	r26, 0x0b	; 11
    1b78:	6c 92       	st	X, r6
    1b7a:	1b 97       	sbiw	r26, 0x0b	; 11
    1b7c:	1c 96       	adiw	r26, 0x0c	; 12
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1b7e:	1c 92       	st	X, r1
    1b80:	1c 97       	sbiw	r26, 0x0c	; 12
    1b82:	1d 96       	adiw	r26, 0x0d	; 13
    1b84:	1c 92       	st	X, r1
		  dir->NTreserved = 0;			//always set to 0
    1b86:	1d 97       	sbiw	r26, 0x0d	; 13
    1b88:	1f 96       	adiw	r26, 0x0f	; 15
    1b8a:	3c 92       	st	X, r3
		  dir->timeTenth = 0;			//always set to 0
    1b8c:	2e 92       	st	-X, r2
    1b8e:	1e 97       	sbiw	r26, 0x0e	; 14
    1b90:	51 96       	adiw	r26, 0x11	; 17
		  dir->createTime = 0x9684;		//fixed time of creation
    1b92:	5c 92       	st	X, r5
    1b94:	4e 92       	st	-X, r4
    1b96:	50 97       	sbiw	r26, 0x10	; 16
    1b98:	53 96       	adiw	r26, 0x13	; 19
		  dir->createDate = 0x3a37;		//fixed date of creation
    1b9a:	5c 92       	st	X, r5
    1b9c:	4e 92       	st	-X, r4
    1b9e:	52 97       	sbiw	r26, 0x12	; 18
    1ba0:	57 96       	adiw	r26, 0x17	; 23
		  dir->lastAccessDate = 0x3a37;	//fixed date of last access
    1ba2:	3c 92       	st	X, r3
    1ba4:	2e 92       	st	-X, r2
    1ba6:	56 97       	sbiw	r26, 0x16	; 22
    1ba8:	59 96       	adiw	r26, 0x19	; 25
		  dir->writeTime = 0x9684;		//fixed time of last write
    1baa:	5c 92       	st	X, r5
    1bac:	4e 92       	st	-X, r4
    1bae:	58 97       	sbiw	r26, 0x18	; 24
    1bb0:	55 96       	adiw	r26, 0x15	; 21
		  dir->writeDate = 0x3a37;		//fixed date of last write
    1bb2:	fc 92       	st	X, r15
    1bb4:	ee 92       	st	-X, r14
    1bb6:	54 97       	sbiw	r26, 0x14	; 20
    1bb8:	5b 96       	adiw	r26, 0x1b	; 27
		  dir->firstClusterHI = firstClusterHigh;
    1bba:	dc 92       	st	X, r13
    1bbc:	ce 92       	st	-X, r12
		  dir->firstClusterLO = firstClusterLow;
    1bbe:	5a 97       	sbiw	r26, 0x1a	; 26
    1bc0:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <fileSize>
		  dir->fileSize = fileSize;
    1bc4:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <fileSize+0x1>
    1bc8:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <fileSize+0x2>
    1bcc:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <fileSize+0x3>
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	44 8f       	std	Z+28, r20	; 0x1c
    1bd4:	55 8f       	std	Z+29, r21	; 0x1d
    1bd6:	66 8f       	std	Z+30, r22	; 0x1e

		  SD_writeSingleBlock (firstSector + sector);
    1bd8:	77 8f       	std	Z+31, r23	; 0x1f
    1bda:	c5 01       	movw	r24, r10
    1bdc:	b4 01       	movw	r22, r8
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    1bde:	d1 d4       	rcall	.+2466   	; 0x2582 <SD_writeSingleBlock>
    1be0:	8d e0       	ldi	r24, 0x0D	; 13
    1be2:	3b d5       	rcall	.+2678   	; 0x265a <transmitByte>
    1be4:	8a e0       	ldi	r24, 0x0A	; 10
    1be6:	39 d5       	rcall	.+2674   	; 0x265a <transmitByte>
    1be8:	8d e0       	ldi	r24, 0x0D	; 13
		  TX_NEWLINE;
    1bea:	37 d5       	rcall	.+2670   	; 0x265a <transmitByte>
    1bec:	8a e0       	ldi	r24, 0x0A	; 10
    1bee:	35 d5       	rcall	.+2666   	; 0x265a <transmitByte>
    1bf0:	84 e4       	ldi	r24, 0x44	; 68
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	3a d5       	rcall	.+2676   	; 0x266a <transmitString_F>
		  transmitString_F(PSTR(" File Created!"));
    1bf6:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <fileSize>
    1bfa:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <fileSize+0x1>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1bfe:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <fileSize+0x2>
    1c02:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <fileSize+0x3>
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 d9       	rcall	.-3296   	; 0xf2a <freeMemoryUpdate>
    1c0a:	00 5e       	subi	r16, 0xE0	; 224
    1c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <bytesPerSector>
    1c12:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <bytesPerSector+0x1>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1c16:	08 17       	cp	r16, r24
    1c18:	19 07       	cpc	r17, r25
    1c1a:	08 f4       	brcc	.+2      	; 0x1c1e <writeFile+0x68a>
    1c1c:	6a c0       	rjmp	.+212    	; 0x1cf2 <writeFile+0x75e>
    1c1e:	f1 e0       	ldi	r31, 0x01	; 1
    1c20:	f9 83       	std	Y+1, r31	; 0x01
    1c22:	0a c0       	rjmp	.+20     	; 0x1c38 <writeFile+0x6a4>
    1c24:	00 5e       	subi	r16, 0xE0	; 224
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    1c28:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <bytesPerSector>
    1c2c:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <bytesPerSector+0x1>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1c30:	02 17       	cp	r16, r18
    1c32:	13 07       	cpc	r17, r19
    1c34:	08 f4       	brcc	.+2      	; 0x1c38 <writeFile+0x6a4>
    1c36:	87 cf       	rjmp	.-242    	; 0x1b46 <writeFile+0x5b2>
    1c38:	73 94       	inc	r7
    1c3a:	80 91 2e 12 	lds	r24, 0x122E	; 0x80122e <sectorPerCluster>
    1c3e:	90 91 2f 12 	lds	r25, 0x122F	; 0x80122f <sectorPerCluster+0x1>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1c42:	27 2d       	mov	r18, r7
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	28 17       	cp	r18, r24
    1c48:	39 07       	cpc	r19, r25
    1c4a:	08 f4       	brcc	.+2      	; 0x1c4e <writeFile+0x6ba>
    1c4c:	62 cf       	rjmp	.-316    	; 0x1b12 <writeFile+0x57e>
    1c4e:	00 e0       	ldi	r16, 0x00	; 0
    1c50:	10 e0       	ldi	r17, 0x00	; 0
    1c52:	98 01       	movw	r18, r16
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	6f 81       	ldd	r22, Y+7	; 0x07
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1c58:	78 85       	ldd	r23, Y+8	; 0x08
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5e:	0e 94 03 03 	call	0x606	; 0x606 <getSetNextCluster>
    1c62:	67 3f       	cpi	r22, 0xF7	; 247
    1c64:	5f ef       	ldi	r21, 0xFF	; 255
    1c66:	75 07       	cpc	r23, r21
    1c68:	85 07       	cpc	r24, r21
    1c6a:	5f e0       	ldi	r21, 0x0F	; 15

   if(cluster > 0x0ffffff6)
    1c6c:	95 07       	cpc	r25, r21
    1c6e:	70 f1       	brcs	.+92     	; 0x1ccc <writeFile+0x738>
    1c70:	6f 3f       	cpi	r22, 0xFF	; 255
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	8f 4f       	sbci	r24, 0xFF	; 255
    1c76:	9f 40       	sbci	r25, 0x0F	; 15
    1c78:	29 f5       	brne	.+74     	; 0x1cc4 <writeFile+0x730>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	0e 94 5e 05 	call	0xabc	; 0xabc <searchNextFreeCluster>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1c86:	86 2e       	mov	r8, r22
    1c88:	97 2e       	mov	r9, r23
    1c8a:	a8 2e       	mov	r10, r24
    1c8c:	b9 2e       	mov	r11, r25
    1c8e:	06 2f       	mov	r16, r22
    1c90:	17 2f       	mov	r17, r23
    1c92:	28 2f       	mov	r18, r24
    1c94:	39 2f       	mov	r19, r25
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9a:	78 85       	ldd	r23, Y+8	; 0x08
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
    1c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca0:	0e 94 03 03 	call	0x606	; 0x606 <getSetNextCluster>
    1ca4:	0f ef       	ldi	r16, 0xFF	; 255
    1ca6:	1f ef       	ldi	r17, 0xFF	; 255
    1ca8:	2f ef       	ldi	r18, 0xFF	; 255
    1caa:	3f e0       	ldi	r19, 0x0F	; 15
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	68 2d       	mov	r22, r8
    1cb0:	79 2d       	mov	r23, r9
    1cb2:	8a 2d       	mov	r24, r10
    1cb4:	9b 2d       	mov	r25, r11
    1cb6:	0e 94 03 03 	call	0x606	; 0x606 <getSetNextCluster>
    1cba:	8f 82       	std	Y+7, r8	; 0x07
    1cbc:	98 86       	std	Y+8, r9	; 0x08
    1cbe:	a9 86       	std	Y+9, r10	; 0x09

   if(cluster > 0x0ffffff6)
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1cc0:	ba 86       	std	Y+10, r11	; 0x0a
    1cc2:	08 c0       	rjmp	.+16     	; 0x1cd4 <writeFile+0x740>
    1cc4:	8f e2       	ldi	r24, 0x2F	; 47
    1cc6:	91 e0       	ldi	r25, 0x01	; 1
    1cc8:	d0 d4       	rcall	.+2464   	; 0x266a <transmitString_F>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    1cca:	2b c0       	rjmp	.+86     	; 0x1d22 <writeFile+0x78e>
    1ccc:	6f 83       	std	Y+7, r22	; 0x07
    1cce:	78 87       	std	Y+8, r23	; 0x08
    1cd0:	89 87       	std	Y+9, r24	; 0x09
	    return;
    1cd2:	9a 87       	std	Y+10, r25	; 0x0a
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1cd4:	2f 81       	ldd	r18, Y+7	; 0x07
    1cd6:	38 85       	ldd	r19, Y+8	; 0x08
    1cd8:	49 85       	ldd	r20, Y+9	; 0x09
    1cda:	5a 85       	ldd	r21, Y+10	; 0x0a
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1cdc:	23 2b       	or	r18, r19
    1cde:	24 2b       	or	r18, r20
    1ce0:	25 2b       	or	r18, r21
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <writeFile+0x752>
    1ce4:	04 cf       	rjmp	.-504    	; 0x1aee <writeFile+0x55a>
    1ce6:	86 e1       	ldi	r24, 0x16	; 22
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	bf d4       	rcall	.+2430   	; 0x266a <transmitString_F>
    1cec:	1a c0       	rjmp	.+52     	; 0x1d22 <writeFile+0x78e>
    1cee:	fe 2c       	mov	r15, r14
    1cf0:	65 cd       	rjmp	.-1334   	; 0x17bc <writeFile+0x228>
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	e2 5d       	subi	r30, 0xD2	; 210
    1cf6:	fd 4f       	sbci	r31, 0xFD	; 253
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    1cf8:	2a cf       	rjmp	.-428    	; 0x1b4e <writeFile+0x5ba>
    1cfa:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <fileSize>
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1cfe:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <fileSize+0x1>
    1d02:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <fileSize+0x2>
     }
	}while (data != '~');

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
    1d06:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <fileSize+0x3>
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	a1 09       	sbc	r26, r1
    1d0e:	b1 09       	sbc	r27, r1
    1d10:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <fileSize>
    1d14:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <fileSize+0x1>
    1d18:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <fileSize+0x2>
    1d1c:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <fileSize+0x3>
    1d20:	48 ce       	rjmp	.-880    	; 0x19b2 <writeFile+0x41e>
    1d22:	62 96       	adiw	r28, 0x12	; 18
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
   
   prevCluster = cluster;
 }
 
 return;
}
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	ff 90       	pop	r15
    1d38:	ef 90       	pop	r14
    1d3a:	df 90       	pop	r13
    1d3c:	cf 90       	pop	r12
    1d3e:	bf 90       	pop	r11
    1d40:	af 90       	pop	r10
    1d42:	9f 90       	pop	r9
    1d44:	8f 90       	pop	r8
    1d46:	7f 90       	pop	r7
    1d48:	6f 90       	pop	r6
    1d4a:	5f 90       	pop	r5
    1d4c:	4f 90       	pop	r4
    1d4e:	3f 90       	pop	r3
    1d50:	2f 90       	pop	r2
    1d52:	08 95       	ret

00001d54 <port_init>:
#include "pin_defs.h"


void port_init(void)
{
	SPI_DDR = SPI_OUTPUT_MASK;
    1d54:	87 e0       	ldi	r24, 0x07	; 7
    1d56:	84 b9       	out	0x04, r24	; 4
	PUMPE_DDR = PUMPE_OUTPUT_MASK;
    1d58:	8c ef       	ldi	r24, 0xFC	; 252
    1d5a:	81 b9       	out	0x01, r24	; 1
	PUMPE_DDR2 = PUMPE2_OUTPUT_MASK;
    1d5c:	80 e2       	ldi	r24, 0x20	; 32
    1d5e:	83 bb       	out	0x13, r24	; 19
	SPI_PORT |= SPI_MISO_PIN;
    1d60:	93 b1       	in	r25, 0x03	; 3
    1d62:	85 b1       	in	r24, 0x05	; 5
    1d64:	89 2b       	or	r24, r25
    1d66:	85 b9       	out	0x05, r24	; 5
    1d68:	08 95       	ret

00001d6a <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
    1d6a:	f8 94       	cli
 port_init();
    1d6c:	f3 df       	rcall	.-26     	; 0x1d54 <port_init>
 spi_init();
    1d6e:	4a d4       	rcall	.+2196   	; 0x2604 <spi_init>
 uart0_init();
    1d70:	5a c4       	rjmp	.+2228   	; 0x2626 <uart0_init>
    1d72:	08 95       	ret

00001d74 <main>:
    1d74:	cf 93       	push	r28
 //all peripherals are now initialized
}

//*************************** MAIN *******************************//
int main(void)
{
    1d76:	df 93       	push	r29
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	2d 97       	sbiw	r28, 0x0d	; 13
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d88:	2f ef       	ldi	r18, 0xFF	; 255
    1d8a:	81 ee       	ldi	r24, 0xE1	; 225
    1d8c:	94 e0       	ldi	r25, 0x04	; 4
    1d8e:	21 50       	subi	r18, 0x01	; 1
    1d90:	80 40       	sbci	r24, 0x00	; 0
    1d92:	90 40       	sbci	r25, 0x00	; 0
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <main+0x1a>
    1d96:	00 c0       	rjmp	.+0      	; 0x1d98 <main+0x24>
    1d98:	00 00       	nop
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    1d9a:	e7 df       	rcall	.-50     	; 0x1d6a <init_devices>

TX_NEWLINE;
    1d9c:	8d e0       	ldi	r24, 0x0D	; 13
    1d9e:	5d d4       	rcall	.+2234   	; 0x265a <transmitByte>
    1da0:	8a e0       	ldi	r24, 0x0A	; 10
    1da2:	5b d4       	rcall	.+2230   	; 0x265a <transmitByte>
TX_NEWLINE;
    1da4:	8d e0       	ldi	r24, 0x0D	; 13
    1da6:	59 d4       	rcall	.+2226   	; 0x265a <transmitByte>
    1da8:	8a e0       	ldi	r24, 0x0A	; 10
    1daa:	57 d4       	rcall	.+2222   	; 0x265a <transmitByte>
transmitString_F (PSTR("*********************************************"));
    1dac:	82 e5       	ldi	r24, 0x52	; 82
    1dae:	95 e0       	ldi	r25, 0x05	; 5
    1db0:	5c d4       	rcall	.+2232   	; 0x266a <transmitString_F>
TX_NEWLINE;
    1db2:	8d e0       	ldi	r24, 0x0D	; 13
    1db4:	52 d4       	rcall	.+2212   	; 0x265a <transmitByte>
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	50 d4       	rcall	.+2208   	; 0x265a <transmitByte>
transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
    1dba:	8a e2       	ldi	r24, 0x2A	; 42
    1dbc:	95 e0       	ldi	r25, 0x05	; 5
    1dbe:	55 d4       	rcall	.+2218   	; 0x266a <transmitString_F>
TX_NEWLINE;
    1dc0:	8d e0       	ldi	r24, 0x0D	; 13
    1dc2:	4b d4       	rcall	.+2198   	; 0x265a <transmitByte>
    1dc4:	8a e0       	ldi	r24, 0x0A	; 10
    1dc6:	49 d4       	rcall	.+2194   	; 0x265a <transmitByte>
    1dc8:	8c ef       	ldi	r24, 0xFC	; 252
transmitString_F (PSTR("*********************************************"));
    1dca:	94 e0       	ldi	r25, 0x04	; 4
    1dcc:	4e d4       	rcall	.+2204   	; 0x266a <transmitString_F>
    1dce:	8d e0       	ldi	r24, 0x0D	; 13
TX_NEWLINE;
    1dd0:	44 d4       	rcall	.+2184   	; 0x265a <transmitByte>
    1dd2:	8a e0       	ldi	r24, 0x0A	; 10
    1dd4:	42 d4       	rcall	.+2180   	; 0x265a <transmitByte>
    1dd6:	10 92 3f 12 	sts	0x123F, r1	; 0x80123f <cardType>
    1dda:	0f 2e       	mov	r0, r31

cardType = 0;
    1ddc:	fa e0       	ldi	r31, 0x0A	; 10
    1dde:	ef 2e       	mov	r14, r31
    1de0:	f1 2c       	mov	r15, r1
    1de2:	f0 2d       	mov	r31, r0
    1de4:	dc d2       	rcall	.+1464   	; 0x239e <SD_init>
    1de6:	18 2f       	mov	r17, r24

for (i=0; i<10; i++)
{
  error = SD_init();
    1de8:	88 23       	and	r24, r24
    1dea:	09 f4       	brne	.+2      	; 0x1dee <main+0x7a>
    1dec:	67 c2       	rjmp	.+1230   	; 0x22bc <__stack+0xbd>
  if(!error) break;
    1dee:	e1 e0       	ldi	r30, 0x01	; 1
    1df0:	ee 1a       	sub	r14, r30
    1df2:	f1 08       	sbc	r15, r1
    1df4:	b9 f7       	brne	.-18     	; 0x1de4 <main+0x70>
transmitString_F (PSTR("*********************************************"));
TX_NEWLINE;

cardType = 0;

for (i=0; i<10; i++)
    1df6:	6e c2       	rjmp	.+1244   	; 0x22d4 <__stack+0xd5>
    1df8:	85 ee       	ldi	r24, 0xE5	; 229
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    1dfa:	94 e0       	ldi	r25, 0x04	; 4
    1dfc:	36 d4       	rcall	.+2156   	; 0x266a <transmitString_F>
    1dfe:	12 30       	cpi	r17, 0x02	; 2
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    1e00:	19 f4       	brne	.+6      	; 0x1e08 <main+0x94>
    1e02:	88 ec       	ldi	r24, 0xC8	; 200
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	31 d4       	rcall	.+2146   	; 0x266a <transmitString_F>
    1e08:	ff cf       	rjmp	.-2      	; 0x1e08 <main+0x94>
  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    1e0a:	8d e9       	ldi	r24, 0x9D	; 157
    1e0c:	94 e0       	ldi	r25, 0x04	; 4
    1e0e:	2d d4       	rcall	.+2138   	; 0x266a <transmitString_F>
    1e10:	0b c0       	rjmp	.+22     	; 0x1e28 <main+0xb4>
  		 break;
    1e12:	80 e8       	ldi	r24, 0x80	; 128
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    1e14:	94 e0       	ldi	r25, 0x04	; 4
    1e16:	29 d4       	rcall	.+2130   	; 0x266a <transmitString_F>
    1e18:	07 c0       	rjmp	.+14     	; 0x1e28 <main+0xb4>
    1e1a:	85 e5       	ldi	r24, 0x55	; 85
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    1e1c:	94 e0       	ldi	r25, 0x04	; 4
    1e1e:	25 d4       	rcall	.+2122   	; 0x266a <transmitString_F>
    1e20:	03 c0       	rjmp	.+6      	; 0x1e28 <main+0xb4>
  		 break;
  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    1e22:	8b e3       	ldi	r24, 0x3B	; 59
    1e24:	94 e0       	ldi	r25, 0x04	; 4
    1e26:	21 d4       	rcall	.+2114   	; 0x266a <transmitString_F>
    1e28:	8f e9       	ldi	r24, 0x9F	; 159
    1e2a:	9f e0       	ldi	r25, 0x0F	; 15
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <main+0xb8>
    1e30:	00 c0       	rjmp	.+0      	; 0x1e32 <main+0xbe>
    1e32:	00 00       	nop
    1e34:	0e 94 0e 04 	call	0x81c	; 0x81c <getBootSectorData>

// SPI_HIGH_SPEED;	//SCK - 4 MHz
_delay_ms(1);   //some delay

FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1e38:	88 23       	and	r24, r24
if(error) 	
    1e3a:	49 f0       	breq	.+18     	; 0x1e4e <main+0xda>
    1e3c:	8d e0       	ldi	r24, 0x0D	; 13
{
  TX_NEWLINE;
    1e3e:	0d d4       	rcall	.+2074   	; 0x265a <transmitByte>
    1e40:	8a e0       	ldi	r24, 0x0A	; 10
    1e42:	0b d4       	rcall	.+2070   	; 0x265a <transmitByte>
    1e44:	8a e2       	ldi	r24, 0x2A	; 42
    1e46:	94 e0       	ldi	r25, 0x04	; 4
    1e48:	10 d4       	rcall	.+2080   	; 0x266a <transmitString_F>
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1e4a:	71 2c       	mov	r7, r1
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <main+0xde>
    1e4e:	77 24       	eor	r7, r7
  FAT32_active = 0;
    1e50:	73 94       	inc	r7


// SPI_HIGH_SPEED;	//SCK - 4 MHz
_delay_ms(1);   //some delay

FAT32_active = 1;
    1e52:	81 2c       	mov	r8, r1
    1e54:	91 2c       	mov	r9, r1
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    1e56:	54 01       	movw	r10, r8
    1e58:	83 94       	inc	r8
    1e5a:	6e 01       	movw	r12, r28
    1e5c:	9e e0       	ldi	r25, 0x0E	; 14
    1e5e:	c9 0e       	add	r12, r25
{
TX_NEWLINE;
TX_NEWLINE;
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
data = receiveByte(); transmitByte(data);
startBlock = (data & 0x0f) * 1000;
    1e60:	d1 1c       	adc	r13, r1
    1e62:	0f 2e       	mov	r0, r31
    1e64:	f8 ee       	ldi	r31, 0xE8	; 232
    1e66:	4f 2e       	mov	r4, r31
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f) * 100;
    1e68:	f3 e0       	ldi	r31, 0x03	; 3
    1e6a:	5f 2e       	mov	r5, r31
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    1e6c:	f0 2d       	mov	r31, r0
    1e6e:	0f 2e       	mov	r0, r31
    1e70:	f4 e6       	ldi	r31, 0x64	; 100
    1e72:	6f 2e       	mov	r6, r31
transmitString_F(PSTR("Press any key..."));
    1e74:	f0 2d       	mov	r31, r0
    1e76:	8d e0       	ldi	r24, 0x0D	; 13
    1e78:	f0 d3       	rcall	.+2016   	; 0x265a <transmitByte>
TX_NEWLINE;
    1e7a:	8a e0       	ldi	r24, 0x0A	; 10
    1e7c:	ee d3       	rcall	.+2012   	; 0x265a <transmitByte>
    1e7e:	89 e1       	ldi	r24, 0x19	; 25
    1e80:	94 e0       	ldi	r25, 0x04	; 4
option = receiveByte();
    1e82:	f3 d3       	rcall	.+2022   	; 0x266a <transmitString_F>
TX_NEWLINE;
    1e84:	8d e0       	ldi	r24, 0x0D	; 13
    1e86:	e9 d3       	rcall	.+2002   	; 0x265a <transmitByte>
    1e88:	8a e0       	ldi	r24, 0x0A	; 10
    1e8a:	e7 d3       	rcall	.+1998   	; 0x265a <transmitByte>
transmitString_F(PSTR("> 0 : Erase Blocks"));
    1e8c:	dc d3       	rcall	.+1976   	; 0x2646 <receiveByte>
    1e8e:	8d e0       	ldi	r24, 0x0D	; 13
TX_NEWLINE;
    1e90:	e4 d3       	rcall	.+1992   	; 0x265a <transmitByte>
    1e92:	8a e0       	ldi	r24, 0x0A	; 10
    1e94:	e2 d3       	rcall	.+1988   	; 0x265a <transmitByte>
    1e96:	86 e0       	ldi	r24, 0x06	; 6
transmitString_F(PSTR("> 1 : Write single Block"));
    1e98:	94 e0       	ldi	r25, 0x04	; 4
    1e9a:	e7 d3       	rcall	.+1998   	; 0x266a <transmitString_F>
    1e9c:	8d e0       	ldi	r24, 0x0D	; 13
TX_NEWLINE;
    1e9e:	dd d3       	rcall	.+1978   	; 0x265a <transmitByte>
    1ea0:	8a e0       	ldi	r24, 0x0A	; 10
    1ea2:	db d3       	rcall	.+1974   	; 0x265a <transmitByte>
    1ea4:	8d ee       	ldi	r24, 0xED	; 237
transmitString_F(PSTR("> 2 : Read single Block"));
    1ea6:	93 e0       	ldi	r25, 0x03	; 3
    1ea8:	e0 d3       	rcall	.+1984   	; 0x266a <transmitString_F>
    1eaa:	8d e0       	ldi	r24, 0x0D	; 13
TX_NEWLINE;
transmitString_F(PSTR("> 4 : Read multiple Blocks"));
#endif


TX_NEWLINE;
    1eac:	d6 d3       	rcall	.+1964   	; 0x265a <transmitByte>
    1eae:	8a e0       	ldi	r24, 0x0A	; 10
    1eb0:	d4 d3       	rcall	.+1960   	; 0x265a <transmitByte>
    1eb2:	85 ed       	ldi	r24, 0xD5	; 213
transmitString_F(PSTR("> 5 : Get file list"));
    1eb4:	93 e0       	ldi	r25, 0x03	; 3
    1eb6:	d9 d3       	rcall	.+1970   	; 0x266a <transmitString_F>
TX_NEWLINE;
    1eb8:	8d e0       	ldi	r24, 0x0D	; 13
    1eba:	cf d3       	rcall	.+1950   	; 0x265a <transmitByte>
    1ebc:	8a e0       	ldi	r24, 0x0A	; 10
    1ebe:	cd d3       	rcall	.+1946   	; 0x265a <transmitByte>
    1ec0:	81 ec       	ldi	r24, 0xC1	; 193
    1ec2:	93 e0       	ldi	r25, 0x03	; 3
transmitString_F(PSTR("> 6 : Read File"));
    1ec4:	d2 d3       	rcall	.+1956   	; 0x266a <transmitString_F>
    1ec6:	8d e0       	ldi	r24, 0x0D	; 13
    1ec8:	c8 d3       	rcall	.+1936   	; 0x265a <transmitByte>
TX_NEWLINE;
    1eca:	8a e0       	ldi	r24, 0x0A	; 10
    1ecc:	c6 d3       	rcall	.+1932   	; 0x265a <transmitByte>
    1ece:	81 eb       	ldi	r24, 0xB1	; 177
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
transmitString_F(PSTR("> 7 : Write File"));
    1ed2:	cb d3       	rcall	.+1942   	; 0x266a <transmitString_F>
    1ed4:	8d e0       	ldi	r24, 0x0D	; 13
    1ed6:	c1 d3       	rcall	.+1922   	; 0x265a <transmitByte>
TX_NEWLINE;
    1ed8:	8a e0       	ldi	r24, 0x0A	; 10
    1eda:	bf d3       	rcall	.+1918   	; 0x265a <transmitByte>
    1edc:	80 ea       	ldi	r24, 0xA0	; 160
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	c4 d3       	rcall	.+1928   	; 0x266a <transmitString_F>
transmitString_F(PSTR("> 8 : Delete File"));
    1ee2:	8d e0       	ldi	r24, 0x0D	; 13
    1ee4:	ba d3       	rcall	.+1908   	; 0x265a <transmitByte>
TX_NEWLINE;
    1ee6:	8a e0       	ldi	r24, 0x0A	; 10
    1ee8:	b8 d3       	rcall	.+1904   	; 0x265a <transmitByte>
    1eea:	8e e8       	ldi	r24, 0x8E	; 142
    1eec:	93 e0       	ldi	r25, 0x03	; 3
transmitString_F(PSTR("> 9 : Read SD Memory Capacity (Total/Free)"));
    1eee:	bd d3       	rcall	.+1914   	; 0x266a <transmitString_F>
    1ef0:	8d e0       	ldi	r24, 0x0D	; 13
    1ef2:	b3 d3       	rcall	.+1894   	; 0x265a <transmitByte>

TX_NEWLINE;
    1ef4:	8a e0       	ldi	r24, 0x0A	; 10
    1ef6:	b1 d3       	rcall	.+1890   	; 0x265a <transmitByte>
    1ef8:	83 e6       	ldi	r24, 0x63	; 99
    1efa:	93 e0       	ldi	r25, 0x03	; 3
    1efc:	b6 d3       	rcall	.+1900   	; 0x266a <transmitString_F>
    1efe:	8d e0       	ldi	r24, 0x0D	; 13
TX_NEWLINE;
    1f00:	ac d3       	rcall	.+1880   	; 0x265a <transmitByte>
    1f02:	8a e0       	ldi	r24, 0x0A	; 10
    1f04:	aa d3       	rcall	.+1876   	; 0x265a <transmitByte>
    1f06:	8d e0       	ldi	r24, 0x0D	; 13
    1f08:	a8 d3       	rcall	.+1872   	; 0x265a <transmitByte>
    1f0a:	8a e0       	ldi	r24, 0x0A	; 10
transmitString_F(PSTR("> Select Option (0-9): "));
    1f0c:	a6 d3       	rcall	.+1868   	; 0x265a <transmitByte>
    1f0e:	8b e4       	ldi	r24, 0x4B	; 75
    1f10:	93 e0       	ldi	r25, 0x03	; 3

/*WARNING: If option 0, 1 or 3 is selected, the card may not be detected by PC/Laptop again,
as it disturbs the FAT format, and you may have to format it again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    1f12:	ab d3       	rcall	.+1878   	; 0x266a <transmitString_F>
    1f14:	98 d3       	rcall	.+1840   	; 0x2646 <receiveByte>
transmitByte(option);
    1f16:	e8 2e       	mov	r14, r24
    1f18:	a0 d3       	rcall	.+1856   	; 0x265a <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    1f1a:	8b ec       	ldi	r24, 0xCB	; 203
    1f1c:	8e 0d       	add	r24, r14
    1f1e:	85 30       	cpi	r24, 0x05	; 5
    1f20:	70 f4       	brcc	.+28     	; 0x1f3e <main+0x1ca>
{
  if(!FAT32_active) 
    1f22:	71 10       	cpse	r7, r1
    1f24:	0c c0       	rjmp	.+24     	; 0x1f3e <main+0x1ca>
  {
    TX_NEWLINE;
    1f26:	8d e0       	ldi	r24, 0x0D	; 13
    1f28:	98 d3       	rcall	.+1840   	; 0x265a <transmitByte>
    1f2a:	8a e0       	ldi	r24, 0x0A	; 10
    1f2c:	96 d3       	rcall	.+1836   	; 0x265a <transmitByte>
    1f2e:	8d e0       	ldi	r24, 0x0D	; 13
    1f30:	94 d3       	rcall	.+1832   	; 0x265a <transmitByte>
    TX_NEWLINE;
    1f32:	8a e0       	ldi	r24, 0x0A	; 10
    1f34:	92 d3       	rcall	.+1828   	; 0x265a <transmitByte>
    1f36:	83 e3       	ldi	r24, 0x33	; 51
    1f38:	93 e0       	ldi	r25, 0x03	; 3
    1f3a:	97 d3       	rcall	.+1838   	; 0x266a <transmitString_F>
    1f3c:	9c cf       	rjmp	.-200    	; 0x1e76 <main+0x102>
	transmitString_F(PSTR("FAT32 options disabled!"));
    1f3e:	80 ed       	ldi	r24, 0xD0	; 208
    1f40:	8e 0d       	add	r24, r14
    1f42:	85 30       	cpi	r24, 0x05	; 5
    1f44:	08 f0       	brcs	.+2      	; 0x1f48 <main+0x1d4>
	continue;
    1f46:	84 c0       	rjmp	.+264    	; 0x2050 <main+0x2dc>
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    1f48:	8d e0       	ldi	r24, 0x0D	; 13
    1f4a:	87 d3       	rcall	.+1806   	; 0x265a <transmitByte>
    1f4c:	8a e0       	ldi	r24, 0x0A	; 10
    1f4e:	85 d3       	rcall	.+1802   	; 0x265a <transmitByte>
{
TX_NEWLINE;
    1f50:	8d e0       	ldi	r24, 0x0D	; 13
    1f52:	83 d3       	rcall	.+1798   	; 0x265a <transmitByte>
    1f54:	8a e0       	ldi	r24, 0x0A	; 10
    1f56:	81 d3       	rcall	.+1794   	; 0x265a <transmitByte>
    1f58:	8f e0       	ldi	r24, 0x0F	; 15
    1f5a:	93 e0       	ldi	r25, 0x03	; 3
TX_NEWLINE;
    1f5c:	86 d3       	rcall	.+1804   	; 0x266a <transmitString_F>
    1f5e:	73 d3       	rcall	.+1766   	; 0x2646 <receiveByte>
    1f60:	18 2f       	mov	r17, r24
    1f62:	7b d3       	rcall	.+1782   	; 0x265a <transmitByte>
    1f64:	1f 70       	andi	r17, 0x0F	; 15
    1f66:	14 9d       	mul	r17, r4
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    1f68:	c0 01       	movw	r24, r0
    1f6a:	15 9d       	mul	r17, r5
    1f6c:	90 0d       	add	r25, r0
    1f6e:	11 24       	eor	r1, r1
data = receiveByte(); transmitByte(data);
    1f70:	09 2e       	mov	r0, r25
    1f72:	00 0c       	add	r0, r0
    1f74:	aa 0b       	sbc	r26, r26
    1f76:	bb 0b       	sbc	r27, r27
    1f78:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <startBlock>
startBlock = (data & 0x0f) * 1000;
    1f7c:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <startBlock+0x1>
    1f80:	a0 93 2c 02 	sts	0x022C, r26	; 0x80022c <startBlock+0x2>
    1f84:	b0 93 2d 02 	sts	0x022D, r27	; 0x80022d <startBlock+0x3>
    1f88:	5e d3       	rcall	.+1724   	; 0x2646 <receiveByte>
    1f8a:	18 2f       	mov	r17, r24
    1f8c:	66 d3       	rcall	.+1740   	; 0x265a <transmitByte>
    1f8e:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <startBlock>
    1f92:	50 91 2b 02 	lds	r21, 0x022B	; 0x80022b <startBlock+0x1>
    1f96:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <startBlock+0x2>
    1f9a:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <startBlock+0x3>
data = receiveByte(); transmitByte(data);
    1f9e:	1f 70       	andi	r17, 0x0F	; 15
    1fa0:	61 9e       	mul	r6, r17
    1fa2:	c0 01       	movw	r24, r0
startBlock += (data & 0x0f) * 100;
    1fa4:	11 24       	eor	r1, r1
    1fa6:	09 2e       	mov	r0, r25
    1fa8:	00 0c       	add	r0, r0
    1faa:	aa 0b       	sbc	r26, r26
    1fac:	bb 0b       	sbc	r27, r27
    1fae:	84 0f       	add	r24, r20
    1fb0:	95 1f       	adc	r25, r21
    1fb2:	a6 1f       	adc	r26, r22
    1fb4:	b7 1f       	adc	r27, r23
    1fb6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <startBlock>
    1fba:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <startBlock+0x1>
    1fbe:	a0 93 2c 02 	sts	0x022C, r26	; 0x80022c <startBlock+0x2>
    1fc2:	b0 93 2d 02 	sts	0x022D, r27	; 0x80022d <startBlock+0x3>
    1fc6:	3f d3       	rcall	.+1662   	; 0x2646 <receiveByte>
    1fc8:	18 2f       	mov	r17, r24
    1fca:	47 d3       	rcall	.+1678   	; 0x265a <transmitByte>
    1fcc:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <startBlock>
    1fd0:	50 91 2b 02 	lds	r21, 0x022B	; 0x80022b <startBlock+0x1>
    1fd4:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <startBlock+0x2>
data = receiveByte(); transmitByte(data);
    1fd8:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <startBlock+0x3>
    1fdc:	1f 70       	andi	r17, 0x0F	; 15
    1fde:	81 2f       	mov	r24, r17
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
startBlock += (data & 0x0f) * 10;
    1fe2:	9c 01       	movw	r18, r24
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	82 0f       	add	r24, r18
    1ff6:	93 1f       	adc	r25, r19
    1ff8:	09 2e       	mov	r0, r25
    1ffa:	00 0c       	add	r0, r0
    1ffc:	aa 0b       	sbc	r26, r26
    1ffe:	bb 0b       	sbc	r27, r27
    2000:	84 0f       	add	r24, r20
    2002:	95 1f       	adc	r25, r21
    2004:	a6 1f       	adc	r26, r22
    2006:	b7 1f       	adc	r27, r23
    2008:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <startBlock>
    200c:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <startBlock+0x1>
    2010:	a0 93 2c 02 	sts	0x022C, r26	; 0x80022c <startBlock+0x2>
    2014:	b0 93 2d 02 	sts	0x022D, r27	; 0x80022d <startBlock+0x3>
    2018:	16 d3       	rcall	.+1580   	; 0x2646 <receiveByte>
    201a:	18 2f       	mov	r17, r24
    201c:	1e d3       	rcall	.+1596   	; 0x265a <transmitByte>
    201e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <startBlock>
    2022:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <startBlock+0x1>
data = receiveByte(); transmitByte(data);
    2026:	a0 91 2c 02 	lds	r26, 0x022C	; 0x80022c <startBlock+0x2>
    202a:	b0 91 2d 02 	lds	r27, 0x022D	; 0x80022d <startBlock+0x3>
startBlock += (data & 0x0f);
    202e:	1f 70       	andi	r17, 0x0F	; 15
    2030:	81 0f       	add	r24, r17
    2032:	91 1d       	adc	r25, r1
    2034:	a1 1d       	adc	r26, r1
    2036:	b1 1d       	adc	r27, r1
    2038:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <startBlock>
    203c:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <startBlock+0x1>
    2040:	a0 93 2c 02 	sts	0x022C, r26	; 0x80022c <startBlock+0x2>
    2044:	b0 93 2d 02 	sts	0x022D, r27	; 0x80022d <startBlock+0x3>
    2048:	8d e0       	ldi	r24, 0x0D	; 13
    204a:	07 d3       	rcall	.+1550   	; 0x265a <transmitByte>
    204c:	8a e0       	ldi	r24, 0x0A	; 10
TX_NEWLINE;
    204e:	05 d3       	rcall	.+1546   	; 0x265a <transmitByte>
    2050:	80 92 35 12 	sts	0x1235, r8	; 0x801235 <totalBlocks>
    2054:	90 92 36 12 	sts	0x1236, r9	; 0x801236 <totalBlocks+0x1>
}

totalBlocks = 1;
    2058:	a0 92 37 12 	sts	0x1237, r10	; 0x801237 <totalBlocks+0x2>
    205c:	b0 92 38 12 	sts	0x1238, r11	; 0x801238 <totalBlocks+0x3>
    2060:	8e 2d       	mov	r24, r14
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	fc 01       	movw	r30, r24
    2066:	f0 97       	sbiw	r30, 0x30	; 48
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2068:	ea 30       	cpi	r30, 0x0A	; 10
    206a:	f1 05       	cpc	r31, r1
    206c:	08 f0       	brcs	.+2      	; 0x2070 <main+0x2fc>
    206e:	12 c1       	rjmp	.+548    	; 0x2294 <__stack+0x95>
    2070:	88 27       	eor	r24, r24
    2072:	ee 58       	subi	r30, 0x8E	; 142
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	8f 4f       	sbci	r24, 0xFF	; 255
    2078:	49 c3       	rjmp	.+1682   	; 0x270c <__tablejump2__>
    207a:	20 91 35 12 	lds	r18, 0x1235	; 0x801235 <totalBlocks>
    207e:	30 91 36 12 	lds	r19, 0x1236	; 0x801236 <totalBlocks+0x1>
    2082:	40 91 37 12 	lds	r20, 0x1237	; 0x801237 <totalBlocks+0x2>
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    2086:	50 91 38 12 	lds	r21, 0x1238	; 0x801238 <totalBlocks+0x3>
    208a:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <startBlock>
    208e:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <startBlock+0x1>
    2092:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <startBlock+0x2>
    2096:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <startBlock+0x3>
    209a:	1d d2       	rcall	.+1082   	; 0x24d6 <SD_erase>
    209c:	18 2f       	mov	r17, r24
    209e:	8d e0       	ldi	r24, 0x0D	; 13
          TX_NEWLINE;
    20a0:	dc d2       	rcall	.+1464   	; 0x265a <transmitByte>
    20a2:	8a e0       	ldi	r24, 0x0A	; 10
    20a4:	da d2       	rcall	.+1460   	; 0x265a <transmitByte>
    20a6:	11 23       	and	r17, r17
          if(error)
    20a8:	21 f0       	breq	.+8      	; 0x20b2 <main+0x33e>
    20aa:	80 e0       	ldi	r24, 0x00	; 0
              transmitString_F(PSTR("Erase failed.."));
    20ac:	93 e0       	ldi	r25, 0x03	; 3
    20ae:	dd d2       	rcall	.+1466   	; 0x266a <transmitString_F>
    20b0:	00 c1       	rjmp	.+512    	; 0x22b2 <__stack+0xb3>
    20b2:	88 ef       	ldi	r24, 0xF8	; 248
    20b4:	92 e0       	ldi	r25, 0x02	; 2
          else
              transmitString_F(PSTR("Erased!"));
    20b6:	d9 d2       	rcall	.+1458   	; 0x266a <transmitString_F>
    20b8:	fc c0       	rjmp	.+504    	; 0x22b2 <__stack+0xb3>
    20ba:	8d e0       	ldi	r24, 0x0D	; 13
    20bc:	ce d2       	rcall	.+1436   	; 0x265a <transmitByte>
          break;

case '1': TX_NEWLINE;
    20be:	8a e0       	ldi	r24, 0x0A	; 10
    20c0:	cc d2       	rcall	.+1432   	; 0x265a <transmitByte>
    20c2:	8e ed       	ldi	r24, 0xDE	; 222
    20c4:	92 e0       	ldi	r25, 0x02	; 2
    20c6:	d1 d2       	rcall	.+1442   	; 0x266a <transmitString_F>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    20c8:	00 e0       	ldi	r16, 0x00	; 0
    20ca:	10 e0       	ldi	r17, 0x00	; 0
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <main+0x35c>
    20ce:	87 01       	movw	r16, r14
          i=0;
    20d0:	ba d2       	rcall	.+1396   	; 0x2646 <receiveByte>
    20d2:	38 2e       	mov	r3, r24
    20d4:	c2 d2       	rcall	.+1412   	; 0x265a <transmitByte>
            do
            {
                data = receiveByte();
    20d6:	78 01       	movw	r14, r16
    20d8:	ef ef       	ldi	r30, 0xFF	; 255
    20da:	ee 1a       	sub	r14, r30
                transmitByte(data);
    20dc:	fe 0a       	sbc	r15, r30
    20de:	f8 01       	movw	r30, r16
                buffer[i++] = data;
    20e0:	e2 5d       	subi	r30, 0xD2	; 210
    20e2:	fd 4f       	sbci	r31, 0xFD	; 253
    20e4:	30 82       	st	Z, r3
    20e6:	fd e0       	ldi	r31, 0x0D	; 13
    20e8:	3f 12       	cpse	r3, r31
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <main+0x396>
    20ec:	8a e0       	ldi	r24, 0x0A	; 10
                if(data == 0x0d)
    20ee:	b5 d2       	rcall	.+1386   	; 0x265a <transmitByte>
    20f0:	0e 5f       	subi	r16, 0xFE	; 254
    20f2:	1f 4f       	sbci	r17, 0xFF	; 255
                {
                    transmitByte(0x0a);
    20f4:	f7 01       	movw	r30, r14
    20f6:	e2 5d       	subi	r30, 0xD2	; 210
    20f8:	fd 4f       	sbci	r31, 0xFD	; 253
                    buffer[i++] = 0x0a;
    20fa:	8a e0       	ldi	r24, 0x0A	; 10
    20fc:	80 83       	st	Z, r24
    20fe:	01 15       	cp	r16, r1
    2100:	22 e0       	ldi	r18, 0x02	; 2
                }
                if(i == 512) break;
    2102:	12 07       	cpc	r17, r18
    2104:	49 f0       	breq	.+18     	; 0x2118 <main+0x3a4>
    2106:	78 01       	movw	r14, r16
                transmitByte(data);
                buffer[i++] = data;
                if(data == 0x0d)
                {
                    transmitByte(0x0a);
                    buffer[i++] = 0x0a;
    2108:	e2 cf       	rjmp	.-60     	; 0x20ce <main+0x35a>
                }
                if(i == 512) break;
    210a:	e1 14       	cp	r14, r1
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	f8 06       	cpc	r15, r24
            }while (data != '~');
    2110:	19 f0       	breq	.+6      	; 0x2118 <main+0x3a4>
    2112:	9e e7       	ldi	r25, 0x7E	; 126
    2114:	39 12       	cpse	r3, r25

            error = SD_writeSingleBlock (startBlock);
    2116:	db cf       	rjmp	.-74     	; 0x20ce <main+0x35a>
    2118:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <startBlock>
    211c:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <startBlock+0x1>
    2120:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <startBlock+0x2>
    2124:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <startBlock+0x3>
            TX_NEWLINE;
    2128:	2c d2       	rcall	.+1112   	; 0x2582 <SD_writeSingleBlock>
    212a:	18 2f       	mov	r17, r24
    212c:	8d e0       	ldi	r24, 0x0D	; 13
    212e:	95 d2       	rcall	.+1322   	; 0x265a <transmitByte>
            TX_NEWLINE;
    2130:	8a e0       	ldi	r24, 0x0A	; 10
    2132:	93 d2       	rcall	.+1318   	; 0x265a <transmitByte>
    2134:	8d e0       	ldi	r24, 0x0D	; 13
    2136:	91 d2       	rcall	.+1314   	; 0x265a <transmitByte>
    2138:	8a e0       	ldi	r24, 0x0A	; 10
            if(error)
    213a:	8f d2       	rcall	.+1310   	; 0x265a <transmitByte>
    213c:	11 23       	and	r17, r17
                transmitString_F(PSTR("Write failed.."));
    213e:	21 f0       	breq	.+8      	; 0x2148 <main+0x3d4>
    2140:	8f ec       	ldi	r24, 0xCF	; 207
    2142:	92 e0       	ldi	r25, 0x02	; 2
    2144:	92 d2       	rcall	.+1316   	; 0x266a <transmitString_F>
    2146:	b5 c0       	rjmp	.+362    	; 0x22b2 <__stack+0xb3>
            else
                transmitString_F(PSTR("Write successful!"));
    2148:	8d eb       	ldi	r24, 0xBD	; 189
    214a:	92 e0       	ldi	r25, 0x02	; 2
    214c:	8e d2       	rcall	.+1308   	; 0x266a <transmitString_F>
    214e:	b1 c0       	rjmp	.+354    	; 0x22b2 <__stack+0xb3>
            break;

case '2': error = SD_readSingleBlock (startBlock);
    2150:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <startBlock>
    2154:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <startBlock+0x1>
    2158:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <startBlock+0x2>
    215c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <startBlock+0x3>
    2160:	e8 d1       	rcall	.+976    	; 0x2532 <SD_readSingleBlock>
    2162:	18 2f       	mov	r17, r24
          TX_NEWLINE;
    2164:	8d e0       	ldi	r24, 0x0D	; 13
    2166:	79 d2       	rcall	.+1266   	; 0x265a <transmitByte>
    2168:	8a e0       	ldi	r24, 0x0A	; 10
    216a:	77 d2       	rcall	.+1262   	; 0x265a <transmitByte>
    216c:	11 11       	cpse	r17, r1
          if(error)
    216e:	07 c0       	rjmp	.+14     	; 0x217e <main+0x40a>
    2170:	ee e2       	ldi	r30, 0x2E	; 46
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    2172:	f2 e0       	ldi	r31, 0x02	; 2
    2174:	80 81       	ld	r24, Z
    2176:	8e 37       	cpi	r24, 0x7E	; 126
    2178:	09 f0       	breq	.+2      	; 0x217c <main+0x408>
    217a:	b0 c0       	rjmp	.+352    	; 0x22dc <__stack+0xdd>
    217c:	15 c0       	rjmp	.+42     	; 0x21a8 <main+0x434>
    217e:	8f ea       	ldi	r24, 0xAF	; 175
            break;

case '2': error = SD_readSingleBlock (startBlock);
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	73 d2       	rcall	.+1254   	; 0x266a <transmitString_F>
    2184:	96 c0       	rjmp	.+300    	; 0x22b2 <__stack+0xb3>
    2186:	f8 01       	movw	r30, r16
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    2188:	e2 5d       	subi	r30, 0xD2	; 210
    218a:	fd 4f       	sbci	r31, 0xFD	; 253
    218c:	80 81       	ld	r24, Z
    218e:	8e 37       	cpi	r24, 0x7E	; 126
                transmitByte(buffer[i]);
    2190:	59 f0       	breq	.+22     	; 0x21a8 <main+0x434>
    2192:	f8 01       	movw	r30, r16
    2194:	e2 5d       	subi	r30, 0xD2	; 210
    2196:	fd 4f       	sbci	r31, 0xFD	; 253
    2198:	80 81       	ld	r24, Z
    219a:	5f d2       	rcall	.+1214   	; 0x265a <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    219c:	0f 5f       	subi	r16, 0xFF	; 255
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	01 15       	cp	r16, r1
    21a2:	f2 e0       	ldi	r31, 0x02	; 2
    21a4:	1f 07       	cpc	r17, r31
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    21a6:	79 f7       	brne	.-34     	; 0x2186 <main+0x412>
    21a8:	8d e0       	ldi	r24, 0x0D	; 13
    21aa:	57 d2       	rcall	.+1198   	; 0x265a <transmitByte>
    21ac:	8a e0       	ldi	r24, 0x0A	; 10
    21ae:	55 d2       	rcall	.+1194   	; 0x265a <transmitByte>
            TX_NEWLINE;
    21b0:	8d e0       	ldi	r24, 0x0D	; 13
    21b2:	53 d2       	rcall	.+1190   	; 0x265a <transmitByte>
    21b4:	8a e0       	ldi	r24, 0x0A	; 10
    21b6:	51 d2       	rcall	.+1186   	; 0x265a <transmitByte>
    21b8:	8e e9       	ldi	r24, 0x9E	; 158
            transmitString_F(PSTR("Read successful!"));
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	56 d2       	rcall	.+1196   	; 0x266a <transmitString_F>
    21be:	79 c0       	rjmp	.+242    	; 0x22b2 <__stack+0xb3>
    21c0:	8d e0       	ldi	r24, 0x0D	; 13
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    21c2:	4b d2       	rcall	.+1174   	; 0x265a <transmitByte>
    21c4:	8a e0       	ldi	r24, 0x0A	; 10
    21c6:	49 d2       	rcall	.+1170   	; 0x265a <transmitByte>
    21c8:	60 e0       	ldi	r22, 0x00	; 0
  		  findFiles(GET_LIST,0);
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	0e 94 03 08 	call	0x1006	; 0x1006 <findFiles>
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    21d2:	6f c0       	rjmp	.+222    	; 0x22b2 <__stack+0xb3>
    21d4:	8d e0       	ldi	r24, 0x0D	; 13
    21d6:	41 d2       	rcall	.+1154   	; 0x265a <transmitByte>
    21d8:	8a e0       	ldi	r24, 0x0A	; 10
		  TX_NEWLINE;
    21da:	3f d2       	rcall	.+1150   	; 0x265a <transmitByte>
    21dc:	8d e0       	ldi	r24, 0x0D	; 13
    21de:	3d d2       	rcall	.+1146   	; 0x265a <transmitByte>
    21e0:	8a e0       	ldi	r24, 0x0A	; 10
    21e2:	3b d2       	rcall	.+1142   	; 0x265a <transmitByte>
    21e4:	8c e8       	ldi	r24, 0x8C	; 140
          transmitString_F(PSTR("Enter file name: "));
    21e6:	92 e0       	ldi	r25, 0x02	; 2
    21e8:	40 d2       	rcall	.+1152   	; 0x266a <transmitString_F>
    21ea:	fe 01       	movw	r30, r28
    21ec:	31 96       	adiw	r30, 0x01	; 1
    21ee:	11 92       	st	Z+, r1
    21f0:	ec 15       	cp	r30, r12
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    21f2:	fd 05       	cpc	r31, r13
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    21f4:	e1 f7       	brne	.-8      	; 0x21ee <main+0x47a>
    21f6:	21 2c       	mov	r2, r1
    21f8:	31 2c       	mov	r3, r1
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <main+0x48a>
    21fc:	1c 01       	movw	r2, r24
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
			transmitByte(data);
            fileName[i++] = data;
    21fe:	23 d2       	rcall	.+1094   	; 0x2646 <receiveByte>
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    2200:	18 2f       	mov	r17, r24
    2202:	8d 30       	cpi	r24, 0x0D	; 13
    2204:	29 f1       	breq	.+74     	; 0x2250 <__stack+0x51>
            if(data == 0x0d) break;  //'ENTER' key pressed
    2206:	88 30       	cpi	r24, 0x08	; 8
    2208:	69 f4       	brne	.+26     	; 0x2224 <__stack+0x25>
			if(data == 0x08)	//'Back Space' key pressed
    220a:	21 14       	cp	r2, r1
    220c:	31 04       	cpc	r3, r1
	 		{ 
	   			if(i != 0)
    220e:	b9 f3       	breq	.-18     	; 0x21fe <main+0x48a>
    2210:	88 e0       	ldi	r24, 0x08	; 8
    2212:	23 d2       	rcall	.+1094   	; 0x265a <transmitByte>
	   			{ 
	     			transmitByte(data);
    2214:	80 e2       	ldi	r24, 0x20	; 32
    2216:	21 d2       	rcall	.+1090   	; 0x265a <transmitByte>
    2218:	88 e0       	ldi	r24, 0x08	; 8
					transmitByte(' '); 
    221a:	1f d2       	rcall	.+1086   	; 0x265a <transmitByte>
    221c:	21 e0       	ldi	r18, 0x01	; 1
    221e:	22 1a       	sub	r2, r18
	     			transmitByte(data); 
    2220:	31 08       	sbc	r3, r1
    2222:	ed cf       	rjmp	.-38     	; 0x21fe <main+0x48a>
    2224:	80 ee       	ldi	r24, 0xE0	; 224
	     			i--; 
    2226:	81 0f       	add	r24, r17
    2228:	8f 35       	cpi	r24, 0x5F	; 95
    222a:	48 f7       	brcc	.-46     	; 0x21fe <main+0x48a>
    222c:	81 2f       	mov	r24, r17
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    222e:	15 d2       	rcall	.+1066   	; 0x265a <transmitByte>
    2230:	c1 01       	movw	r24, r2
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	e1 e0       	ldi	r30, 0x01	; 1
			transmitByte(data);
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	ec 0f       	add	r30, r28
    223a:	fd 1f       	adc	r31, r29
            fileName[i++] = data;
    223c:	e2 0d       	add	r30, r2
    223e:	f3 1d       	adc	r31, r3
    2240:	10 83       	st	Z, r17
    2242:	8d 30       	cpi	r24, 0x0D	; 13
    2244:	91 05       	cpc	r25, r1
    2246:	d1 f6       	brne	.-76     	; 0x21fc <main+0x488>
    2248:	86 e7       	ldi	r24, 0x76	; 118
    224a:	92 e0       	ldi	r25, 0x02	; 2
    224c:	0e d2       	rcall	.+1052   	; 0x266a <transmitString_F>
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    224e:	31 c0       	rjmp	.+98     	; 0x22b2 <__stack+0xb3>
    2250:	8d e0       	ldi	r24, 0x0D	; 13
    2252:	28 16       	cp	r2, r24
    2254:	31 04       	cpc	r3, r1
    2256:	68 f5       	brcc	.+90     	; 0x22b2 <__stack+0xb3>
    2258:	8d e0       	ldi	r24, 0x0D	; 13
    225a:	ff d1       	rcall	.+1022   	; 0x265a <transmitByte>
    225c:	8a e0       	ldi	r24, 0x0A	; 10
          }
          if(i>12) break;
    225e:	fd d1       	rcall	.+1018   	; 0x265a <transmitByte>
    2260:	96 e3       	ldi	r25, 0x36	; 54
    2262:	e9 12       	cpse	r14, r25
    2264:	06 c0       	rjmp	.+12     	; 0x2272 <__stack+0x73>
       
	      TX_NEWLINE;
    2266:	be 01       	movw	r22, r28
    2268:	6f 5f       	subi	r22, 0xFF	; 255
    226a:	7f 4f       	sbci	r23, 0xFF	; 255
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	bb d8       	rcall	.-3722   	; 0x13e6 <readFile>
    2270:	20 c0       	rjmp	.+64     	; 0x22b2 <__stack+0xb3>
		  if(option == '6')
    2272:	e7 e3       	ldi	r30, 0x37	; 55
    2274:	ee 12       	cpse	r14, r30
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <__stack+0x81>
		     readFile( READ, fileName);
    2278:	ce 01       	movw	r24, r28
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	8b d9       	rcall	.-3306   	; 0x1594 <writeFile>
    227e:	19 c0       	rjmp	.+50     	; 0x22b2 <__stack+0xb3>
    2280:	f8 e3       	ldi	r31, 0x38	; 56
    2282:	ef 12       	cpse	r14, r31
    2284:	16 c0       	rjmp	.+44     	; 0x22b2 <__stack+0xb3>
		  if(option == '7')
    2286:	ce 01       	movw	r24, r28
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	78 d9       	rcall	.-3344   	; 0x157c <deleteFile>
		  	 writeFile(fileName);
    228c:	12 c0       	rjmp	.+36     	; 0x22b2 <__stack+0xb3>
    228e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <memoryStatistics>
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <__stack+0xb3>
    2294:	8d e0       	ldi	r24, 0x0D	; 13
 		  if(option == '8')
    2296:	e1 d1       	rcall	.+962    	; 0x265a <transmitByte>
    2298:	8a e0       	ldi	r24, 0x0A	; 10
    229a:	df d1       	rcall	.+958    	; 0x265a <transmitByte>
		     deleteFile(fileName);
    229c:	8d e0       	ldi	r24, 0x0D	; 13
    229e:	dd d1       	rcall	.+954    	; 0x265a <transmitByte>
    22a0:	8a e0       	ldi	r24, 0x0A	; 10
    22a2:	db d1       	rcall	.+950    	; 0x265a <transmitByte>
    22a4:	85 e6       	ldi	r24, 0x65	; 101
          break;

case '9': memoryStatistics();
    22a6:	92 e0       	ldi	r25, 0x02	; 2
    22a8:	e0 d1       	rcall	.+960    	; 0x266a <transmitString_F>
          break;
    22aa:	8d e0       	ldi	r24, 0x0D	; 13

default: TX_NEWLINE;
    22ac:	d6 d1       	rcall	.+940    	; 0x265a <transmitByte>
    22ae:	8a e0       	ldi	r24, 0x0A	; 10
    22b0:	d4 d1       	rcall	.+936    	; 0x265a <transmitByte>
    22b2:	8d e0       	ldi	r24, 0x0D	; 13
    22b4:	d2 d1       	rcall	.+932    	; 0x265a <transmitByte>
    22b6:	8a e0       	ldi	r24, 0x0A	; 10
         TX_NEWLINE;
    22b8:	d0 d1       	rcall	.+928    	; 0x265a <transmitByte>
    22ba:	dd cd       	rjmp	.-1094   	; 0x1e76 <main+0x102>
    22bc:	80 91 3f 12 	lds	r24, 0x123F	; 0x80123f <cardType>
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <__stack+0xc7>
         transmitString_F(PSTR(" Invalid option!"));
    22c4:	a6 cd       	rjmp	.-1204   	; 0x1e12 <main+0x9e>
    22c6:	83 30       	cpi	r24, 0x03	; 3
    22c8:	09 f4       	brne	.+2      	; 0x22cc <__stack+0xcd>
    22ca:	a7 cd       	rjmp	.-1202   	; 0x1e1a <main+0xa6>
         TX_NEWLINE;
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <__stack+0xd3>
    22d0:	a8 cd       	rjmp	.-1200   	; 0x1e22 <main+0xae>
    22d2:	9b cd       	rjmp	.-1226   	; 0x1e0a <main+0x96>
    22d4:	81 30       	cpi	r24, 0x01	; 1
    22d6:	09 f0       	breq	.+2      	; 0x22da <__stack+0xdb>
}

TX_NEWLINE;
    22d8:	92 cd       	rjmp	.-1244   	; 0x1dfe <main+0x8a>
    22da:	8e cd       	rjmp	.-1252   	; 0x1df8 <main+0x84>
    22dc:	ee e2       	ldi	r30, 0x2E	; 46
    22de:	f2 e0       	ldi	r31, 0x02	; 2
    22e0:	80 81       	ld	r24, Z
    22e2:	bb d1       	rcall	.+886    	; 0x265a <transmitByte>
    22e4:	01 e0       	ldi	r16, 0x01	; 1
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));

  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
    22e6:	10 e0       	ldi	r17, 0x00	; 0
    22e8:	4e cf       	rjmp	.-356    	; 0x2186 <main+0x412>

000022ea <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    22ea:	cf 92       	push	r12
    22ec:	df 92       	push	r13
    22ee:	ef 92       	push	r14
    22f0:	ff 92       	push	r15
    22f2:	1f 93       	push	r17
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	18 2f       	mov	r17, r24
    22fa:	6a 01       	movw	r12, r20
    22fc:	7b 01       	movw	r14, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    22fe:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <SDHC_flag>
    2302:	81 11       	cpse	r24, r1
    2304:	15 c0       	rjmp	.+42     	; 0x2330 <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
    2306:	8f ee       	ldi	r24, 0xEF	; 239
    2308:	81 0f       	add	r24, r17
    230a:	82 30       	cpi	r24, 0x02	; 2
    230c:	40 f0       	brcs	.+16     	; 0x231e <SD_sendCommand+0x34>
   cmd == READ_MULTIPLE_BLOCKS  ||
    230e:	88 ee       	ldi	r24, 0xE8	; 232
    2310:	81 0f       	add	r24, r17
    2312:	82 30       	cpi	r24, 0x02	; 2
    2314:	20 f0       	brcs	.+8      	; 0x231e <SD_sendCommand+0x34>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
    2316:	80 ee       	ldi	r24, 0xE0	; 224
    2318:	81 0f       	add	r24, r17
    231a:	82 30       	cpi	r24, 0x02	; 2
    231c:	48 f4       	brcc	.+18     	; 0x2330 <SD_sendCommand+0x46>
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    231e:	0b 2e       	mov	r0, r27
    2320:	b9 e0       	ldi	r27, 0x09	; 9
    2322:	cc 0c       	add	r12, r12
    2324:	dd 1c       	adc	r13, r13
    2326:	ee 1c       	adc	r14, r14
    2328:	ff 1c       	adc	r15, r15
    232a:	ba 95       	dec	r27
    232c:	d1 f7       	brne	.-12     	; 0x2322 <SD_sendCommand+0x38>
    232e:	b0 2d       	mov	r27, r0
   }	   

SD_CS_ASSERT;
    2330:	a5 98       	cbi	0x14, 5	; 20

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    2332:	81 2f       	mov	r24, r17
    2334:	80 64       	ori	r24, 0x40	; 64
    2336:	6a d1       	rcall	.+724    	; 0x260c <SPI_transmit>
SPI_transmit(arg>>24);
    2338:	8f 2d       	mov	r24, r15
    233a:	68 d1       	rcall	.+720    	; 0x260c <SPI_transmit>
SPI_transmit(arg>>16);
    233c:	8e 2d       	mov	r24, r14
    233e:	66 d1       	rcall	.+716    	; 0x260c <SPI_transmit>
SPI_transmit(arg>>8);
    2340:	8d 2d       	mov	r24, r13
    2342:	64 d1       	rcall	.+712    	; 0x260c <SPI_transmit>
SPI_transmit(arg);
    2344:	8c 2d       	mov	r24, r12
    2346:	62 d1       	rcall	.+708    	; 0x260c <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    2348:	18 30       	cpi	r17, 0x08	; 8
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    234a:	19 f4       	brne	.+6      	; 0x2352 <SD_sendCommand+0x68>
    234c:	87 e8       	ldi	r24, 0x87	; 135
    234e:	5e d1       	rcall	.+700    	; 0x260c <SPI_transmit>
    2350:	06 c0       	rjmp	.+12     	; 0x235e <SD_sendCommand+0x74>
else 
  SPI_transmit(0x95); 
    2352:	85 e9       	ldi	r24, 0x95	; 149
    2354:	5b d1       	rcall	.+694    	; 0x260c <SPI_transmit>
    2356:	03 c0       	rjmp	.+6      	; 0x235e <SD_sendCommand+0x74>
    2358:	c1 50       	subi	r28, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    235a:	11 f4       	brne	.+4      	; 0x2360 <SD_sendCommand+0x76>
    235c:	15 c0       	rjmp	.+42     	; 0x2388 <SD_sendCommand+0x9e>
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    235e:	c0 e0       	ldi	r28, 0x00	; 0
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    2360:	5b d1       	rcall	.+694    	; 0x2618 <SPI_receive>
    2362:	d8 2f       	mov	r29, r24
    2364:	8f 3f       	cpi	r24, 0xFF	; 255
    2366:	c1 f3       	breq	.-16     	; 0x2358 <SD_sendCommand+0x6e>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    2368:	81 11       	cpse	r24, r1
    236a:	0e c0       	rjmp	.+28     	; 0x2388 <SD_sendCommand+0x9e>
    236c:	1a 33       	cpi	r17, 0x3A	; 58
    236e:	61 f4       	brne	.+24     	; 0x2388 <SD_sendCommand+0x9e>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    2370:	53 d1       	rcall	.+678    	; 0x2618 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    2372:	86 ff       	sbrs	r24, 6
    2374:	04 c0       	rjmp	.+8      	; 0x237e <SD_sendCommand+0x94>
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	80 93 34 12 	sts	0x1234, r24	; 0x801234 <SDHC_flag>
  else SDHC_flag = 0;
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <SD_sendCommand+0x98>

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    237e:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <SDHC_flag>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    2382:	4a d1       	rcall	.+660    	; 0x2618 <SPI_receive>
    2384:	49 d1       	rcall	.+658    	; 0x2618 <SPI_receive>
  SPI_receive(); 
    2386:	48 d1       	rcall	.+656    	; 0x2618 <SPI_receive>
    2388:	47 d1       	rcall	.+654    	; 0x2618 <SPI_receive>
}

SPI_receive(); //extra 8 CLK
    238a:	a5 9a       	sbi	0x14, 5	; 20
    238c:	8d 2f       	mov	r24, r29
SD_CS_DEASSERT;
    238e:	df 91       	pop	r29

return response; //return state
}
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	ff 90       	pop	r15
    2396:	ef 90       	pop	r14
    2398:	df 90       	pop	r13
    239a:	cf 90       	pop	r12
    239c:	08 95       	ret

0000239e <SD_init>:
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	1a e0       	ldi	r17, 0x0A	; 10
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    23a8:	8f ef       	ldi	r24, 0xFF	; 255
    23aa:	30 d1       	rcall	.+608    	; 0x260c <SPI_transmit>
    23ac:	11 50       	subi	r17, 0x01	; 1
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    23ae:	e1 f7       	brne	.-8      	; 0x23a8 <SD_init+0xa>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    23b0:	a5 98       	cbi	0x14, 5	; 20
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	ba 01       	movw	r22, r20
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	97 df       	rcall	.-210    	; 0x22ea <SD_sendCommand>
   response = SD_sendCommand(SEND_OP_COND, 0); //send 'reset & go idle' command
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	50 e0       	ldi	r21, 0x00	; 0
    23c0:	ba 01       	movw	r22, r20
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	92 df       	rcall	.-220    	; 0x22ea <SD_sendCommand>
    23c6:	c0 e2       	ldi	r28, 0x20	; 32
    23c8:	d0 e0       	ldi	r29, 0x00	; 0
    23ca:	0d c0       	rjmp	.+26     	; 0x23e6 <SD_init+0x48>

SD_CS_ASSERT;
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	ba 01       	movw	r22, r20
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	8a df       	rcall	.-236    	; 0x22ea <SD_sendCommand>
   response = SD_sendCommand(SEND_OP_COND, 0); //send 'reset & go idle' command
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	ba 01       	movw	r22, r20
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	85 df       	rcall	.-246    	; 0x22ea <SD_sendCommand>
    23e0:	21 97       	sbiw	r28, 0x01	; 1
   retry++;
   if(retry>0x20) 
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <SD_init+0x48>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    23e4:	68 c0       	rjmp	.+208    	; 0x24b6 <SD_init+0x118>

SD_CS_DEASSERT;
    23e6:	81 30       	cpi	r24, 0x01	; 1
SPI_transmit (0xff);
    23e8:	89 f7       	brne	.-30     	; 0x23cc <SD_init+0x2e>
    23ea:	a5 9a       	sbi	0x14, 5	; 20
    23ec:	8f ef       	ldi	r24, 0xFF	; 255
SPI_transmit (0xff);
    23ee:	0e d1       	rcall	.+540    	; 0x260c <SPI_transmit>
    23f0:	8f ef       	ldi	r24, 0xFF	; 255

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    23f2:	0c d1       	rcall	.+536    	; 0x260c <SPI_transmit>
    23f4:	4a ea       	ldi	r20, 0xAA	; 170
    23f6:	51 e0       	ldi	r21, 0x01	; 1
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	70 e0       	ldi	r23, 0x00	; 0
    23fc:	88 e0       	ldi	r24, 0x08	; 8
    23fe:	75 df       	rcall	.-278    	; 0x22ea <SD_sendCommand>
    2400:	ce ef       	ldi	r28, 0xFE	; 254
    2402:	d0 e0       	ldi	r29, 0x00	; 0
    2404:	11 c0       	rjmp	.+34     	; 0x2428 <SD_init+0x8a>
    2406:	4a ea       	ldi	r20, 0xAA	; 170
    2408:	51 e0       	ldi	r21, 0x01	; 1
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	88 e0       	ldi	r24, 0x08	; 8
retry++;
if(retry>0xfe) 
    2410:	6c df       	rcall	.-296    	; 0x22ea <SD_sendCommand>
   {
	  TX_NEWLINE;
    2412:	21 97       	sbiw	r28, 0x01	; 1
    2414:	49 f4       	brne	.+18     	; 0x2428 <SD_init+0x8a>
    2416:	8d e0       	ldi	r24, 0x0D	; 13
    2418:	20 d1       	rcall	.+576    	; 0x265a <transmitByte>
    241a:	8a e0       	ldi	r24, 0x0A	; 10
    241c:	1e d1       	rcall	.+572    	; 0x265a <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <cardType>
	  break;
    2424:	01 e0       	ldi	r16, 0x01	; 1
   } //time out

}while(response != 0x01);
    2426:	03 c0       	rjmp	.+6      	; 0x242e <SD_init+0x90>
    2428:	81 30       	cpi	r24, 0x01	; 1

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    242a:	69 f7       	brne	.-38     	; 0x2406 <SD_init+0x68>
    242c:	02 e0       	ldi	r16, 0x02	; 2
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	ba 01       	movw	r22, r20
    2434:	87 e3       	ldi	r24, 0x37	; 55
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    2436:	59 df       	rcall	.-334    	; 0x22ea <SD_sendCommand>
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	70 e4       	ldi	r23, 0x40	; 64
    2440:	89 e2       	ldi	r24, 0x29	; 41
    2442:	53 df       	rcall	.-346    	; 0x22ea <SD_sendCommand>
    2444:	ce ef       	ldi	r28, 0xFE	; 254

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    2446:	d0 e0       	ldi	r29, 0x00	; 0
    2448:	13 c0       	rjmp	.+38     	; 0x2470 <SD_init+0xd2>
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	50 e0       	ldi	r21, 0x00	; 0
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    244e:	ba 01       	movw	r22, r20
    2450:	87 e3       	ldi	r24, 0x37	; 55
    2452:	4b df       	rcall	.-362    	; 0x22ea <SD_sendCommand>
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	70 e4       	ldi	r23, 0x40	; 64
    245c:	89 e2       	ldi	r24, 0x29	; 41

retry++;
if(retry>0xfe) 
    245e:	45 df       	rcall	.-374    	; 0x22ea <SD_sendCommand>
   {
      TX_NEWLINE;
    2460:	21 97       	sbiw	r28, 0x01	; 1
    2462:	31 f4       	brne	.+12     	; 0x2470 <SD_init+0xd2>
    2464:	8d e0       	ldi	r24, 0x0D	; 13
    2466:	f9 d0       	rcall	.+498    	; 0x265a <transmitByte>
    2468:	8a e0       	ldi	r24, 0x0A	; 10
	  return 2;  //time out, card initialization failed
    246a:	f7 d0       	rcall	.+494    	; 0x265a <transmitByte>
   } 

}while(response != 0x00);
    246c:	12 e0       	ldi	r17, 0x02	; 2


retry = 0;
SDHC_flag = 0;
    246e:	2d c0       	rjmp	.+90     	; 0x24ca <SD_init+0x12c>
    2470:	81 11       	cpse	r24, r1

if (SD_version == 2)
    2472:	eb cf       	rjmp	.-42     	; 0x244a <SD_init+0xac>
    2474:	10 92 34 12 	sts	0x1234, r1	; 0x801234 <SDHC_flag>
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    2478:	02 30       	cpi	r16, 0x02	; 2
    247a:	39 f5       	brne	.+78     	; 0x24ca <SD_init+0x12c>
    247c:	1e c0       	rjmp	.+60     	; 0x24ba <SD_init+0x11c>
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	ba 01       	movw	r22, r20
    2484:	8a e3       	ldi	r24, 0x3A	; 58
	 retry++;
	 if(retry>0xfe) 
    2486:	31 df       	rcall	.-414    	; 0x22ea <SD_sendCommand>
     {
       TX_NEWLINE;
    2488:	21 97       	sbiw	r28, 0x01	; 1
    248a:	39 f4       	brne	.+14     	; 0x249a <SD_init+0xfc>
    248c:	8d e0       	ldi	r24, 0x0D	; 13
    248e:	e5 d0       	rcall	.+458    	; 0x265a <transmitByte>
    2490:	8a e0       	ldi	r24, 0x0A	; 10
    2492:	e3 d0       	rcall	.+454    	; 0x265a <transmitByte>
	   cardType = 0;
    2494:	10 92 3f 12 	sts	0x123F, r1	; 0x80123f <cardType>
	   break;
    2498:	02 c0       	rjmp	.+4      	; 0x249e <SD_init+0x100>
     } //time out

   }while(response != 0x00);
    249a:	81 11       	cpse	r24, r1

   if(SDHC_flag == 1) cardType = 2;
    249c:	f0 cf       	rjmp	.-32     	; 0x247e <SD_init+0xe0>
    249e:	80 91 34 12 	lds	r24, 0x1234	; 0x801234 <SDHC_flag>
    24a2:	81 30       	cpi	r24, 0x01	; 1
    24a4:	21 f4       	brne	.+8      	; 0x24ae <SD_init+0x110>
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <cardType>
   else cardType = 3;
    24ac:	0e c0       	rjmp	.+28     	; 0x24ca <SD_init+0x12c>
    24ae:	83 e0       	ldi	r24, 0x03	; 3
    24b0:	80 93 3f 12 	sts	0x123F, r24	; 0x80123f <cardType>
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
   response = SD_sendCommand(SEND_OP_COND, 0); //send 'reset & go idle' command
   retry++;
   if(retry>0x20) 
   	  return 1;   //time out, card not detected
    24b4:	0a c0       	rjmp	.+20     	; 0x24ca <SD_init+0x12c>
    24b6:	11 e0       	ldi	r17, 0x01	; 1

if (SD_version == 2)
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    24b8:	08 c0       	rjmp	.+16     	; 0x24ca <SD_init+0x12c>
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	ba 01       	movw	r22, r20
    24c0:	8a e3       	ldi	r24, 0x3A	; 58
    24c2:	13 df       	rcall	.-474    	; 0x22ea <SD_sendCommand>
    24c4:	ce ef       	ldi	r28, 0xFE	; 254
    24c6:	d0 e0       	ldi	r29, 0x00	; 0
    24c8:	e8 cf       	rjmp	.-48     	; 0x249a <SD_init+0xfc>
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    24ca:	81 2f       	mov	r24, r17
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	08 95       	ret

000024d6 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    24d6:	8f 92       	push	r8
    24d8:	9f 92       	push	r9
    24da:	af 92       	push	r10
    24dc:	bf 92       	push	r11
    24de:	cf 92       	push	r12
    24e0:	df 92       	push	r13
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	6b 01       	movw	r12, r22
    24e8:	7c 01       	movw	r14, r24
    24ea:	49 01       	movw	r8, r18
    24ec:	5a 01       	movw	r10, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    24ee:	ab 01       	movw	r20, r22
    24f0:	bc 01       	movw	r22, r24
    24f2:	80 e2       	ldi	r24, 0x20	; 32
    24f4:	fa de       	rcall	.-524    	; 0x22ea <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    24f6:	81 11       	cpse	r24, r1
    24f8:	13 c0       	rjmp	.+38     	; 0x2520 <SD_erase+0x4a>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    24fa:	b5 01       	movw	r22, r10
    24fc:	a4 01       	movw	r20, r8
    24fe:	41 50       	subi	r20, 0x01	; 1
    2500:	51 09       	sbc	r21, r1
    2502:	61 09       	sbc	r22, r1
    2504:	71 09       	sbc	r23, r1
    2506:	4c 0d       	add	r20, r12
    2508:	5d 1d       	adc	r21, r13
    250a:	6e 1d       	adc	r22, r14
    250c:	7f 1d       	adc	r23, r15
    250e:	81 e2       	ldi	r24, 0x21	; 33
    2510:	ec de       	rcall	.-552    	; 0x22ea <SD_sendCommand>
if(response != 0x00)
    2512:	81 11       	cpse	r24, r1
    2514:	05 c0       	rjmp	.+10     	; 0x2520 <SD_erase+0x4a>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	ba 01       	movw	r22, r20
    251c:	86 e2       	ldi	r24, 0x26	; 38
    251e:	e5 de       	rcall	.-566    	; 0x22ea <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    2520:	ff 90       	pop	r15
    2522:	ef 90       	pop	r14
    2524:	df 90       	pop	r13
    2526:	cf 90       	pop	r12
    2528:	bf 90       	pop	r11
    252a:	af 90       	pop	r10
    252c:	9f 90       	pop	r9
    252e:	8f 90       	pop	r8
    2530:	08 95       	ret

00002532 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	ab 01       	movw	r20, r22
    2538:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    253a:	81 e1       	ldi	r24, 0x11	; 17
    253c:	d6 de       	rcall	.-596    	; 0x22ea <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    253e:	81 11       	cpse	r24, r1
    2540:	1d c0       	rjmp	.+58     	; 0x257c <SD_readSingleBlock+0x4a>

SD_CS_ASSERT;
    2542:	a5 98       	cbi	0x14, 5	; 20

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2544:	c0 e0       	ldi	r28, 0x00	; 0
    2546:	d0 e0       	ldi	r29, 0x00	; 0
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <SD_readSingleBlock+0x22>
    254a:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    254c:	19 f4       	brne	.+6      	; 0x2554 <SD_readSingleBlock+0x22>
    254e:	a5 9a       	sbi	0x14, 5	; 20
    2550:	81 e0       	ldi	r24, 0x01	; 1
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2552:	14 c0       	rjmp	.+40     	; 0x257c <SD_readSingleBlock+0x4a>
    2554:	61 d0       	rcall	.+194    	; 0x2618 <SPI_receive>
    2556:	8e 3f       	cpi	r24, 0xFE	; 254
    2558:	c1 f7       	brne	.-16     	; 0x254a <SD_readSingleBlock+0x18>
    255a:	c0 e0       	ldi	r28, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    255c:	d0 e0       	ldi	r29, 0x00	; 0
    255e:	5c d0       	rcall	.+184    	; 0x2618 <SPI_receive>
    2560:	fe 01       	movw	r30, r28
    2562:	e2 5d       	subi	r30, 0xD2	; 210
    2564:	fd 4f       	sbci	r31, 0xFD	; 253
    2566:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    2568:	21 96       	adiw	r28, 0x01	; 1
    256a:	c1 15       	cp	r28, r1
    256c:	82 e0       	ldi	r24, 0x02	; 2
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    256e:	d8 07       	cpc	r29, r24
    2570:	b1 f7       	brne	.-20     	; 0x255e <SD_readSingleBlock+0x2c>
SPI_receive();
    2572:	52 d0       	rcall	.+164    	; 0x2618 <SPI_receive>
    2574:	51 d0       	rcall	.+162    	; 0x2618 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    2576:	50 d0       	rcall	.+160    	; 0x2618 <SPI_receive>
    2578:	a5 9a       	sbi	0x14, 5	; 20
SD_CS_DEASSERT;
    257a:	80 e0       	ldi	r24, 0x00	; 0

return 0;
    257c:	df 91       	pop	r29
}
    257e:	cf 91       	pop	r28
    2580:	08 95       	ret

00002582 <SD_writeSingleBlock>:
    2582:	cf 93       	push	r28
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    2584:	df 93       	push	r29
    2586:	ab 01       	movw	r20, r22
    2588:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    258a:	88 e1       	ldi	r24, 0x18	; 24
    258c:	ae de       	rcall	.-676    	; 0x22ea <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    258e:	81 11       	cpse	r24, r1
    2590:	36 c0       	rjmp	.+108    	; 0x25fe <SD_writeSingleBlock+0x7c>

SD_CS_ASSERT;
    2592:	a5 98       	cbi	0x14, 5	; 20

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2594:	8e ef       	ldi	r24, 0xFE	; 254
    2596:	3a d0       	rcall	.+116    	; 0x260c <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    2598:	c0 e0       	ldi	r28, 0x00	; 0
    259a:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    259c:	fe 01       	movw	r30, r28
    259e:	e2 5d       	subi	r30, 0xD2	; 210
    25a0:	fd 4f       	sbci	r31, 0xFD	; 253
    25a2:	80 81       	ld	r24, Z
    25a4:	33 d0       	rcall	.+102    	; 0x260c <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    25a6:	21 96       	adiw	r28, 0x01	; 1
    25a8:	c1 15       	cp	r28, r1
    25aa:	22 e0       	ldi	r18, 0x02	; 2
    25ac:	d2 07       	cpc	r29, r18
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    25ae:	b1 f7       	brne	.-20     	; 0x259c <SD_writeSingleBlock+0x1a>
SPI_transmit(0xff);
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	2c d0       	rcall	.+88     	; 0x260c <SPI_transmit>
    25b4:	8f ef       	ldi	r24, 0xFF	; 255

response = SPI_receive();
    25b6:	2a d0       	rcall	.+84     	; 0x260c <SPI_transmit>
    25b8:	2f d0       	rcall	.+94     	; 0x2618 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    25ba:	98 2f       	mov	r25, r24
    25bc:	9f 71       	andi	r25, 0x1F	; 31
    25be:	95 30       	cpi	r25, 0x05	; 5
    25c0:	39 f0       	breq	.+14     	; 0x25d0 <SD_writeSingleBlock+0x4e>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    25c2:	a5 9a       	sbi	0x14, 5	; 20
  return response;
    25c4:	1c c0       	rjmp	.+56     	; 0x25fe <SD_writeSingleBlock+0x7c>
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    25c6:	21 96       	adiw	r28, 0x01	; 1
    25c8:	29 f4       	brne	.+10     	; 0x25d4 <SD_writeSingleBlock+0x52>
    25ca:	a5 9a       	sbi	0x14, 5	; 20
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	17 c0       	rjmp	.+46     	; 0x25fe <SD_writeSingleBlock+0x7c>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    25d0:	c0 e0       	ldi	r28, 0x00	; 0
    25d2:	d0 e0       	ldi	r29, 0x00	; 0
    25d4:	21 d0       	rcall	.+66     	; 0x2618 <SPI_receive>
    25d6:	88 23       	and	r24, r24
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    25d8:	b1 f3       	breq	.-20     	; 0x25c6 <SD_writeSingleBlock+0x44>
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    25da:	a5 9a       	sbi	0x14, 5	; 20
    25dc:	8f ef       	ldi	r24, 0xFF	; 255
    25de:	16 d0       	rcall	.+44     	; 0x260c <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    25e0:	a5 98       	cbi	0x14, 5	; 20

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    25e2:	08 c0       	rjmp	.+16     	; 0x25f4 <SD_writeSingleBlock+0x72>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    25e4:	ce 01       	movw	r24, r28
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	21 96       	adiw	r28, 0x01	; 1
    25ea:	19 f4       	brne	.+6      	; 0x25f2 <SD_writeSingleBlock+0x70>
    25ec:	a5 9a       	sbi	0x14, 5	; 20
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	06 c0       	rjmp	.+12     	; 0x25fe <SD_writeSingleBlock+0x7c>

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    25f2:	ec 01       	movw	r28, r24
    25f4:	11 d0       	rcall	.+34     	; 0x2618 <SPI_receive>
    25f6:	88 23       	and	r24, r24
    25f8:	a9 f3       	breq	.-22     	; 0x25e4 <SD_writeSingleBlock+0x62>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    25fa:	a5 9a       	sbi	0x14, 5	; 20

return 0;
    25fc:	80 e0       	ldi	r24, 0x00	; 0
}
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	08 95       	ret

00002604 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
	SPCR = ((1<<SPE)|       // SPI Enable					(1 = Enable, 0 = Disable)					Datasheet S. 197 (Kapitel 21.2.1)
    2604:	83 e5       	ldi	r24, 0x53	; 83
    2606:	8c bd       	out	0x2c, r24	; 44
	(1<<MSTR)|              // Master/Slave select			(0 = Slave, 1 = Master)						Datasheet S. 197 (Kapitel 21.2.1)
	(1<<SPR1)|(1<<SPR0)|    // SPI Clock Rate				(Divider Systemclock 16MHz)					Datasheet S. 198 (Kapitel 21.2.1)
	(0<<CPOL)|              // Clock Polarity when idle		(0 = low, 1 = SCK high)						Datasheet S. 197 (Kapitel 21.2.1)
	(0<<CPHA));             // Clock Phase edge sampling	(0 = leading, 1 = trailing edge sampling)	Datasheet S. 197 (Kapitel 21.2.1)

	SPSR = (0<<SPI2X);      // Double Clock Rate			(0 = Disable, 1 = Enable)					Datasheet S. 198 (Kapitel 21.2.1)
    2608:	1d bc       	out	0x2d, r1	; 45
    260a:	08 95       	ret

0000260c <SPI_transmit>:
}

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    260c:	8e bd       	out	0x2e, r24	; 46

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    260e:	0d b4       	in	r0, 0x2d	; 45
    2610:	07 fe       	sbrs	r0, 7
    2612:	fd cf       	rjmp	.-6      	; 0x260e <SPI_transmit+0x2>
data = SPDR;
    2614:	8e b5       	in	r24, 0x2e	; 46

return(data);
}
    2616:	08 95       	ret

00002618 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));
    261c:	0d b4       	in	r0, 0x2d	; 45
    261e:	07 fe       	sbrs	r0, 7
    2620:	fd cf       	rjmp	.-6      	; 0x261c <SPI_receive+0x4>
data = SPDR;
    2622:	8e b5       	in	r24, 0x2e	; 46

// Return data register
return data;
}
    2624:	08 95       	ret

00002626 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
    2626:	e1 ec       	ldi	r30, 0xC1	; 193
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    262c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 UBRR0H = (((16000000UL/16/9600) -1) >> 8);
    2630:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 UBRR0L = ((16000000UL/16/9600) -1);
    2634:	87 e6       	ldi	r24, 0x67	; 103
    2636:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    263a:	88 e9       	ldi	r24, 0x98	; 152
    263c:	80 83       	st	Z, r24
 UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    263e:	86 e0       	ldi	r24, 0x06	; 6
    2640:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2644:	08 95       	ret

00002646 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSR0A & (1<<RXC0))); 	// Wait for incomming data
    2646:	e0 ec       	ldi	r30, 0xC0	; 192
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	88 23       	and	r24, r24
    264e:	ec f7       	brge	.-6      	; 0x264a <receiveByte+0x4>
	
	status = UCSR0A;
    2650:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	data = UDR0;
    2654:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
	return(data);
}
    2658:	08 95       	ret

0000265a <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSR0A & (1<<UDRE0)) )
    265a:	e0 ec       	ldi	r30, 0xC0	; 192
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	90 81       	ld	r25, Z
    2660:	95 ff       	sbrs	r25, 5
    2662:	fd cf       	rjmp	.-6      	; 0x265e <transmitByte+0x4>
		; 			                /* Wait for empty transmit buffer */
	UDR0 = data; 			        /* Start transmition */
    2664:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2668:	08 95       	ret

0000266a <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
    2670:	fc 01       	movw	r30, r24
    2672:	84 91       	lpm	r24, Z
    2674:	88 23       	and	r24, r24
    2676:	41 f0       	breq	.+16     	; 0x2688 <transmitString_F+0x1e>
    2678:	fe 01       	movw	r30, r28
   transmitByte(pgm_read_byte(&(*string++)));
    267a:	21 96       	adiw	r28, 0x01	; 1
    267c:	84 91       	lpm	r24, Z
    267e:	ed df       	rcall	.-38     	; 0x265a <transmitByte>
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    2680:	fe 01       	movw	r30, r28
    2682:	84 91       	lpm	r24, Z
    2684:	81 11       	cpse	r24, r1
    2686:	f8 cf       	rjmp	.-16     	; 0x2678 <transmitString_F+0xe>
   transmitByte(pgm_read_byte(&(*string++)));
}
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	08 95       	ret

0000268e <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	ec 01       	movw	r28, r24
  while (*string)
    2694:	88 81       	ld	r24, Y
    2696:	88 23       	and	r24, r24
    2698:	29 f0       	breq	.+10     	; 0x26a4 <transmitString+0x16>
    269a:	21 96       	adiw	r28, 0x01	; 1
   transmitByte(*string++);
    269c:	de df       	rcall	.-68     	; 0x265a <transmitByte>
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    269e:	89 91       	ld	r24, Y+
    26a0:	81 11       	cpse	r24, r1
    26a2:	fc cf       	rjmp	.-8      	; 0x269c <transmitString+0xe>
   transmitByte(*string++);
}
    26a4:	df 91       	pop	r29
    26a6:	cf 91       	pop	r28
    26a8:	08 95       	ret

000026aa <__mulsi3>:
    26aa:	db 01       	movw	r26, r22
    26ac:	8f 93       	push	r24
    26ae:	9f 93       	push	r25
    26b0:	44 d0       	rcall	.+136    	; 0x273a <__muluhisi3>
    26b2:	bf 91       	pop	r27
    26b4:	af 91       	pop	r26
    26b6:	a2 9f       	mul	r26, r18
    26b8:	80 0d       	add	r24, r0
    26ba:	91 1d       	adc	r25, r1
    26bc:	a3 9f       	mul	r26, r19
    26be:	90 0d       	add	r25, r0
    26c0:	b2 9f       	mul	r27, r18
    26c2:	90 0d       	add	r25, r0
    26c4:	11 24       	eor	r1, r1
    26c6:	08 95       	ret

000026c8 <__udivmodsi4>:
    26c8:	a1 e2       	ldi	r26, 0x21	; 33
    26ca:	1a 2e       	mov	r1, r26
    26cc:	aa 1b       	sub	r26, r26
    26ce:	bb 1b       	sub	r27, r27
    26d0:	fd 01       	movw	r30, r26
    26d2:	0d c0       	rjmp	.+26     	; 0x26ee <__udivmodsi4_ep>

000026d4 <__udivmodsi4_loop>:
    26d4:	aa 1f       	adc	r26, r26
    26d6:	bb 1f       	adc	r27, r27
    26d8:	ee 1f       	adc	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	a2 17       	cp	r26, r18
    26de:	b3 07       	cpc	r27, r19
    26e0:	e4 07       	cpc	r30, r20
    26e2:	f5 07       	cpc	r31, r21
    26e4:	20 f0       	brcs	.+8      	; 0x26ee <__udivmodsi4_ep>
    26e6:	a2 1b       	sub	r26, r18
    26e8:	b3 0b       	sbc	r27, r19
    26ea:	e4 0b       	sbc	r30, r20
    26ec:	f5 0b       	sbc	r31, r21

000026ee <__udivmodsi4_ep>:
    26ee:	66 1f       	adc	r22, r22
    26f0:	77 1f       	adc	r23, r23
    26f2:	88 1f       	adc	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	1a 94       	dec	r1
    26f8:	69 f7       	brne	.-38     	; 0x26d4 <__udivmodsi4_loop>
    26fa:	60 95       	com	r22
    26fc:	70 95       	com	r23
    26fe:	80 95       	com	r24
    2700:	90 95       	com	r25
    2702:	9b 01       	movw	r18, r22
    2704:	ac 01       	movw	r20, r24
    2706:	bd 01       	movw	r22, r26
    2708:	cf 01       	movw	r24, r30
    270a:	08 95       	ret

0000270c <__tablejump2__>:
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	88 1f       	adc	r24, r24
    2712:	8b bf       	out	0x3b, r24	; 59
    2714:	07 90       	elpm	r0, Z+
    2716:	f6 91       	elpm	r31, Z
    2718:	e0 2d       	mov	r30, r0
    271a:	19 94       	eijmp

0000271c <__umulhisi3>:
    271c:	a2 9f       	mul	r26, r18
    271e:	b0 01       	movw	r22, r0
    2720:	b3 9f       	mul	r27, r19
    2722:	c0 01       	movw	r24, r0
    2724:	a3 9f       	mul	r26, r19
    2726:	70 0d       	add	r23, r0
    2728:	81 1d       	adc	r24, r1
    272a:	11 24       	eor	r1, r1
    272c:	91 1d       	adc	r25, r1
    272e:	b2 9f       	mul	r27, r18
    2730:	70 0d       	add	r23, r0
    2732:	81 1d       	adc	r24, r1
    2734:	11 24       	eor	r1, r1
    2736:	91 1d       	adc	r25, r1
    2738:	08 95       	ret

0000273a <__muluhisi3>:
    273a:	f0 df       	rcall	.-32     	; 0x271c <__umulhisi3>
    273c:	a5 9f       	mul	r26, r21
    273e:	90 0d       	add	r25, r0
    2740:	b4 9f       	mul	r27, r20
    2742:	90 0d       	add	r25, r0
    2744:	a4 9f       	mul	r26, r20
    2746:	80 0d       	add	r24, r0
    2748:	91 1d       	adc	r25, r1
    274a:	11 24       	eor	r1, r1
    274c:	08 95       	ret

0000274e <_exit>:
    274e:	f8 94       	cli

00002750 <__stop_program>:
    2750:	ff cf       	rjmp	.-2      	; 0x2750 <__stop_program>
