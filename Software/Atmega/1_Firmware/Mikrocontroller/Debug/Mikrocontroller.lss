
Mikrocontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d6  00800200  00000e48  00000edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009ca  008004d6  008004d6  000011b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000942e  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bf7  00000000  00000000  0000aa0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000401e  00000000  00000000  0000c601  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000106c  00000000  00000000  00010620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a3c  00000000  00000000  0001168c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005bb8  00000000  00000000  000130c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  00018c80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c5       	rjmp	.+2690   	; 0xae8 <__vector_25>
  66:	00 00       	nop
  68:	02 c5       	rjmp	.+2564   	; 0xa6e <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	56 c5       	rjmp	.+2732   	; 0xb3e <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a0 c5       	rjmp	.+2880   	; 0xc0e <__vector_51>
  ce:	00 00       	nop
  d0:	61 c5       	rjmp	.+2754   	; 0xb94 <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	02 c6       	rjmp	.+3076   	; 0xcde <__vector_54>
  da:	00 00       	nop
  dc:	c3 c5       	rjmp	.+2950   	; 0xc64 <__vector_55>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	14 e0       	ldi	r17, 0x04	; 4
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e4       	ldi	r30, 0x48	; 72
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 3d       	cpi	r26, 0xD6	; 214
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2e e0       	ldi	r18, 0x0E	; 14
 110:	a6 ed       	ldi	r26, 0xD6	; 214
 112:	b4 e0       	ldi	r27, 0x04	; 4
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 3a       	cpi	r26, 0xA0	; 160
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0a d6       	rcall	.+3092   	; 0xd34 <main>
 120:	91 c6       	rjmp	.+3362   	; 0xe44 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <SD_startup>:
	}
}

void SD_startup(void)
{
	cardType = 0;
 124:	10 92 5d 0d 	sts	0x0D5D, r1	; 0x800d5d <cardType>

	for (i=0; i<10; i++)
 128:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <i+0x1>
 12c:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <i>
	{
		error = SD_init();
 130:	da d2       	rcall	.+1460   	; 0x6e6 <SD_init>
 132:	80 93 5e 0d 	sts	0x0D5E, r24	; 0x800d5e <error>
		if(!error) break;
 136:	88 23       	and	r24, r24
 138:	09 f4       	brne	.+2      	; 0x13c <SD_startup+0x18>
 13a:	48 c0       	rjmp	.+144    	; 0x1cc <SD_startup+0xa8>

void SD_startup(void)
{
	cardType = 0;

	for (i=0; i<10; i++)
 13c:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <i>
 140:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <i+0x1>
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	30 93 1f 07 	sts	0x071F, r19	; 0x80071f <i+0x1>
 14c:	20 93 1e 07 	sts	0x071E, r18	; 0x80071e <i>
 150:	2a 30       	cpi	r18, 0x0A	; 10
 152:	31 05       	cpc	r19, r1
 154:	68 f3       	brcs	.-38     	; 0x130 <SD_startup+0xc>
 156:	43 c0       	rjmp	.+134    	; 0x1de <SD_startup+0xba>
		if(!error) break;
	}

	if(error)
	{
		if(error == 1) Uart_Transmit_IT_PC((char*)("SD card not detected..\r"));
 158:	81 e2       	ldi	r24, 0x21	; 33
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	60 d4       	rcall	.+2240   	; 0xa1e <Uart_Transmit_IT_PC>
		if(error == 2) Uart_Transmit_IT_PC((char*)("Card Initialization failed..\r"));
 15e:	80 91 5e 0d 	lds	r24, 0x0D5E	; 0x800d5e <error>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	19 f4       	brne	.+6      	; 0x16c <SD_startup+0x48>
 166:	89 e3       	ldi	r24, 0x39	; 57
 168:	93 e0       	ldi	r25, 0x03	; 3
	nextion_change_page(FEHLERANZEIGE);
 16a:	59 d4       	rcall	.+2226   	; 0xa1e <Uart_Transmit_IT_PC>
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	68 d0       	rcall	.+208    	; 0x240 <nextion_change_page>
	nextion_setText("fehlertxt","Fehler festgestellt!\\rKeine SD-Karte vorhanden.\\rBitte einfügen und\\rneu starten.");
 170:	67 e5       	ldi	r22, 0x57	; 87
 172:	73 e0       	ldi	r23, 0x03	; 3
 174:	89 ea       	ldi	r24, 0xA9	; 169
 176:	93 e0       	ldi	r25, 0x03	; 3
 178:	7f d0       	rcall	.+254    	; 0x278 <nextion_setText>
		// 		while(1);  //wait here forever if error in SD init
		}else{
		
		switch (cardType)
		{
			case 1:Uart_Transmit_IT_PC(("Standard Capacity Card (Ver 1.x) Detected!\r"));
 17a:	0f c0       	rjmp	.+30     	; 0x19a <SD_startup+0x76>
 17c:	83 eb       	ldi	r24, 0xB3	; 179
 17e:	93 e0       	ldi	r25, 0x03	; 3
			break;
 180:	4e d4       	rcall	.+2204   	; 0xa1e <Uart_Transmit_IT_PC>
			case 2:Uart_Transmit_IT_PC(("High Capacity Card Detected!\r"));
 182:	0b c0       	rjmp	.+22     	; 0x19a <SD_startup+0x76>
 184:	8f ed       	ldi	r24, 0xDF	; 223
 186:	93 e0       	ldi	r25, 0x03	; 3
			break;
			case 3:Uart_Transmit_IT_PC(("Standard Capacity Card (Ver 2.x) Detected!\r"));
 188:	4a d4       	rcall	.+2196   	; 0xa1e <Uart_Transmit_IT_PC>
 18a:	07 c0       	rjmp	.+14     	; 0x19a <SD_startup+0x76>
 18c:	8d ef       	ldi	r24, 0xFD	; 253
 18e:	93 e0       	ldi	r25, 0x03	; 3
			break;
 190:	46 d4       	rcall	.+2188   	; 0xa1e <Uart_Transmit_IT_PC>
			default:Uart_Transmit_IT_PC(("Unknown SD Card Detected!\r"));
 192:	03 c0       	rjmp	.+6      	; 0x19a <SD_startup+0x76>
 194:	89 e2       	ldi	r24, 0x29	; 41
 196:	94 e0       	ldi	r25, 0x04	; 4
 198:	42 d4       	rcall	.+2180   	; 0xa1e <Uart_Transmit_IT_PC>
			break;
		}
	}

	SPI_HIGH_SPEED;	//SCK - 4 MHz
 19a:	80 e5       	ldi	r24, 0x50	; 80
 19c:	8c bd       	out	0x2c, r24	; 44
 19e:	8d b5       	in	r24, 0x2d	; 45
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	8d bd       	out	0x2d, r24	; 45
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	8f e9       	ldi	r24, 0x9F	; 159
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <SD_startup+0x84>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <SD_startup+0x8a>
	_delay_ms(1);   //some delay


	FAT32_active = 1;
 1ae:	00 00       	nop
 1b0:	81 e0       	ldi	r24, 0x01	; 1
	error = getBootSectorData (); //read boot sector and keep necessary data in global variables
 1b2:	80 93 96 0e 	sts	0x0E96, r24	; 0x800e96 <FAT32_active>
 1b6:	81 d1       	rcall	.+770    	; 0x4ba <getBootSectorData>
 1b8:	80 93 5e 0d 	sts	0x0D5E, r24	; 0x800d5e <error>
	if(error)
 1bc:	88 23       	and	r24, r24
	{
		Uart_Transmit_IT_PC (("FAT32 not found!\r\n"));  //FAT32 incompatible drive
 1be:	99 f0       	breq	.+38     	; 0x1e6 <SD_startup+0xc2>
 1c0:	84 e4       	ldi	r24, 0x44	; 68
 1c2:	94 e0       	ldi	r25, 0x04	; 4
 1c4:	2c d4       	rcall	.+2136   	; 0xa1e <Uart_Transmit_IT_PC>
		FAT32_active = 0;
 1c6:	10 92 96 0e 	sts	0x0E96, r1	; 0x800e96 <FAT32_active>
	}
// 	findFiles(GET_LIST,0);

}
 1ca:	08 95       	ret
	nextion_change_page(FEHLERANZEIGE);
	nextion_setText("fehlertxt","Fehler festgestellt!\\rKeine SD-Karte vorhanden.\\rBitte einfügen und\\rneu starten.");
		// 		while(1);  //wait here forever if error in SD init
		}else{
		
		switch (cardType)
 1cc:	80 91 5d 0d 	lds	r24, 0x0D5D	; 0x800d5d <cardType>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	c1 f2       	breq	.-80     	; 0x184 <SD_startup+0x60>
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	d1 f2       	breq	.-76     	; 0x18c <SD_startup+0x68>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	e1 f6       	brne	.-72     	; 0x194 <SD_startup+0x70>
 1dc:	cf cf       	rjmp	.-98     	; 0x17c <SD_startup+0x58>
		if(!error) break;
	}

	if(error)
	{
		if(error == 1) Uart_Transmit_IT_PC((char*)("SD card not detected..\r"));
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <SD_startup+0xc0>
 1e2:	bd cf       	rjmp	.-134    	; 0x15e <SD_startup+0x3a>
 1e4:	b9 cf       	rjmp	.-142    	; 0x158 <SD_startup+0x34>
 1e6:	08 95       	ret

000001e8 <IO_init>:

//Init_IO

void IO_init(void)
{
	LED_DDR = LED_OUTPUT_MASK;
 1e8:	88 e7       	ldi	r24, 0x78	; 120
 1ea:	80 bb       	out	0x10, r24	; 16
	SPI_DDR = SPI_OUTPUT_MASK;
 1ec:	87 e8       	ldi	r24, 0x87	; 135
 1ee:	84 b9       	out	0x04, r24	; 4
	SPI2_DDR = SPI2_OUTPUT_MASK;
 1f0:	88 e6       	ldi	r24, 0x68	; 104
 1f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	PUMPE_DDR = PUMPE_OUTPUT_MASK;
 1f6:	8c ef       	ldi	r24, 0xFC	; 252
 1f8:	81 b9       	out	0x01, r24	; 1
	PUMPE_DDR2 = PUMPE2_OUTPUT_MASK;
 1fa:	84 e2       	ldi	r24, 0x24	; 36
 1fc:	83 bb       	out	0x13, r24	; 19
	PUMPE_DDR3 = PUMPE3_OUTPUT_MASK;
 1fe:	8c e7       	ldi	r24, 0x7C	; 124
 200:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	RFID_DDR = RFID_OUTPUT_MASK;
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	87 b9       	out	0x07, r24	; 7
	FLUSS_DDR = 0b00000000;
 208:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	SPI_PORT |= SPI_MISO_PIN;
 20c:	93 b1       	in	r25, 0x03	; 3
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	89 2b       	or	r24, r25
 212:	85 b9       	out	0x05, r24	; 5
 214:	08 95       	ret

00000216 <endConversation>:
	endConversation();
}


void endConversation(void)
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <endConversation+0x6>
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	unsigned char end [4]= {255,255,255,'\0'};
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	89 83       	std	Y+1, r24	; 0x01
 226:	8a 83       	std	Y+2, r24	; 0x02
 228:	8b 83       	std	Y+3, r24	; 0x03
 22a:	1c 82       	std	Y+4, r1	; 0x04
	Uart_Transmit_IT_Display(( char *)end);
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	08 d4       	rcall	.+2064   	; 0xa42 <Uart_Transmit_IT_Display>
	{
		Uart_Transmit_IT_PC((char *)end);
		Uart_Transmit_IT_PC("\r\n");
		_delay_ms(20);
	}
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <nextion_change_page>:
 */ 

#include "Nextion_Display.h"

void nextion_change_page(char page)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	00 d0       	rcall	.+0      	; 0x246 <nextion_change_page+0x6>
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
	char * pge = "page ";
 	char buff[3] = {0};
 24a:	19 82       	std	Y+1, r1	; 0x01
 24c:	1a 82       	std	Y+2, r1	; 0x02
 24e:	1b 82       	std	Y+3, r1	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	4a e0       	ldi	r20, 0x0A	; 10
 254:	be 01       	movw	r22, r28
 256:	6f 5f       	subi	r22, 0xFF	; 255
 258:	7f 4f       	sbci	r23, 0xFF	; 255
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	c0 d5       	rcall	.+2944   	; 0xdde <__itoa_ncheck>
	itoa((page-1),(char *)buff,10);
	Uart_Transmit_IT_Display(pge);
 25e:	8b ea       	ldi	r24, 0xAB	; 171
 260:	94 e0       	ldi	r25, 0x04	; 4
 262:	ef d3       	rcall	.+2014   	; 0xa42 <Uart_Transmit_IT_Display>
	Uart_Transmit_IT_Display((char *)buff);
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
	if (DEBUG_DISPLAY)
	{
		Uart_Transmit_IT_PC(pge);
		Uart_Transmit_IT_PC((char *)buff);
	}
	endConversation();
 268:	ec d3       	rcall	.+2008   	; 0xa42 <Uart_Transmit_IT_Display>
 26a:	d5 df       	rcall	.-86     	; 0x216 <endConversation>
}
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <nextion_setText>:

void nextion_setText(char * object, char * text)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	eb 01       	movw	r28, r22
	char * txt = ".txt=";
	char * slash = "\"";
	Uart_Transmit_IT_Display(object);
 27e:	e1 d3       	rcall	.+1986   	; 0xa42 <Uart_Transmit_IT_Display>
	Uart_Transmit_IT_Display(txt);
 280:	81 eb       	ldi	r24, 0xB1	; 177
 282:	94 e0       	ldi	r25, 0x04	; 4
 284:	de d3       	rcall	.+1980   	; 0xa42 <Uart_Transmit_IT_Display>
	Uart_Transmit_IT_Display(slash);
 286:	87 eb       	ldi	r24, 0xB7	; 183
 288:	94 e0       	ldi	r25, 0x04	; 4
	Uart_Transmit_IT_Display(text);
 28a:	db d3       	rcall	.+1974   	; 0xa42 <Uart_Transmit_IT_Display>
 28c:	ce 01       	movw	r24, r28
	Uart_Transmit_IT_Display(slash);
 28e:	d9 d3       	rcall	.+1970   	; 0xa42 <Uart_Transmit_IT_Display>
 290:	87 eb       	ldi	r24, 0xB7	; 183
 292:	94 e0       	ldi	r25, 0x04	; 4
 294:	d6 d3       	rcall	.+1964   	; 0xa42 <Uart_Transmit_IT_Display>
		Uart_Transmit_IT_PC(slash);
		Uart_Transmit_IT_PC(text);
		Uart_Transmit_IT_PC(slash);
	}
	
	endConversation();
 296:	bf df       	rcall	.-130    	; 0x216 <endConversation>
 298:	df 91       	pop	r29
}
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <RB_init>:
 29e:	fc 01       	movw	r30, r24
		}
	}
	rb->tail = tail;
	
	return 1;
}
 2a0:	11 82       	std	Z+1, r1	; 0x01
 2a2:	10 82       	st	Z, r1
 2a4:	08 95       	ret

000002a6 <RB_free>:
 2a6:	fc 01       	movw	r30, r24
 2a8:	90 81       	ld	r25, Z
 2aa:	81 81       	ldd	r24, Z+1	; 0x01
 2ac:	98 17       	cp	r25, r24
 2ae:	20 f0       	brcs	.+8      	; 0x2b8 <RB_free+0x12>
 2b0:	98 1b       	sub	r25, r24
 2b2:	89 2f       	mov	r24, r25
 2b4:	80 95       	com	r24
 2b6:	08 95       	ret
 2b8:	89 1b       	sub	r24, r25
 2ba:	08 95       	ret

000002bc <RB_length>:
 2bc:	fc 01       	movw	r30, r24
 2be:	20 81       	ld	r18, Z
 2c0:	91 81       	ldd	r25, Z+1	; 0x01
 2c2:	29 17       	cp	r18, r25
 2c4:	18 f0       	brcs	.+6      	; 0x2cc <RB_length+0x10>
 2c6:	82 2f       	mov	r24, r18
 2c8:	89 1b       	sub	r24, r25
 2ca:	08 95       	ret
 2cc:	89 2f       	mov	r24, r25
 2ce:	82 1b       	sub	r24, r18
 2d0:	80 95       	com	r24
 2d2:	08 95       	ret

000002d4 <RB_readByte>:
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ec 01       	movw	r28, r24
 2da:	f0 df       	rcall	.-32     	; 0x2bc <RB_length>
 2dc:	88 23       	and	r24, r24
 2de:	59 f0       	breq	.+22     	; 0x2f6 <RB_readByte+0x22>
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	98 0f       	add	r25, r24
 2e6:	fe 01       	movw	r30, r28
 2e8:	e8 0f       	add	r30, r24
 2ea:	f1 1d       	adc	r31, r1
 2ec:	82 81       	ldd	r24, Z+2	; 0x02
 2ee:	9f 3f       	cpi	r25, 0xFF	; 255
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <RB_readByte+0x20>
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	99 83       	std	Y+1, r25	; 0x01
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <RB_writeByte>:
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	16 2f       	mov	r17, r22
 308:	08 81       	ld	r16, Y
 30a:	cd df       	rcall	.-102    	; 0x2a6 <RB_free>
 30c:	88 23       	and	r24, r24
 30e:	f1 f3       	breq	.-4      	; 0x30c <RB_writeByte+0x10>
 310:	11 11       	cpse	r17, r1
 312:	01 c0       	rjmp	.+2      	; 0x316 <RB_writeByte+0x1a>
 314:	1f ef       	ldi	r17, 0xFF	; 255
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 0f       	add	r24, r16
 31a:	fe 01       	movw	r30, r28
 31c:	e0 0f       	add	r30, r16
 31e:	f1 1d       	adc	r31, r1
 320:	12 83       	std	Z+2, r17	; 0x02
 322:	8f 3f       	cpi	r24, 0xFF	; 255
 324:	09 f4       	brne	.+2      	; 0x328 <RB_writeByte+0x2c>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	88 83       	st	Y, r24
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <RB_write>:

unsigned char RB_write( ring_buffer_t *rb, char *data, unsigned char datal )
{
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
	unsigned char head;
	
	head = rb->head;
	
	if (datal == 0)
 340:	44 23       	and	r20, r20
 342:	d9 f0       	breq	.+54     	; 0x37a <RB_write+0x44>
 344:	c4 2f       	mov	r28, r20
 346:	d7 2f       	mov	r29, r23
 348:	f6 2e       	mov	r15, r22
 34a:	8c 01       	movw	r16, r24
	{
		return  0;
	}
	
	while(RB_free(rb) < datal);
 34c:	ac df       	rcall	.-168    	; 0x2a6 <RB_free>
 34e:	8c 17       	cp	r24, r28
 350:	f0 f3       	brcs	.-4      	; 0x34e <RB_write+0x18>
 352:	15 c0       	rjmp	.+42     	; 0x37e <RB_write+0x48>
	
	while(datal--)
	{
		rb->data[head++] = *data++;
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	29 0f       	add	r18, r25
 358:	31 91       	ld	r19, Z+
 35a:	d8 01       	movw	r26, r16
 35c:	a9 0f       	add	r26, r25
 35e:	b1 1d       	adc	r27, r1
 360:	12 96       	adiw	r26, 0x02	; 2
 362:	3c 93       	st	X, r19
		if (head >= RING_BUFFER_SIZE)
 364:	2f 3f       	cpi	r18, 0xFF	; 255
 366:	11 f4       	brne	.+4      	; 0x36c <RB_write+0x36>
		{
			head = 0;
 368:	98 2f       	mov	r25, r24
 36a:	01 c0       	rjmp	.+2      	; 0x36e <RB_write+0x38>
	
	while(RB_free(rb) < datal);
	
	while(datal--)
	{
		rb->data[head++] = *data++;
 36c:	92 2f       	mov	r25, r18
		return  0;
	}
	
	while(RB_free(rb) < datal);
	
	while(datal--)
 36e:	41 50       	subi	r20, 0x01	; 1
 370:	88 f7       	brcc	.-30     	; 0x354 <RB_write+0x1e>
		{
			head = 0;
		}
	}
	
	rb->head = head;
 372:	f8 01       	movw	r30, r16
 374:	90 83       	st	Z, r25
	
	return 1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0a c0       	rjmp	.+20     	; 0x38e <RB_write+0x58>
	
	head = rb->head;
	
	if (datal == 0)
	{
		return  0;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 c0       	rjmp	.+16     	; 0x38e <RB_write+0x58>

unsigned char RB_write( ring_buffer_t *rb, char *data, unsigned char datal )
{
	unsigned char head;
	
	head = rb->head;
 37e:	f8 01       	movw	r30, r16
 380:	90 81       	ld	r25, Z
		return  0;
	}
	
	while(RB_free(rb) < datal);
	
	while(datal--)
 382:	4f ef       	ldi	r20, 0xFF	; 255
 384:	4c 0f       	add	r20, r28
 386:	ef 2d       	mov	r30, r15
 388:	fd 2f       	mov	r31, r29
	{
		rb->data[head++] = *data++;
		if (head >= RING_BUFFER_SIZE)
		{
			head = 0;
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	e3 cf       	rjmp	.-58     	; 0x354 <RB_write+0x1e>
	}
	
	rb->head = head;
	
	return 1;
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	08 95       	ret

0000039a <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
 39a:	cf 92       	push	r12
 39c:	df 92       	push	r13
 39e:	ef 92       	push	r14
 3a0:	ff 92       	push	r15
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	d8 2f       	mov	r29, r24
 3a8:	c6 2f       	mov	r28, r22
 3aa:	69 01       	movw	r12, r18
 3ac:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
 3ae:	80 91 2b 0a 	lds	r24, 0x0A2B	; 0x800a2b <unusedSectors>
 3b2:	90 91 2c 0a 	lds	r25, 0x0A2C	; 0x800a2c <unusedSectors+0x1>
 3b6:	a0 91 2d 0a 	lds	r26, 0x0A2D	; 0x800a2d <unusedSectors+0x2>
 3ba:	b0 91 2e 0a 	lds	r27, 0x0A2E	; 0x800a2e <unusedSectors+0x3>
 3be:	bc 01       	movw	r22, r24
 3c0:	cd 01       	movw	r24, r26
 3c2:	6f 5f       	subi	r22, 0xFF	; 255
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	8f 4f       	sbci	r24, 0xFF	; 255
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	16 d2       	rcall	.+1068   	; 0x7f8 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
 3cc:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <buffer>
 3d0:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <buffer+0x1>
 3d4:	a0 91 27 08 	lds	r26, 0x0827	; 0x800827 <buffer+0x2>
 3d8:	b0 91 28 08 	lds	r27, 0x0828	; 0x800828 <buffer+0x3>
 3dc:	82 35       	cpi	r24, 0x52	; 82
 3de:	92 45       	sbci	r25, 0x52	; 82
 3e0:	a1 46       	sbci	r26, 0x61	; 97
 3e2:	b1 44       	sbci	r27, 0x41	; 65
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <getSetFreeCluster+0x4e>
 3e6:	57 c0       	rjmp	.+174    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 3e8:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <buffer+0x1e4>
 3ec:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <buffer+0x1e5>
 3f0:	a0 91 0b 0a 	lds	r26, 0x0A0B	; 0x800a0b <buffer+0x1e6>
 3f4:	b0 91 0c 0a 	lds	r27, 0x0A0C	; 0x800a0c <buffer+0x1e7>
 3f8:	82 37       	cpi	r24, 0x72	; 114
 3fa:	92 47       	sbci	r25, 0x72	; 114
 3fc:	a1 44       	sbci	r26, 0x41	; 65
 3fe:	b1 46       	sbci	r27, 0x61	; 97
 400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	4d c0       	rjmp	.+154    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 404:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <buffer+0x1fc>
 408:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <buffer+0x1fd>
 40c:	a0 91 23 0a 	lds	r26, 0x0A23	; 0x800a23 <buffer+0x1fe>
 410:	b0 91 24 0a 	lds	r27, 0x0A24	; 0x800a24 <buffer+0x1ff>
 414:	00 97       	sbiw	r24, 0x00	; 0
 416:	a5 45       	sbci	r26, 0x55	; 85
 418:	ba 4a       	sbci	r27, 0xAA	; 170
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	44 c0       	rjmp	.+136    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
  return 0xffffffff;

 if(get_set == GET)
 41e:	c1 11       	cpse	r28, r1
 420:	14 c0       	rjmp	.+40     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 {
   if(totOrNext == TOTAL_FREE)
 422:	d1 30       	cpi	r29, 0x01	; 1
 424:	49 f4       	brne	.+18     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
      return(FS->freeClusterCount);
 426:	60 91 0d 0a 	lds	r22, 0x0A0D	; 0x800a0d <buffer+0x1e8>
 42a:	70 91 0e 0a 	lds	r23, 0x0A0E	; 0x800a0e <buffer+0x1e9>
 42e:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <buffer+0x1ea>
 432:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <buffer+0x1eb>
 436:	3a c0       	rjmp	.+116    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
 438:	60 91 11 0a 	lds	r22, 0x0A11	; 0x800a11 <buffer+0x1ec>
 43c:	70 91 12 0a 	lds	r23, 0x0A12	; 0x800a12 <buffer+0x1ed>
 440:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <buffer+0x1ee>
 444:	90 91 14 0a 	lds	r25, 0x0A14	; 0x800a14 <buffer+0x1ef>
 448:	31 c0       	rjmp	.+98     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
 44a:	d1 30       	cpi	r29, 0x01	; 1
 44c:	49 f4       	brne	.+18     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
      FS->freeClusterCount = FSEntry;
 44e:	c0 92 0d 0a 	sts	0x0A0D, r12	; 0x800a0d <buffer+0x1e8>
 452:	d0 92 0e 0a 	sts	0x0A0E, r13	; 0x800a0e <buffer+0x1e9>
 456:	e0 92 0f 0a 	sts	0x0A0F, r14	; 0x800a0f <buffer+0x1ea>
 45a:	f0 92 10 0a 	sts	0x0A10, r15	; 0x800a10 <buffer+0x1eb>
 45e:	08 c0       	rjmp	.+16     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
 460:	c0 92 11 0a 	sts	0x0A11, r12	; 0x800a11 <buffer+0x1ec>
 464:	d0 92 12 0a 	sts	0x0A12, r13	; 0x800a12 <buffer+0x1ed>
 468:	e0 92 13 0a 	sts	0x0A13, r14	; 0x800a13 <buffer+0x1ee>
 46c:	f0 92 14 0a 	sts	0x0A14, r15	; 0x800a14 <buffer+0x1ef>
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 470:	80 91 2b 0a 	lds	r24, 0x0A2B	; 0x800a2b <unusedSectors>
 474:	90 91 2c 0a 	lds	r25, 0x0A2C	; 0x800a2c <unusedSectors+0x1>
 478:	a0 91 2d 0a 	lds	r26, 0x0A2D	; 0x800a2d <unusedSectors+0x2>
 47c:	b0 91 2e 0a 	lds	r27, 0x0A2E	; 0x800a2e <unusedSectors+0x3>
 480:	bc 01       	movw	r22, r24
 482:	cd 01       	movw	r24, r26
 484:	6f 5f       	subi	r22, 0xFF	; 255
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	8f 4f       	sbci	r24, 0xFF	; 255
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	dd d1       	rcall	.+954    	; 0x848 <SD_writeSingleBlock>
 }
 return 0xffffffff;
 48e:	6f ef       	ldi	r22, 0xFF	; 255
 490:	7f ef       	ldi	r23, 0xFF	; 255
 492:	cb 01       	movw	r24, r22
 494:	0b c0       	rjmp	.+22     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
 496:	6f ef       	ldi	r22, 0xFF	; 255
 498:	7f ef       	ldi	r23, 0xFF	; 255
 49a:	cb 01       	movw	r24, r22
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 49e:	6f ef       	ldi	r22, 0xFF	; 255
 4a0:	7f ef       	ldi	r23, 0xFF	; 255
 4a2:	cb 01       	movw	r24, r22
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a6:	6f ef       	ldi	r22, 0xFF	; 255
 4a8:	7f ef       	ldi	r23, 0xFF	; 255
 4aa:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	08 95       	ret

000004ba <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
 4ba:	ef 92       	push	r14
 4bc:	ff 92       	push	r15
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
 4c6:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <unusedSectors>
 4ca:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <unusedSectors+0x1>
 4ce:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <unusedSectors+0x2>
 4d2:	10 92 2e 0a 	sts	0x0A2E, r1	; 0x800a2e <unusedSectors+0x3>

SD_readSingleBlock(0);
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	cb 01       	movw	r24, r22
 4dc:	8d d1       	rcall	.+794    	; 0x7f8 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
 4de:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <buffer>
 4e2:	8d 7f       	andi	r24, 0xFD	; 253
 4e4:	89 3e       	cpi	r24, 0xE9	; 233
 4e6:	f9 f0       	breq	.+62     	; 0x526 <getBootSectorData+0x6c>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
 4e8:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <buffer+0x1fe>
 4ec:	90 91 24 0a 	lds	r25, 0x0A24	; 0x800a24 <buffer+0x1ff>
 4f0:	85 35       	cpi	r24, 0x55	; 85
 4f2:	9a 4a       	sbci	r25, 0xAA	; 170
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <getBootSectorData+0x3e>
 4f6:	93 c0       	rjmp	.+294    	; 0x61e <getBootSectorData+0x164>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
 4f8:	60 91 eb 09 	lds	r22, 0x09EB	; 0x8009eb <buffer+0x1c6>
 4fc:	70 91 ec 09 	lds	r23, 0x09EC	; 0x8009ec <buffer+0x1c7>
 500:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <buffer+0x1c8>
 504:	90 91 ee 09 	lds	r25, 0x09EE	; 0x8009ee <buffer+0x1c9>
 508:	60 93 2b 0a 	sts	0x0A2B, r22	; 0x800a2b <unusedSectors>
 50c:	70 93 2c 0a 	sts	0x0A2C, r23	; 0x800a2c <unusedSectors+0x1>
 510:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <unusedSectors+0x2>
 514:	90 93 2e 0a 	sts	0x0A2E, r25	; 0x800a2e <unusedSectors+0x3>
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
 518:	6f d1       	rcall	.+734    	; 0x7f8 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
 51a:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <buffer>
 51e:	8d 7f       	andi	r24, 0xFD	; 253
 520:	89 3e       	cpi	r24, 0xE9	; 233
 522:	09 f0       	breq	.+2      	; 0x526 <getBootSectorData+0x6c>
 524:	7e c0       	rjmp	.+252    	; 0x622 <getBootSectorData+0x168>
}

bytesPerSector = bpb->bytesPerSector;
 526:	e5 e2       	ldi	r30, 0x25	; 37
 528:	f8 e0       	ldi	r31, 0x08	; 8
 52a:	83 85       	ldd	r24, Z+11	; 0x0b
 52c:	94 85       	ldd	r25, Z+12	; 0x0c
 52e:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <bytesPerSector+0x1>
 532:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <bytesPerSector>
sectorPerCluster = bpb->sectorPerCluster;
 536:	85 85       	ldd	r24, Z+13	; 0x0d
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <sectorPerCluster+0x1>
 53e:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <sectorPerCluster>
reservedSectorCount = bpb->reservedSectorCount;
 542:	c6 85       	ldd	r28, Z+14	; 0x0e
 544:	d7 85       	ldd	r29, Z+15	; 0x0f
 546:	d0 93 4f 0b 	sts	0x0B4F, r29	; 0x800b4f <reservedSectorCount+0x1>
 54a:	c0 93 4e 0b 	sts	0x0B4E, r28	; 0x800b4e <reservedSectorCount>
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
 54e:	84 a5       	ldd	r24, Z+44	; 0x2c
 550:	95 a5       	ldd	r25, Z+45	; 0x2d
 552:	a6 a5       	ldd	r26, Z+46	; 0x2e
 554:	b7 a5       	ldd	r27, Z+47	; 0x2f
 556:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <rootCluster>
 55a:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <rootCluster+0x1>
 55e:	a0 93 14 06 	sts	0x0614, r26	; 0x800614 <rootCluster+0x2>
 562:	b0 93 15 06 	sts	0x0615, r27	; 0x800615 <rootCluster+0x3>
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
 566:	00 91 4e 0b 	lds	r16, 0x0B4E	; 0x800b4e <reservedSectorCount>
 56a:	10 91 4f 0b 	lds	r17, 0x0B4F	; 0x800b4f <reservedSectorCount+0x1>
 56e:	a0 89       	ldd	r26, Z+16	; 0x10
 570:	24 a1       	ldd	r18, Z+36	; 0x24
 572:	35 a1       	ldd	r19, Z+37	; 0x25
 574:	46 a1       	ldd	r20, Z+38	; 0x26
 576:	57 a1       	ldd	r21, Z+39	; 0x27
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	27 d4       	rcall	.+2126   	; 0xdca <__muluhisi3>
 57c:	ab 01       	movw	r20, r22
 57e:	bc 01       	movw	r22, r24
 580:	84 8d       	ldd	r24, Z+28	; 0x1c
 582:	95 8d       	ldd	r25, Z+29	; 0x1d
 584:	a6 8d       	ldd	r26, Z+30	; 0x1e
 586:	b7 8d       	ldd	r27, Z+31	; 0x1f
 588:	80 0f       	add	r24, r16
 58a:	91 1f       	adc	r25, r17
 58c:	a1 1d       	adc	r26, r1
 58e:	b1 1d       	adc	r27, r1
 590:	84 0f       	add	r24, r20
 592:	95 1f       	adc	r25, r21
 594:	a6 1f       	adc	r26, r22
 596:	b7 1f       	adc	r27, r23
 598:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <firstDataSector>
 59c:	90 93 fc 05 	sts	0x05FC, r25	; 0x8005fc <firstDataSector+0x1>
 5a0:	a0 93 fd 05 	sts	0x05FD, r26	; 0x8005fd <firstDataSector+0x2>
 5a4:	b0 93 fe 05 	sts	0x05FE, r27	; 0x8005fe <firstDataSector+0x3>

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
 5a8:	20 91 26 0a 	lds	r18, 0x0A26	; 0x800a26 <sectorPerCluster>
 5ac:	30 91 27 0a 	lds	r19, 0x0A27	; 0x800a27 <sectorPerCluster+0x1>
 5b0:	80 a1       	ldd	r24, Z+32	; 0x20
 5b2:	91 a1       	ldd	r25, Z+33	; 0x21
 5b4:	a2 a1       	ldd	r26, Z+34	; 0x22
 5b6:	b3 a1       	ldd	r27, Z+35	; 0x23
 5b8:	8c 1b       	sub	r24, r28
 5ba:	9d 0b       	sbc	r25, r29
 5bc:	a1 09       	sbc	r26, r1
 5be:	b1 09       	sbc	r27, r1
 5c0:	7c 01       	movw	r14, r24
 5c2:	8d 01       	movw	r16, r26
 5c4:	e4 1a       	sub	r14, r20
 5c6:	f5 0a       	sbc	r15, r21
 5c8:	06 0b       	sbc	r16, r22
 5ca:	17 0b       	sbc	r17, r23
 5cc:	c8 01       	movw	r24, r16
 5ce:	b7 01       	movw	r22, r14
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	c9 d3       	rcall	.+1938   	; 0xd68 <__udivmodsi4>
 5d6:	20 93 08 06 	sts	0x0608, r18	; 0x800608 <totalClusters>
 5da:	30 93 09 06 	sts	0x0609, r19	; 0x800609 <totalClusters+0x1>
 5de:	40 93 0a 06 	sts	0x060A, r20	; 0x80060a <totalClusters+0x2>
 5e2:	50 93 0b 06 	sts	0x060B, r21	; 0x80060b <totalClusters+0x3>

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	a9 01       	movw	r20, r18
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	d4 de       	rcall	.-600    	; 0x39a <getSetFreeCluster>
 5f2:	00 91 08 06 	lds	r16, 0x0608	; 0x800608 <totalClusters>
 5f6:	10 91 09 06 	lds	r17, 0x0609	; 0x800609 <totalClusters+0x1>
 5fa:	20 91 0a 06 	lds	r18, 0x060A	; 0x80060a <totalClusters+0x2>
 5fe:	30 91 0b 06 	lds	r19, 0x060B	; 0x80060b <totalClusters+0x3>
 602:	06 17       	cp	r16, r22
 604:	17 07       	cpc	r17, r23
 606:	28 07       	cpc	r18, r24
 608:	39 07       	cpc	r19, r25
 60a:	20 f4       	brcc	.+8      	; 0x614 <getBootSectorData+0x15a>
     freeClusterCountUpdated = 0;
 60c:	10 92 94 0e 	sts	0x0E94, r1	; 0x800e94 <freeClusterCountUpdated>
else
	 freeClusterCountUpdated = 1;
return 0;
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	08 c0       	rjmp	.+16     	; 0x624 <getBootSectorData+0x16a>
totalClusters = dataSectors / sectorPerCluster;

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 94 0e 	sts	0x0E94, r24	; 0x800e94 <freeClusterCountUpdated>
return 0;
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	03 c0       	rjmp	.+6      	; 0x624 <getBootSectorData+0x16a>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	01 c0       	rjmp	.+2      	; 0x624 <getBootSectorData+0x16a>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
 622:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	ff 90       	pop	r15
 62e:	ef 90       	pop	r14
 630:	08 95       	ret

00000632 <SD_sendCommand>:
response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
if(response != 0x00)
  return response;

return 0; //normal return
}
 632:	cf 92       	push	r12
 634:	df 92       	push	r13
 636:	ef 92       	push	r14
 638:	ff 92       	push	r15
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	18 2f       	mov	r17, r24
 642:	6a 01       	movw	r12, r20
 644:	7b 01       	movw	r14, r22
 646:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <SDHC_flag>
 64a:	81 11       	cpse	r24, r1
 64c:	15 c0       	rjmp	.+42     	; 0x678 <SD_sendCommand+0x46>
 64e:	8f ee       	ldi	r24, 0xEF	; 239
 650:	81 0f       	add	r24, r17
 652:	82 30       	cpi	r24, 0x02	; 2
 654:	40 f0       	brcs	.+16     	; 0x666 <SD_sendCommand+0x34>
 656:	88 ee       	ldi	r24, 0xE8	; 232
 658:	81 0f       	add	r24, r17
 65a:	82 30       	cpi	r24, 0x02	; 2
 65c:	20 f0       	brcs	.+8      	; 0x666 <SD_sendCommand+0x34>
 65e:	80 ee       	ldi	r24, 0xE0	; 224
 660:	81 0f       	add	r24, r17
 662:	82 30       	cpi	r24, 0x02	; 2
 664:	48 f4       	brcc	.+18     	; 0x678 <SD_sendCommand+0x46>
 666:	0b 2e       	mov	r0, r27
 668:	b9 e0       	ldi	r27, 0x09	; 9
 66a:	cc 0c       	add	r12, r12
 66c:	dd 1c       	adc	r13, r13
 66e:	ee 1c       	adc	r14, r14
 670:	ff 1c       	adc	r15, r15
 672:	ba 95       	dec	r27
 674:	d1 f7       	brne	.-12     	; 0x66a <SD_sendCommand+0x38>
 676:	b0 2d       	mov	r27, r0
 678:	a5 98       	cbi	0x14, 5	; 20
 67a:	81 2f       	mov	r24, r17
 67c:	80 64       	ori	r24, 0x40	; 64
 67e:	25 d1       	rcall	.+586    	; 0x8ca <spi_transmit>
 680:	8f 2d       	mov	r24, r15
 682:	23 d1       	rcall	.+582    	; 0x8ca <spi_transmit>
 684:	8e 2d       	mov	r24, r14
 686:	21 d1       	rcall	.+578    	; 0x8ca <spi_transmit>
 688:	8d 2d       	mov	r24, r13
 68a:	1f d1       	rcall	.+574    	; 0x8ca <spi_transmit>
 68c:	8c 2d       	mov	r24, r12
 68e:	1d d1       	rcall	.+570    	; 0x8ca <spi_transmit>
 690:	18 30       	cpi	r17, 0x08	; 8
 692:	19 f4       	brne	.+6      	; 0x69a <SD_sendCommand+0x68>
 694:	87 e8       	ldi	r24, 0x87	; 135
 696:	19 d1       	rcall	.+562    	; 0x8ca <spi_transmit>
 698:	06 c0       	rjmp	.+12     	; 0x6a6 <SD_sendCommand+0x74>
 69a:	85 e9       	ldi	r24, 0x95	; 149
 69c:	16 d1       	rcall	.+556    	; 0x8ca <spi_transmit>
 69e:	03 c0       	rjmp	.+6      	; 0x6a6 <SD_sendCommand+0x74>
 6a0:	c1 50       	subi	r28, 0x01	; 1
 6a2:	11 f4       	brne	.+4      	; 0x6a8 <SD_sendCommand+0x76>
 6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <SD_sendCommand+0x9e>
 6a6:	c0 e0       	ldi	r28, 0x00	; 0
 6a8:	16 d1       	rcall	.+556    	; 0x8d6 <spi_receive>
 6aa:	d8 2f       	mov	r29, r24
 6ac:	8f 3f       	cpi	r24, 0xFF	; 255
 6ae:	c1 f3       	breq	.-16     	; 0x6a0 <SD_sendCommand+0x6e>
 6b0:	81 11       	cpse	r24, r1
 6b2:	0e c0       	rjmp	.+28     	; 0x6d0 <SD_sendCommand+0x9e>
 6b4:	1a 33       	cpi	r17, 0x3A	; 58
 6b6:	61 f4       	brne	.+24     	; 0x6d0 <SD_sendCommand+0x9e>
 6b8:	0e d1       	rcall	.+540    	; 0x8d6 <spi_receive>
 6ba:	86 ff       	sbrs	r24, 6
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <SD_sendCommand+0x94>
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <SDHC_flag>
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <SD_sendCommand+0x98>
 6c6:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <SDHC_flag>
 6ca:	05 d1       	rcall	.+522    	; 0x8d6 <spi_receive>
 6cc:	04 d1       	rcall	.+520    	; 0x8d6 <spi_receive>
 6ce:	03 d1       	rcall	.+518    	; 0x8d6 <spi_receive>
 6d0:	02 d1       	rcall	.+516    	; 0x8d6 <spi_receive>
 6d2:	a5 9a       	sbi	0x14, 5	; 20
 6d4:	8d 2f       	mov	r24, r29
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	ff 90       	pop	r15
 6de:	ef 90       	pop	r14
 6e0:	df 90       	pop	r13
 6e2:	cf 90       	pop	r12
 6e4:	08 95       	ret

000006e6 <SD_init>:
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	1a e0       	ldi	r17, 0x0A	; 10
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	eb d0       	rcall	.+470    	; 0x8ca <spi_transmit>
 6f4:	11 50       	subi	r17, 0x01	; 1
 6f6:	e1 f7       	brne	.-8      	; 0x6f0 <SD_init+0xa>
 6f8:	a5 98       	cbi	0x14, 5	; 20
 6fa:	40 e0       	ldi	r20, 0x00	; 0
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	ba 01       	movw	r22, r20
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	97 df       	rcall	.-210    	; 0x632 <SD_sendCommand>
 704:	c0 e2       	ldi	r28, 0x20	; 32
 706:	d0 e0       	ldi	r29, 0x00	; 0
 708:	08 c0       	rjmp	.+16     	; 0x71a <SD_init+0x34>
 70a:	40 e0       	ldi	r20, 0x00	; 0
 70c:	50 e0       	ldi	r21, 0x00	; 0
 70e:	ba 01       	movw	r22, r20
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	8f df       	rcall	.-226    	; 0x632 <SD_sendCommand>
 714:	21 97       	sbiw	r28, 0x01	; 1
 716:	09 f4       	brne	.+2      	; 0x71a <SD_init+0x34>
 718:	5f c0       	rjmp	.+190    	; 0x7d8 <SD_init+0xf2>
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	b1 f7       	brne	.-20     	; 0x70a <SD_init+0x24>
 71e:	a5 9a       	sbi	0x14, 5	; 20
 720:	8f ef       	ldi	r24, 0xFF	; 255
 722:	d3 d0       	rcall	.+422    	; 0x8ca <spi_transmit>
 724:	8f ef       	ldi	r24, 0xFF	; 255
 726:	d1 d0       	rcall	.+418    	; 0x8ca <spi_transmit>
 728:	4a ea       	ldi	r20, 0xAA	; 170
 72a:	51 e0       	ldi	r21, 0x01	; 1
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	88 e0       	ldi	r24, 0x08	; 8
 732:	7f df       	rcall	.-258    	; 0x632 <SD_sendCommand>
 734:	ce ef       	ldi	r28, 0xFE	; 254
 736:	d0 e0       	ldi	r29, 0x00	; 0
 738:	0e c0       	rjmp	.+28     	; 0x756 <SD_init+0x70>
 73a:	4a ea       	ldi	r20, 0xAA	; 170
 73c:	51 e0       	ldi	r21, 0x01	; 1
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	88 e0       	ldi	r24, 0x08	; 8
 744:	76 df       	rcall	.-276    	; 0x632 <SD_sendCommand>
 746:	21 97       	sbiw	r28, 0x01	; 1
 748:	31 f4       	brne	.+12     	; 0x756 <SD_init+0x70>
 74a:	00 00       	nop
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <cardType>
 752:	01 e0       	ldi	r16, 0x01	; 1
 754:	03 c0       	rjmp	.+6      	; 0x75c <SD_init+0x76>
 756:	81 30       	cpi	r24, 0x01	; 1
 758:	81 f7       	brne	.-32     	; 0x73a <SD_init+0x54>
 75a:	02 e0       	ldi	r16, 0x02	; 2
 75c:	40 e0       	ldi	r20, 0x00	; 0
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	ba 01       	movw	r22, r20
 762:	87 e3       	ldi	r24, 0x37	; 55
 764:	66 df       	rcall	.-308    	; 0x632 <SD_sendCommand>
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	70 e4       	ldi	r23, 0x40	; 64
 76e:	89 e2       	ldi	r24, 0x29	; 41
 770:	60 df       	rcall	.-320    	; 0x632 <SD_sendCommand>
 772:	ce ef       	ldi	r28, 0xFE	; 254
 774:	d0 e0       	ldi	r29, 0x00	; 0
 776:	10 c0       	rjmp	.+32     	; 0x798 <SD_init+0xb2>
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	ba 01       	movw	r22, r20
 77e:	87 e3       	ldi	r24, 0x37	; 55
 780:	58 df       	rcall	.-336    	; 0x632 <SD_sendCommand>
 782:	40 e0       	ldi	r20, 0x00	; 0
 784:	50 e0       	ldi	r21, 0x00	; 0
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	70 e4       	ldi	r23, 0x40	; 64
 78a:	89 e2       	ldi	r24, 0x29	; 41
 78c:	52 df       	rcall	.-348    	; 0x632 <SD_sendCommand>
 78e:	21 97       	sbiw	r28, 0x01	; 1
 790:	19 f4       	brne	.+6      	; 0x798 <SD_init+0xb2>
 792:	00 00       	nop
 794:	12 e0       	ldi	r17, 0x02	; 2
 796:	2a c0       	rjmp	.+84     	; 0x7ec <SD_init+0x106>
 798:	81 11       	cpse	r24, r1
 79a:	ee cf       	rjmp	.-36     	; 0x778 <SD_init+0x92>
 79c:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <SDHC_flag>
 7a0:	02 30       	cpi	r16, 0x02	; 2
 7a2:	21 f5       	brne	.+72     	; 0x7ec <SD_init+0x106>
 7a4:	1b c0       	rjmp	.+54     	; 0x7dc <SD_init+0xf6>
 7a6:	40 e0       	ldi	r20, 0x00	; 0
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	ba 01       	movw	r22, r20
 7ac:	8a e3       	ldi	r24, 0x3A	; 58
 7ae:	41 df       	rcall	.-382    	; 0x632 <SD_sendCommand>
 7b0:	21 97       	sbiw	r28, 0x01	; 1
 7b2:	21 f4       	brne	.+8      	; 0x7bc <SD_init+0xd6>
 7b4:	00 00       	nop
 7b6:	10 92 5d 0d 	sts	0x0D5D, r1	; 0x800d5d <cardType>
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <SD_init+0xda>
 7bc:	81 11       	cpse	r24, r1
 7be:	f3 cf       	rjmp	.-26     	; 0x7a6 <SD_init+0xc0>
 7c0:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <SDHC_flag>
 7c4:	81 30       	cpi	r24, 0x01	; 1
 7c6:	21 f4       	brne	.+8      	; 0x7d0 <SD_init+0xea>
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <cardType>
 7ce:	0e c0       	rjmp	.+28     	; 0x7ec <SD_init+0x106>
 7d0:	83 e0       	ldi	r24, 0x03	; 3
 7d2:	80 93 5d 0d 	sts	0x0D5D, r24	; 0x800d5d <cardType>
 7d6:	0a c0       	rjmp	.+20     	; 0x7ec <SD_init+0x106>
 7d8:	11 e0       	ldi	r17, 0x01	; 1
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <SD_init+0x106>
 7dc:	40 e0       	ldi	r20, 0x00	; 0
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	ba 01       	movw	r22, r20
 7e2:	8a e3       	ldi	r24, 0x3A	; 58
 7e4:	26 df       	rcall	.-436    	; 0x632 <SD_sendCommand>
 7e6:	ce ef       	ldi	r28, 0xFE	; 254
 7e8:	d0 e0       	ldi	r29, 0x00	; 0
 7ea:	e8 cf       	rjmp	.-48     	; 0x7bc <SD_init+0xd6>
 7ec:	81 2f       	mov	r24, r17
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	1f 91       	pop	r17
 7f4:	0f 91       	pop	r16
 7f6:	08 95       	ret

000007f8 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
 7f8:	cf 93       	push	r28
 7fa:	df 93       	push	r29
 7fc:	ab 01       	movw	r20, r22
 7fe:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
 800:	81 e1       	ldi	r24, 0x11	; 17
 802:	17 df       	rcall	.-466    	; 0x632 <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
 804:	81 11       	cpse	r24, r1
 806:	1d c0       	rjmp	.+58     	; 0x842 <SD_readSingleBlock+0x4a>

SD_CS_ASSERT;
 808:	a5 98       	cbi	0x14, 5	; 20

retry = 0;
while(spi_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
 80a:	c0 e0       	ldi	r28, 0x00	; 0
 80c:	d0 e0       	ldi	r29, 0x00	; 0
 80e:	05 c0       	rjmp	.+10     	; 0x81a <SD_readSingleBlock+0x22>
 810:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
 812:	19 f4       	brne	.+6      	; 0x81a <SD_readSingleBlock+0x22>
 814:	a5 9a       	sbi	0x14, 5	; 20
 816:	81 e0       	ldi	r24, 0x01	; 1
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(spi_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
 818:	14 c0       	rjmp	.+40     	; 0x842 <SD_readSingleBlock+0x4a>
 81a:	5d d0       	rcall	.+186    	; 0x8d6 <spi_receive>
 81c:	8e 3f       	cpi	r24, 0xFE	; 254
 81e:	c1 f7       	brne	.-16     	; 0x810 <SD_readSingleBlock+0x18>
 820:	c0 e0       	ldi	r28, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = spi_receive();
 822:	d0 e0       	ldi	r29, 0x00	; 0
 824:	58 d0       	rcall	.+176    	; 0x8d6 <spi_receive>
 826:	fe 01       	movw	r30, r28
 828:	eb 5d       	subi	r30, 0xDB	; 219
 82a:	f7 4f       	sbci	r31, 0xF7	; 247
 82c:	80 83       	st	Z, r24

retry = 0;
while(spi_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
 82e:	21 96       	adiw	r28, 0x01	; 1
 830:	c1 15       	cp	r28, r1
 832:	82 e0       	ldi	r24, 0x02	; 2
  buffer[i] = spi_receive();

spi_receive(); //receive incoming CRC (16-bit), CRC is ignored here
 834:	d8 07       	cpc	r29, r24
 836:	b1 f7       	brne	.-20     	; 0x824 <SD_readSingleBlock+0x2c>
spi_receive();
 838:	4e d0       	rcall	.+156    	; 0x8d6 <spi_receive>
 83a:	4d d0       	rcall	.+154    	; 0x8d6 <spi_receive>

spi_receive(); //extra 8 clock pulses
 83c:	4c d0       	rcall	.+152    	; 0x8d6 <spi_receive>
 83e:	a5 9a       	sbi	0x14, 5	; 20
SD_CS_DEASSERT;
 840:	80 e0       	ldi	r24, 0x00	; 0

return 0;
 842:	df 91       	pop	r29
}
 844:	cf 91       	pop	r28
 846:	08 95       	ret

00000848 <SD_writeSingleBlock>:
 848:	cf 93       	push	r28
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
 84a:	df 93       	push	r29
 84c:	ab 01       	movw	r20, r22
 84e:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
 850:	88 e1       	ldi	r24, 0x18	; 24
 852:	ef de       	rcall	.-546    	; 0x632 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
 854:	81 11       	cpse	r24, r1
 856:	36 c0       	rjmp	.+108    	; 0x8c4 <SD_writeSingleBlock+0x7c>

SD_CS_ASSERT;
 858:	a5 98       	cbi	0x14, 5	; 20

spi_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
 85a:	8e ef       	ldi	r24, 0xFE	; 254
 85c:	36 d0       	rcall	.+108    	; 0x8ca <spi_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
 85e:	c0 e0       	ldi	r28, 0x00	; 0
 860:	d0 e0       	ldi	r29, 0x00	; 0
  spi_transmit(buffer[i]);
 862:	fe 01       	movw	r30, r28
 864:	eb 5d       	subi	r30, 0xDB	; 219
 866:	f7 4f       	sbci	r31, 0xF7	; 247
 868:	80 81       	ld	r24, Z
 86a:	2f d0       	rcall	.+94     	; 0x8ca <spi_transmit>

SD_CS_ASSERT;

spi_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
 86c:	21 96       	adiw	r28, 0x01	; 1
 86e:	c1 15       	cp	r28, r1
 870:	22 e0       	ldi	r18, 0x02	; 2
 872:	d2 07       	cpc	r29, r18
  spi_transmit(buffer[i]);

spi_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
 874:	b1 f7       	brne	.-20     	; 0x862 <SD_writeSingleBlock+0x1a>
spi_transmit(0xff);
 876:	8f ef       	ldi	r24, 0xFF	; 255
 878:	28 d0       	rcall	.+80     	; 0x8ca <spi_transmit>
 87a:	8f ef       	ldi	r24, 0xFF	; 255

response = spi_receive();
 87c:	26 d0       	rcall	.+76     	; 0x8ca <spi_transmit>
 87e:	2b d0       	rcall	.+86     	; 0x8d6 <spi_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
 880:	98 2f       	mov	r25, r24
 882:	9f 71       	andi	r25, 0x1F	; 31
 884:	95 30       	cpi	r25, 0x05	; 5
 886:	39 f0       	breq	.+14     	; 0x896 <SD_writeSingleBlock+0x4e>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
 888:	a5 9a       	sbi	0x14, 5	; 20
  return response;
 88a:	1c c0       	rjmp	.+56     	; 0x8c4 <SD_writeSingleBlock+0x7c>
}

while(!spi_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
 88c:	21 96       	adiw	r28, 0x01	; 1
 88e:	29 f4       	brne	.+10     	; 0x89a <SD_writeSingleBlock+0x52>
 890:	a5 9a       	sbi	0x14, 5	; 20
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	17 c0       	rjmp	.+46     	; 0x8c4 <SD_writeSingleBlock+0x7c>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!spi_receive()) //wait for SD card to complete writing and get idle
 896:	c0 e0       	ldi	r28, 0x00	; 0
 898:	d0 e0       	ldi	r29, 0x00	; 0
 89a:	1d d0       	rcall	.+58     	; 0x8d6 <spi_receive>
 89c:	88 23       	and	r24, r24
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
 89e:	b1 f3       	breq	.-20     	; 0x88c <SD_writeSingleBlock+0x44>
spi_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
 8a0:	a5 9a       	sbi	0x14, 5	; 20
 8a2:	8f ef       	ldi	r24, 0xFF	; 255
 8a4:	12 d0       	rcall	.+36     	; 0x8ca <spi_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
 8a6:	a5 98       	cbi	0x14, 5	; 20

while(!spi_receive()) //wait for SD card to complete writing and get idle
 8a8:	08 c0       	rjmp	.+16     	; 0x8ba <SD_writeSingleBlock+0x72>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
 8aa:	ce 01       	movw	r24, r28
 8ac:	01 96       	adiw	r24, 0x01	; 1
 8ae:	21 96       	adiw	r28, 0x01	; 1
 8b0:	19 f4       	brne	.+6      	; 0x8b8 <SD_writeSingleBlock+0x70>
 8b2:	a5 9a       	sbi	0x14, 5	; 20
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <SD_writeSingleBlock+0x7c>

SD_CS_DEASSERT;
spi_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!spi_receive()) //wait for SD card to complete writing and get idle
 8b8:	ec 01       	movw	r28, r24
 8ba:	0d d0       	rcall	.+26     	; 0x8d6 <spi_receive>
 8bc:	88 23       	and	r24, r24
 8be:	a9 f3       	breq	.-22     	; 0x8aa <SD_writeSingleBlock+0x62>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
 8c0:	a5 9a       	sbi	0x14, 5	; 20

return 0;
 8c2:	80 e0       	ldi	r24, 0x00	; 0
}
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	08 95       	ret

000008ca <spi_transmit>:
		case MFRC522:
		SPI_CS_RC522_PORT &= ~SPI_CS_RC522_BIT;
		break;
		
		case SDCARD:
		SPI_CS_SD_CARD_PORT &= ~SPI_CS_SD_CARD_BIT;
 8ca:	8e bd       	out	0x2e, r24	; 46
 8cc:	0d b4       	in	r0, 0x2d	; 45
 8ce:	07 fe       	sbrs	r0, 7
 8d0:	fd cf       	rjmp	.-6      	; 0x8cc <spi_transmit+0x2>
 8d2:	8e b5       	in	r24, 0x2e	; 46
 8d4:	08 95       	ret

000008d6 <spi_receive>:
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	8e bd       	out	0x2e, r24	; 46
 8da:	0d b4       	in	r0, 0x2d	; 45
 8dc:	07 fe       	sbrs	r0, 7
 8de:	fd cf       	rjmp	.-6      	; 0x8da <spi_receive+0x4>
 8e0:	8e b5       	in	r24, 0x2e	; 46
 8e2:	08 95       	ret

000008e4 <disable_Slave>:
	}
}

void disable_Slave(uint8_t Slave)
{
	switch (Slave)
 8e4:	81 30       	cpi	r24, 0x01	; 1
 8e6:	41 f0       	breq	.+16     	; 0x8f8 <disable_Slave+0x14>
 8e8:	28 f0       	brcs	.+10     	; 0x8f4 <disable_Slave+0x10>
 8ea:	82 30       	cpi	r24, 0x02	; 2
 8ec:	59 f0       	breq	.+22     	; 0x904 <disable_Slave+0x20>
 8ee:	83 30       	cpi	r24, 0x03	; 3
 8f0:	79 f0       	breq	.+30     	; 0x910 <disable_Slave+0x2c>
 8f2:	08 95       	ret
	{
		case TMC4671:
		SPI_CS_TMC4671_PORT |= SPI_CS_TMC4671_BIT;
 8f4:	28 9a       	sbi	0x05, 0	; 5
		break;
 8f6:	08 95       	ret
		
		case TMC6200:
		SPI_CS_TMC6200_PORT |= SPI_CS_TMC6200_BIT;
 8f8:	e2 e0       	ldi	r30, 0x02	; 2
 8fa:	f1 e0       	ldi	r31, 0x01	; 1
 8fc:	80 81       	ld	r24, Z
 8fe:	80 64       	ori	r24, 0x40	; 64
 900:	80 83       	st	Z, r24
		break;
 902:	08 95       	ret
		
		case MFRC522:
		SPI_CS_RC522_PORT |= SPI_CS_RC522_BIT;
 904:	e2 e0       	ldi	r30, 0x02	; 2
 906:	f1 e0       	ldi	r31, 0x01	; 1
 908:	80 81       	ld	r24, Z
 90a:	80 62       	ori	r24, 0x20	; 32
 90c:	80 83       	st	Z, r24
		break;
 90e:	08 95       	ret
		
		case SDCARD:
		SPI_CS_SD_CARD_PORT |= SPI_CS_SD_CARD_BIT;
 910:	a5 9a       	sbi	0x14, 5	; 20
 912:	08 95       	ret

00000914 <SPI_init>:

void SPI_init(void)
{
	// Einstellungen für TMC4671: CLK = 1MHz, SPI-Mode = 3, MSB first)

	SPCR = ((1<<SPE)|       // SPI Enable					(1 = Enable, 0 = Disable)					Datasheet S. 197 (Kapitel 21.2.1)
 914:	83 e5       	ldi	r24, 0x53	; 83
 916:	8c bd       	out	0x2c, r24	; 44
	(1<<MSTR)|              // Master/Slave select			(0 = Slave, 1 = Master)						Datasheet S. 197 (Kapitel 21.2.1)
	(1<<SPR1)|(1<<SPR0)|    // SPI Clock Rate				(Divider Systemclock 16MHz)					Datasheet S. 198 (Kapitel 21.2.1)
	(0<<CPOL)|              // Clock Polarity when idle		(0 = low, 1 = SCK high)						Datasheet S. 197 (Kapitel 21.2.1)
	(0<<CPHA));             // Clock Phase edge sampling	(0 = leading, 1 = trailing edge sampling)	Datasheet S. 197 (Kapitel 21.2.1)

	SPSR = (0<<SPI2X);      // Double Clock Rate			(0 = Disable, 1 = Enable)					Datasheet S. 198 (Kapitel 21.2.1)
 918:	1d bc       	out	0x2d, r1	; 45

	disable_Slave(TMC4671);
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	e3 df       	rcall	.-58     	; 0x8e4 <disable_Slave>
	disable_Slave(TMC6200);
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	e1 df       	rcall	.-62     	; 0x8e4 <disable_Slave>
	disable_Slave(MFRC522);
 922:	82 e0       	ldi	r24, 0x02	; 2
 924:	df cf       	rjmp	.-66     	; 0x8e4 <disable_Slave>
 926:	08 95       	ret

00000928 <tx_completed>:
 928:	00 00       	nop
	
	PROBLEM: Buffer overflow wenn lange Strings gesendet werden.
*/
	uint8_t nbytes = strlen((const char *)data);
	RB_write(&rb_tx_RFID, data, nbytes);
	Uart_EnableTransmitIT_3();
 92a:	00 00       	nop
 92c:	08 95       	ret

0000092e <UART_init>:
 92e:	cf 92       	push	r12
 930:	df 92       	push	r13
 932:	ef 92       	push	r14
 934:	ff 92       	push	r15
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 942:	27 e6       	ldi	r18, 0x67	; 103
 944:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 948:	0f 2e       	mov	r0, r31
 94a:	f1 ec       	ldi	r31, 0xC1	; 193
 94c:	cf 2e       	mov	r12, r31
 94e:	d1 2c       	mov	r13, r1
 950:	f0 2d       	mov	r31, r0
 952:	98 e1       	ldi	r25, 0x18	; 24
 954:	f6 01       	movw	r30, r12
 956:	90 83       	st	Z, r25
 958:	86 e0       	ldi	r24, 0x06	; 6
 95a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 95e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 962:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 966:	0f 2e       	mov	r0, r31
 968:	f9 ec       	ldi	r31, 0xC9	; 201
 96a:	ef 2e       	mov	r14, r31
 96c:	f1 2c       	mov	r15, r1
 96e:	f0 2d       	mov	r31, r0
 970:	f7 01       	movw	r30, r14
 972:	90 83       	st	Z, r25
 974:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 978:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 97c:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
 980:	01 ed       	ldi	r16, 0xD1	; 209
 982:	10 e0       	ldi	r17, 0x00	; 0
 984:	f8 01       	movw	r30, r16
 986:	90 83       	st	Z, r25
 988:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
 98c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
 990:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
 994:	c1 e3       	ldi	r28, 0x31	; 49
 996:	d1 e0       	ldi	r29, 0x01	; 1
 998:	98 83       	st	Y, r25
 99a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
 99e:	88 ed       	ldi	r24, 0xD8	; 216
 9a0:	94 e0       	ldi	r25, 0x04	; 4
 9a2:	7d dc       	rcall	.-1798   	; 0x29e <RB_init>
 9a4:	84 e5       	ldi	r24, 0x54	; 84
 9a6:	9b e0       	ldi	r25, 0x0B	; 11
 9a8:	7a dc       	rcall	.-1804   	; 0x29e <RB_init>
 9aa:	82 e2       	ldi	r24, 0x22	; 34
 9ac:	97 e0       	ldi	r25, 0x07	; 7
 9ae:	77 dc       	rcall	.-1810   	; 0x29e <RB_init>
 9b0:	85 e5       	ldi	r24, 0x55	; 85
 9b2:	9c e0       	ldi	r25, 0x0C	; 12
 9b4:	74 dc       	rcall	.-1816   	; 0x29e <RB_init>
 9b6:	87 e1       	ldi	r24, 0x17	; 23
 9b8:	96 e0       	ldi	r25, 0x06	; 6
 9ba:	71 dc       	rcall	.-1822   	; 0x29e <RB_init>
 9bc:	8f e2       	ldi	r24, 0x2F	; 47
 9be:	9a e0       	ldi	r25, 0x0A	; 10
 9c0:	6e dc       	rcall	.-1828   	; 0x29e <RB_init>
 9c2:	8f e5       	ldi	r24, 0x5F	; 95
 9c4:	9d e0       	ldi	r25, 0x0D	; 13
 9c6:	6b dc       	rcall	.-1834   	; 0x29e <RB_init>
 9c8:	f6 01       	movw	r30, r12
 9ca:	80 81       	ld	r24, Z
 9cc:	80 68       	ori	r24, 0x80	; 128
 9ce:	80 83       	st	Z, r24
 9d0:	f7 01       	movw	r30, r14
 9d2:	80 81       	ld	r24, Z
 9d4:	80 68       	ori	r24, 0x80	; 128
 9d6:	80 83       	st	Z, r24
 9d8:	f8 01       	movw	r30, r16
 9da:	80 81       	ld	r24, Z
 9dc:	80 68       	ori	r24, 0x80	; 128
 9de:	80 83       	st	Z, r24
 9e0:	88 81       	ld	r24, Y
 9e2:	80 68       	ori	r24, 0x80	; 128
 9e4:	88 83       	st	Y, r24
 9e6:	78 94       	sei
 9e8:	84 e9       	ldi	r24, 0x94	; 148
 9ea:	94 e0       	ldi	r25, 0x04	; 4
 9ec:	90 93 9e 0e 	sts	0x0E9E, r25	; 0x800e9e <ptr_tx_completed_0+0x1>
 9f0:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <ptr_tx_completed_0>
 9f4:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <ptr_tx_completed_1+0x1>
 9f8:	80 93 ff 05 	sts	0x05FF, r24	; 0x8005ff <ptr_tx_completed_1>
 9fc:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <ptr_tx_completed_2+0x1>
 a00:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <ptr_tx_completed_2>
 a04:	90 93 51 0b 	sts	0x0B51, r25	; 0x800b51 <ptr_tx_completed_3+0x1>
 a08:	80 93 50 0b 	sts	0x0B50, r24	; 0x800b50 <ptr_tx_completed_3>
 a0c:	df 91       	pop	r29
 a0e:	cf 91       	pop	r28
 a10:	1f 91       	pop	r17
 a12:	0f 91       	pop	r16
 a14:	ff 90       	pop	r15
 a16:	ef 90       	pop	r14
 a18:	df 90       	pop	r13
 a1a:	cf 90       	pop	r12
 a1c:	08 95       	ret

00000a1e <Uart_Transmit_IT_PC>:
 a1e:	fc 01       	movw	r30, r24
 a20:	01 90       	ld	r0, Z+
 a22:	00 20       	and	r0, r0
 a24:	e9 f7       	brne	.-6      	; 0xa20 <Uart_Transmit_IT_PC+0x2>
 a26:	31 97       	sbiw	r30, 0x01	; 1
 a28:	af 01       	movw	r20, r30
 a2a:	48 1b       	sub	r20, r24
 a2c:	59 0b       	sbc	r21, r25
 a2e:	bc 01       	movw	r22, r24
 a30:	88 ed       	ldi	r24, 0xD8	; 216
 a32:	94 e0       	ldi	r25, 0x04	; 4
 a34:	80 dc       	rcall	.-1792   	; 0x336 <RB_write>
 a36:	e1 ec       	ldi	r30, 0xC1	; 193
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	80 81       	ld	r24, Z
 a3c:	80 62       	ori	r24, 0x20	; 32
 a3e:	80 83       	st	Z, r24
 a40:	08 95       	ret

00000a42 <Uart_Transmit_IT_Display>:
 a42:	cf 93       	push	r28
 a44:	df 93       	push	r29
 a46:	fc 01       	movw	r30, r24
 a48:	20 81       	ld	r18, Z
 a4a:	22 23       	and	r18, r18
 a4c:	69 f0       	breq	.+26     	; 0xa68 <Uart_Transmit_IT_Display+0x26>
 a4e:	dc 01       	movw	r26, r24
 a50:	11 96       	adiw	r26, 0x01	; 1
 a52:	e8 ec       	ldi	r30, 0xC8	; 200
 a54:	f0 e0       	ldi	r31, 0x00	; 0
 a56:	ce ec       	ldi	r28, 0xCE	; 206
 a58:	d0 e0       	ldi	r29, 0x00	; 0
 a5a:	90 81       	ld	r25, Z
 a5c:	95 ff       	sbrs	r25, 5
 a5e:	fd cf       	rjmp	.-6      	; 0xa5a <Uart_Transmit_IT_Display+0x18>
 a60:	28 83       	st	Y, r18
 a62:	2d 91       	ld	r18, X+
 a64:	21 11       	cpse	r18, r1
 a66:	f9 cf       	rjmp	.-14     	; 0xa5a <Uart_Transmit_IT_Display+0x18>
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	08 95       	ret

00000a6e <__vector_26>:
	asm("nop");
	asm("nop");
}

ISR(USART0_UDRE_vect)
{
 a6e:	1f 92       	push	r1
 a70:	0f 92       	push	r0
 a72:	0f b6       	in	r0, 0x3f	; 63
 a74:	0f 92       	push	r0
 a76:	11 24       	eor	r1, r1
 a78:	0b b6       	in	r0, 0x3b	; 59
 a7a:	0f 92       	push	r0
 a7c:	2f 93       	push	r18
 a7e:	3f 93       	push	r19
 a80:	4f 93       	push	r20
 a82:	5f 93       	push	r21
 a84:	6f 93       	push	r22
 a86:	7f 93       	push	r23
 a88:	8f 93       	push	r24
 a8a:	9f 93       	push	r25
 a8c:	af 93       	push	r26
 a8e:	bf 93       	push	r27
 a90:	ef 93       	push	r30
 a92:	ff 93       	push	r31
/*
	- Befinden sich Daten im Buffer, wird das nächste Byte aus dem Buffer gesendet
	- Ansonsten wird das Interrupt deaktiviert und zwei Schritte gewartet	
*/
	if (RB_length(&rb_tx_PC) > 0)
 a94:	88 ed       	ldi	r24, 0xD8	; 216
 a96:	94 e0       	ldi	r25, 0x04	; 4
 a98:	11 dc       	rcall	.-2014   	; 0x2bc <RB_length>
 a9a:	88 23       	and	r24, r24
 a9c:	31 f0       	breq	.+12     	; 0xaaa <__vector_26+0x3c>
	{
		UDR0 = RB_readByte(&rb_tx_PC);
 a9e:	88 ed       	ldi	r24, 0xD8	; 216
 aa0:	94 e0       	ldi	r25, 0x04	; 4
 aa2:	18 dc       	rcall	.-2000   	; 0x2d4 <RB_readByte>
 aa4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 aa8:	0c c0       	rjmp	.+24     	; 0xac2 <__vector_26+0x54>
	}
	else
	{
		Uart_DisableTransmitIT_0();
 aaa:	e1 ec       	ldi	r30, 0xC1	; 193
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	80 81       	ld	r24, Z
 ab0:	8f 7d       	andi	r24, 0xDF	; 223
 ab2:	80 83       	st	Z, r24
		if(ptr_tx_completed_0 != 0)
 ab4:	e0 91 9d 0e 	lds	r30, 0x0E9D	; 0x800e9d <ptr_tx_completed_0>
 ab8:	f0 91 9e 0e 	lds	r31, 0x0E9E	; 0x800e9e <ptr_tx_completed_0+0x1>
 abc:	30 97       	sbiw	r30, 0x00	; 0
 abe:	09 f0       	breq	.+2      	; 0xac2 <__vector_26+0x54>
			ptr_tx_completed_0();
 ac0:	19 95       	eicall
	}
}
 ac2:	ff 91       	pop	r31
 ac4:	ef 91       	pop	r30
 ac6:	bf 91       	pop	r27
 ac8:	af 91       	pop	r26
 aca:	9f 91       	pop	r25
 acc:	8f 91       	pop	r24
 ace:	7f 91       	pop	r23
 ad0:	6f 91       	pop	r22
 ad2:	5f 91       	pop	r21
 ad4:	4f 91       	pop	r20
 ad6:	3f 91       	pop	r19
 ad8:	2f 91       	pop	r18
 ada:	0f 90       	pop	r0
 adc:	0b be       	out	0x3b, r0	; 59
 ade:	0f 90       	pop	r0
 ae0:	0f be       	out	0x3f, r0	; 63
 ae2:	0f 90       	pop	r0
 ae4:	1f 90       	pop	r1
 ae6:	18 95       	reti

00000ae8 <__vector_25>:

ISR(USART0_RX_vect)
{	
 ae8:	1f 92       	push	r1
 aea:	0f 92       	push	r0
 aec:	0f b6       	in	r0, 0x3f	; 63
 aee:	0f 92       	push	r0
 af0:	11 24       	eor	r1, r1
 af2:	0b b6       	in	r0, 0x3b	; 59
 af4:	0f 92       	push	r0
 af6:	2f 93       	push	r18
 af8:	3f 93       	push	r19
 afa:	4f 93       	push	r20
 afc:	5f 93       	push	r21
 afe:	6f 93       	push	r22
 b00:	7f 93       	push	r23
 b02:	8f 93       	push	r24
 b04:	9f 93       	push	r25
 b06:	af 93       	push	r26
 b08:	bf 93       	push	r27
 b0a:	ef 93       	push	r30
 b0c:	ff 93       	push	r31
/*
	- Wird ein Empfangs-Interrupt seitens PC ausgelöst, wird das empfangene Byte in den PC-Buffer geschrieben
*/
	char ch = UDR0;
 b0e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	RB_writeByte(&rb_rx_PC,ch);
 b12:	84 e5       	ldi	r24, 0x54	; 84
 b14:	9b e0       	ldi	r25, 0x0B	; 11
 b16:	f2 db       	rcall	.-2076   	; 0x2fc <RB_writeByte>
}
 b18:	ff 91       	pop	r31
 b1a:	ef 91       	pop	r30
 b1c:	bf 91       	pop	r27
 b1e:	af 91       	pop	r26
 b20:	9f 91       	pop	r25
 b22:	8f 91       	pop	r24
 b24:	7f 91       	pop	r23
 b26:	6f 91       	pop	r22
 b28:	5f 91       	pop	r21
 b2a:	4f 91       	pop	r20
 b2c:	3f 91       	pop	r19
 b2e:	2f 91       	pop	r18
 b30:	0f 90       	pop	r0
 b32:	0b be       	out	0x3b, r0	; 59
 b34:	0f 90       	pop	r0
 b36:	0f be       	out	0x3f, r0	; 63
 b38:	0f 90       	pop	r0
 b3a:	1f 90       	pop	r1
 b3c:	18 95       	reti

00000b3e <__vector_36>:

ISR(USART1_RX_vect)
{
 b3e:	1f 92       	push	r1
 b40:	0f 92       	push	r0
 b42:	0f b6       	in	r0, 0x3f	; 63
 b44:	0f 92       	push	r0
 b46:	11 24       	eor	r1, r1
 b48:	0b b6       	in	r0, 0x3b	; 59
 b4a:	0f 92       	push	r0
 b4c:	2f 93       	push	r18
 b4e:	3f 93       	push	r19
 b50:	4f 93       	push	r20
 b52:	5f 93       	push	r21
 b54:	6f 93       	push	r22
 b56:	7f 93       	push	r23
 b58:	8f 93       	push	r24
 b5a:	9f 93       	push	r25
 b5c:	af 93       	push	r26
 b5e:	bf 93       	push	r27
 b60:	ef 93       	push	r30
 b62:	ff 93       	push	r31
/*
	- Wird ein Empfangs-Interrupt seitens Display ausgelöst, wird das empfangene Byte in den Display-Buffer geschrieben
*/
	char ch = UDR1;
 b64:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	RB_writeByte(&rb_rx_Display,ch);
 b68:	82 e2       	ldi	r24, 0x22	; 34
 b6a:	97 e0       	ldi	r25, 0x07	; 7
 b6c:	c7 db       	rcall	.-2162   	; 0x2fc <RB_writeByte>
}
 b6e:	ff 91       	pop	r31
 b70:	ef 91       	pop	r30
 b72:	bf 91       	pop	r27
 b74:	af 91       	pop	r26
 b76:	9f 91       	pop	r25
 b78:	8f 91       	pop	r24
 b7a:	7f 91       	pop	r23
 b7c:	6f 91       	pop	r22
 b7e:	5f 91       	pop	r21
 b80:	4f 91       	pop	r20
 b82:	3f 91       	pop	r19
 b84:	2f 91       	pop	r18
 b86:	0f 90       	pop	r0
 b88:	0b be       	out	0x3b, r0	; 59
 b8a:	0f 90       	pop	r0
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	0f 90       	pop	r0
 b90:	1f 90       	pop	r1
 b92:	18 95       	reti

00000b94 <__vector_52>:

ISR(USART2_UDRE_vect)
{
 b94:	1f 92       	push	r1
 b96:	0f 92       	push	r0
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	0f 92       	push	r0
 b9c:	11 24       	eor	r1, r1
 b9e:	0b b6       	in	r0, 0x3b	; 59
 ba0:	0f 92       	push	r0
 ba2:	2f 93       	push	r18
 ba4:	3f 93       	push	r19
 ba6:	4f 93       	push	r20
 ba8:	5f 93       	push	r21
 baa:	6f 93       	push	r22
 bac:	7f 93       	push	r23
 bae:	8f 93       	push	r24
 bb0:	9f 93       	push	r25
 bb2:	af 93       	push	r26
 bb4:	bf 93       	push	r27
 bb6:	ef 93       	push	r30
 bb8:	ff 93       	push	r31
/*
	- Befinden sich Daten im Buffer, wird das nächste Byte aus dem Buffer gesendet
	- Ansonsten wird das Interrupt deaktiviert und zwei Schritte gewartet	
*/
	if (RB_length(&rb_tx_ESP) > 0)
 bba:	85 e5       	ldi	r24, 0x55	; 85
 bbc:	9c e0       	ldi	r25, 0x0C	; 12
 bbe:	7e db       	rcall	.-2308   	; 0x2bc <RB_length>
 bc0:	88 23       	and	r24, r24
 bc2:	31 f0       	breq	.+12     	; 0xbd0 <__vector_52+0x3c>
	{
		UDR2 = RB_readByte(&rb_tx_ESP);
 bc4:	85 e5       	ldi	r24, 0x55	; 85
 bc6:	9c e0       	ldi	r25, 0x0C	; 12
 bc8:	85 db       	rcall	.-2294   	; 0x2d4 <RB_readByte>
 bca:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 bce:	0c c0       	rjmp	.+24     	; 0xbe8 <__vector_52+0x54>
	}
	else
	{
		Uart_DisableTransmitIT_2();
 bd0:	e1 ed       	ldi	r30, 0xD1	; 209
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	80 81       	ld	r24, Z
 bd6:	8f 7d       	andi	r24, 0xDF	; 223
 bd8:	80 83       	st	Z, r24
		if(ptr_tx_completed_2 != 0)
 bda:	e0 91 28 0a 	lds	r30, 0x0A28	; 0x800a28 <ptr_tx_completed_2>
 bde:	f0 91 29 0a 	lds	r31, 0x0A29	; 0x800a29 <ptr_tx_completed_2+0x1>
 be2:	30 97       	sbiw	r30, 0x00	; 0
 be4:	09 f0       	breq	.+2      	; 0xbe8 <__vector_52+0x54>
		ptr_tx_completed_2();
 be6:	19 95       	eicall
	}
}
 be8:	ff 91       	pop	r31
 bea:	ef 91       	pop	r30
 bec:	bf 91       	pop	r27
 bee:	af 91       	pop	r26
 bf0:	9f 91       	pop	r25
 bf2:	8f 91       	pop	r24
 bf4:	7f 91       	pop	r23
 bf6:	6f 91       	pop	r22
 bf8:	5f 91       	pop	r21
 bfa:	4f 91       	pop	r20
 bfc:	3f 91       	pop	r19
 bfe:	2f 91       	pop	r18
 c00:	0f 90       	pop	r0
 c02:	0b be       	out	0x3b, r0	; 59
 c04:	0f 90       	pop	r0
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	0f 90       	pop	r0
 c0a:	1f 90       	pop	r1
 c0c:	18 95       	reti

00000c0e <__vector_51>:

ISR(USART2_RX_vect)
{
 c0e:	1f 92       	push	r1
 c10:	0f 92       	push	r0
 c12:	0f b6       	in	r0, 0x3f	; 63
 c14:	0f 92       	push	r0
 c16:	11 24       	eor	r1, r1
 c18:	0b b6       	in	r0, 0x3b	; 59
 c1a:	0f 92       	push	r0
 c1c:	2f 93       	push	r18
 c1e:	3f 93       	push	r19
 c20:	4f 93       	push	r20
 c22:	5f 93       	push	r21
 c24:	6f 93       	push	r22
 c26:	7f 93       	push	r23
 c28:	8f 93       	push	r24
 c2a:	9f 93       	push	r25
 c2c:	af 93       	push	r26
 c2e:	bf 93       	push	r27
 c30:	ef 93       	push	r30
 c32:	ff 93       	push	r31
/*
	- Wird ein Empfangs-Interrupt seitens ESP ausgelöst, wird das empfangene Byte in den ESP-Buffer geschrieben
*/
	char ch = UDR2;
 c34:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	RB_writeByte(&rb_rx_ESP,ch);
 c38:	87 e1       	ldi	r24, 0x17	; 23
 c3a:	96 e0       	ldi	r25, 0x06	; 6
 c3c:	5f db       	rcall	.-2370   	; 0x2fc <RB_writeByte>
}
 c3e:	ff 91       	pop	r31
 c40:	ef 91       	pop	r30
 c42:	bf 91       	pop	r27
 c44:	af 91       	pop	r26
 c46:	9f 91       	pop	r25
 c48:	8f 91       	pop	r24
 c4a:	7f 91       	pop	r23
 c4c:	6f 91       	pop	r22
 c4e:	5f 91       	pop	r21
 c50:	4f 91       	pop	r20
 c52:	3f 91       	pop	r19
 c54:	2f 91       	pop	r18
 c56:	0f 90       	pop	r0
 c58:	0b be       	out	0x3b, r0	; 59
 c5a:	0f 90       	pop	r0
 c5c:	0f be       	out	0x3f, r0	; 63
 c5e:	0f 90       	pop	r0
 c60:	1f 90       	pop	r1
 c62:	18 95       	reti

00000c64 <__vector_55>:

ISR(USART3_UDRE_vect)
{
 c64:	1f 92       	push	r1
 c66:	0f 92       	push	r0
 c68:	0f b6       	in	r0, 0x3f	; 63
 c6a:	0f 92       	push	r0
 c6c:	11 24       	eor	r1, r1
 c6e:	0b b6       	in	r0, 0x3b	; 59
 c70:	0f 92       	push	r0
 c72:	2f 93       	push	r18
 c74:	3f 93       	push	r19
 c76:	4f 93       	push	r20
 c78:	5f 93       	push	r21
 c7a:	6f 93       	push	r22
 c7c:	7f 93       	push	r23
 c7e:	8f 93       	push	r24
 c80:	9f 93       	push	r25
 c82:	af 93       	push	r26
 c84:	bf 93       	push	r27
 c86:	ef 93       	push	r30
 c88:	ff 93       	push	r31
/*
	- Befinden sich Daten im Buffer, wird das nächste Byte aus dem Buffer gesendet
	- Ansonsten wird das Interrupt deaktiviert und zwei Schritte gewartet	
*/
	if (RB_length(&rb_tx_RFID) > 0)
 c8a:	8f e2       	ldi	r24, 0x2F	; 47
 c8c:	9a e0       	ldi	r25, 0x0A	; 10
 c8e:	16 db       	rcall	.-2516   	; 0x2bc <RB_length>
 c90:	88 23       	and	r24, r24
 c92:	31 f0       	breq	.+12     	; 0xca0 <__vector_55+0x3c>
	{
		UDR3 = RB_readByte(&rb_tx_RFID);
 c94:	8f e2       	ldi	r24, 0x2F	; 47
 c96:	9a e0       	ldi	r25, 0x0A	; 10
 c98:	1d db       	rcall	.-2502   	; 0x2d4 <RB_readByte>
 c9a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 c9e:	0c c0       	rjmp	.+24     	; 0xcb8 <__vector_55+0x54>
	}
	else
	{
		Uart_DisableTransmitIT_3();
 ca0:	e1 e3       	ldi	r30, 0x31	; 49
 ca2:	f1 e0       	ldi	r31, 0x01	; 1
 ca4:	80 81       	ld	r24, Z
 ca6:	8f 7d       	andi	r24, 0xDF	; 223
 ca8:	80 83       	st	Z, r24
		if(ptr_tx_completed_3 != 0)
 caa:	e0 91 50 0b 	lds	r30, 0x0B50	; 0x800b50 <ptr_tx_completed_3>
 cae:	f0 91 51 0b 	lds	r31, 0x0B51	; 0x800b51 <ptr_tx_completed_3+0x1>
 cb2:	30 97       	sbiw	r30, 0x00	; 0
 cb4:	09 f0       	breq	.+2      	; 0xcb8 <__vector_55+0x54>
		ptr_tx_completed_3();
 cb6:	19 95       	eicall
	}
}
 cb8:	ff 91       	pop	r31
 cba:	ef 91       	pop	r30
 cbc:	bf 91       	pop	r27
 cbe:	af 91       	pop	r26
 cc0:	9f 91       	pop	r25
 cc2:	8f 91       	pop	r24
 cc4:	7f 91       	pop	r23
 cc6:	6f 91       	pop	r22
 cc8:	5f 91       	pop	r21
 cca:	4f 91       	pop	r20
 ccc:	3f 91       	pop	r19
 cce:	2f 91       	pop	r18
 cd0:	0f 90       	pop	r0
 cd2:	0b be       	out	0x3b, r0	; 59
 cd4:	0f 90       	pop	r0
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	0f 90       	pop	r0
 cda:	1f 90       	pop	r1
 cdc:	18 95       	reti

00000cde <__vector_54>:

ISR(USART3_RX_vect)
{
 cde:	1f 92       	push	r1
 ce0:	0f 92       	push	r0
 ce2:	0f b6       	in	r0, 0x3f	; 63
 ce4:	0f 92       	push	r0
 ce6:	11 24       	eor	r1, r1
 ce8:	0b b6       	in	r0, 0x3b	; 59
 cea:	0f 92       	push	r0
 cec:	2f 93       	push	r18
 cee:	3f 93       	push	r19
 cf0:	4f 93       	push	r20
 cf2:	5f 93       	push	r21
 cf4:	6f 93       	push	r22
 cf6:	7f 93       	push	r23
 cf8:	8f 93       	push	r24
 cfa:	9f 93       	push	r25
 cfc:	af 93       	push	r26
 cfe:	bf 93       	push	r27
 d00:	ef 93       	push	r30
 d02:	ff 93       	push	r31
/*
	- Wird ein Empfangs-Interrupt seitens RFID ausgelöst, wird das empfangene Byte in den RFID-Buffer geschrieben
*/
	char ch = UDR3;
 d04:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	RB_writeByte(&rb_rx_RFID,ch);
 d08:	8f e5       	ldi	r24, 0x5F	; 95
 d0a:	9d e0       	ldi	r25, 0x0D	; 13
 d0c:	f7 da       	rcall	.-2578   	; 0x2fc <RB_writeByte>
}
 d0e:	ff 91       	pop	r31
 d10:	ef 91       	pop	r30
 d12:	bf 91       	pop	r27
 d14:	af 91       	pop	r26
 d16:	9f 91       	pop	r25
 d18:	8f 91       	pop	r24
 d1a:	7f 91       	pop	r23
 d1c:	6f 91       	pop	r22
 d1e:	5f 91       	pop	r21
 d20:	4f 91       	pop	r20
 d22:	3f 91       	pop	r19
 d24:	2f 91       	pop	r18
 d26:	0f 90       	pop	r0
 d28:	0b be       	out	0x3b, r0	; 59
 d2a:	0f 90       	pop	r0
 d2c:	0f be       	out	0x3f, r0	; 63
 d2e:	0f 90       	pop	r0
 d30:	1f 90       	pop	r1
 d32:	18 95       	reti

00000d34 <main>:

// MainLoop
int main(void)
{
	// Gate Treiber disable (active high)
 	EN_TMC6200_PORT &= ~EN_TMC6200_BIT;						// Disable TMC6200 (Active High)
 d34:	e2 e0       	ldi	r30, 0x02	; 2
 d36:	f1 e0       	ldi	r31, 0x01	; 1
 d38:	80 81       	ld	r24, Z
 d3a:	87 7f       	andi	r24, 0xF7	; 247
 d3c:	80 83       	st	Z, r24
 	EN_TMC6200_PORT |= EN_TMC6200_BIT;						// Disable TMC6200 (Active High)
 d3e:	80 81       	ld	r24, Z
 d40:	88 60       	ori	r24, 0x08	; 8
 d42:	80 83       	st	Z, r24
	
// Initialisierungen Interfaces
	IO_init();												// Ein-/Ausgangspins initialisieren
 d44:	51 da       	rcall	.-2910   	; 0x1e8 <IO_init>
	SPI_init();												// SPI-Schnittstelle initialisieren
 d46:	e6 dd       	rcall	.-1076   	; 0x914 <SPI_init>
	UART_init();											// UART-Schnittstelle initialisieren
 d48:	f2 dd       	rcall	.-1052   	; 0x92e <UART_init>
 d4a:	ec d9       	rcall	.-3112   	; 0x124 <SD_startup>
	SD_startup();											// SD-Karte initialisieren
 d4c:	81 e0       	ldi	r24, 0x01	; 1
 d4e:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <Grossschreib>
// 	cocktails_init();										// Cocktails initialisieren
// 	RFID_init();

// Initialisierungen Display
// 	setze_startanzeige(aktuellesGetraenk);					// Startanzeige des Displays setzen
	Grossschreib = 1;										// Initialisiere Grossschreibung Display mit gross (gibt kein Display init();)
 d52:	10 92 61 0e 	sts	0x0E61, r1	; 0x800e61 <i_Liste>
	i_Liste = 0;											// Listenabschnitt auf 0 vordefinieren
 d56:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <i_Liste_test_cnt>
	i_Liste_test_cnt = 0;
 d5a:	10 92 62 0e 	sts	0x0E62, r1	; 0x800e62 <i_Liste_test>
	i_Liste_test[i_Liste_test_cnt] = 0;
 d5e:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <block_list_hoch>
	block_list_hoch = 0;									// Blockierung der Listen aufheben
 d62:	10 92 16 06 	sts	0x0616, r1	; 0x800616 <block_list_runter>
	block_list_runter = 0;									// Blockierung der Listen aufheben
 d66:	ff cf       	rjmp	.-2      	; 0xd66 <main+0x32>

00000d68 <__udivmodsi4>:
 d68:	a1 e2       	ldi	r26, 0x21	; 33
 d6a:	1a 2e       	mov	r1, r26
 d6c:	aa 1b       	sub	r26, r26
 d6e:	bb 1b       	sub	r27, r27
 d70:	fd 01       	movw	r30, r26
 d72:	0d c0       	rjmp	.+26     	; 0xd8e <__udivmodsi4_ep>

00000d74 <__udivmodsi4_loop>:
 d74:	aa 1f       	adc	r26, r26
 d76:	bb 1f       	adc	r27, r27
 d78:	ee 1f       	adc	r30, r30
 d7a:	ff 1f       	adc	r31, r31
 d7c:	a2 17       	cp	r26, r18
 d7e:	b3 07       	cpc	r27, r19
 d80:	e4 07       	cpc	r30, r20
 d82:	f5 07       	cpc	r31, r21
 d84:	20 f0       	brcs	.+8      	; 0xd8e <__udivmodsi4_ep>
 d86:	a2 1b       	sub	r26, r18
 d88:	b3 0b       	sbc	r27, r19
 d8a:	e4 0b       	sbc	r30, r20
 d8c:	f5 0b       	sbc	r31, r21

00000d8e <__udivmodsi4_ep>:
 d8e:	66 1f       	adc	r22, r22
 d90:	77 1f       	adc	r23, r23
 d92:	88 1f       	adc	r24, r24
 d94:	99 1f       	adc	r25, r25
 d96:	1a 94       	dec	r1
 d98:	69 f7       	brne	.-38     	; 0xd74 <__udivmodsi4_loop>
 d9a:	60 95       	com	r22
 d9c:	70 95       	com	r23
 d9e:	80 95       	com	r24
 da0:	90 95       	com	r25
 da2:	9b 01       	movw	r18, r22
 da4:	ac 01       	movw	r20, r24
 da6:	bd 01       	movw	r22, r26
 da8:	cf 01       	movw	r24, r30
 daa:	08 95       	ret

00000dac <__umulhisi3>:
 dac:	a2 9f       	mul	r26, r18
 dae:	b0 01       	movw	r22, r0
 db0:	b3 9f       	mul	r27, r19
 db2:	c0 01       	movw	r24, r0
 db4:	a3 9f       	mul	r26, r19
 db6:	70 0d       	add	r23, r0
 db8:	81 1d       	adc	r24, r1
 dba:	11 24       	eor	r1, r1
 dbc:	91 1d       	adc	r25, r1
 dbe:	b2 9f       	mul	r27, r18
 dc0:	70 0d       	add	r23, r0
 dc2:	81 1d       	adc	r24, r1
 dc4:	11 24       	eor	r1, r1
 dc6:	91 1d       	adc	r25, r1
 dc8:	08 95       	ret

00000dca <__muluhisi3>:
 dca:	f0 df       	rcall	.-32     	; 0xdac <__umulhisi3>
 dcc:	a5 9f       	mul	r26, r21
 dce:	90 0d       	add	r25, r0
 dd0:	b4 9f       	mul	r27, r20
 dd2:	90 0d       	add	r25, r0
 dd4:	a4 9f       	mul	r26, r20
 dd6:	80 0d       	add	r24, r0
 dd8:	91 1d       	adc	r25, r1
 dda:	11 24       	eor	r1, r1
 ddc:	08 95       	ret

00000dde <__itoa_ncheck>:
 dde:	bb 27       	eor	r27, r27
 de0:	4a 30       	cpi	r20, 0x0A	; 10
 de2:	31 f4       	brne	.+12     	; 0xdf0 <__itoa_ncheck+0x12>
 de4:	99 23       	and	r25, r25
 de6:	22 f4       	brpl	.+8      	; 0xdf0 <__itoa_ncheck+0x12>
 de8:	bd e2       	ldi	r27, 0x2D	; 45
 dea:	90 95       	com	r25
 dec:	81 95       	neg	r24
 dee:	9f 4f       	sbci	r25, 0xFF	; 255
 df0:	01 c0       	rjmp	.+2      	; 0xdf4 <__utoa_common>

00000df2 <__utoa_ncheck>:
 df2:	bb 27       	eor	r27, r27

00000df4 <__utoa_common>:
 df4:	fb 01       	movw	r30, r22
 df6:	55 27       	eor	r21, r21
 df8:	aa 27       	eor	r26, r26
 dfa:	88 0f       	add	r24, r24
 dfc:	99 1f       	adc	r25, r25
 dfe:	aa 1f       	adc	r26, r26
 e00:	a4 17       	cp	r26, r20
 e02:	10 f0       	brcs	.+4      	; 0xe08 <__utoa_common+0x14>
 e04:	a4 1b       	sub	r26, r20
 e06:	83 95       	inc	r24
 e08:	50 51       	subi	r21, 0x10	; 16
 e0a:	b9 f7       	brne	.-18     	; 0xdfa <__utoa_common+0x6>
 e0c:	a0 5d       	subi	r26, 0xD0	; 208
 e0e:	aa 33       	cpi	r26, 0x3A	; 58
 e10:	08 f0       	brcs	.+2      	; 0xe14 <__utoa_common+0x20>
 e12:	a9 5d       	subi	r26, 0xD9	; 217
 e14:	a1 93       	st	Z+, r26
 e16:	00 97       	sbiw	r24, 0x00	; 0
 e18:	79 f7       	brne	.-34     	; 0xdf8 <__utoa_common+0x4>
 e1a:	b1 11       	cpse	r27, r1
 e1c:	b1 93       	st	Z+, r27
 e1e:	11 92       	st	Z+, r1
 e20:	cb 01       	movw	r24, r22
 e22:	00 c0       	rjmp	.+0      	; 0xe24 <strrev>

00000e24 <strrev>:
 e24:	dc 01       	movw	r26, r24
 e26:	fc 01       	movw	r30, r24
 e28:	67 2f       	mov	r22, r23
 e2a:	71 91       	ld	r23, Z+
 e2c:	77 23       	and	r23, r23
 e2e:	e1 f7       	brne	.-8      	; 0xe28 <strrev+0x4>
 e30:	32 97       	sbiw	r30, 0x02	; 2
 e32:	04 c0       	rjmp	.+8      	; 0xe3c <strrev+0x18>
 e34:	7c 91       	ld	r23, X
 e36:	6d 93       	st	X+, r22
 e38:	70 83       	st	Z, r23
 e3a:	62 91       	ld	r22, -Z
 e3c:	ae 17       	cp	r26, r30
 e3e:	bf 07       	cpc	r27, r31
 e40:	c8 f3       	brcs	.-14     	; 0xe34 <strrev+0x10>
 e42:	08 95       	ret

00000e44 <_exit>:
 e44:	f8 94       	cli

00000e46 <__stop_program>:
 e46:	ff cf       	rjmp	.-2      	; 0xe46 <__stop_program>
