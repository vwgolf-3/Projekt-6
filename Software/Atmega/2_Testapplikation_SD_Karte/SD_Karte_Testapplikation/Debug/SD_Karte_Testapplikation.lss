
SD_Karte_Testapplikation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  0000227c  00002310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000227c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021f  00800214  00800214  00002324  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003833  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f9  00000000  00000000  00005d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000174b  00000000  00000000  00006e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000588  00000000  00000000  0000856c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c9a  00000000  00000000  00008af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025bd  00000000  00000000  0000978e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000bd4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c2       	rjmp	.+1170   	; 0x494 <__ctors_end>
       2:	00 00       	nop
       4:	68 c2       	rjmp	.+1232   	; 0x4d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c2       	rjmp	.+1228   	; 0x4d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c2       	rjmp	.+1224   	; 0x4d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c2       	rjmp	.+1220   	; 0x4d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c2       	rjmp	.+1216   	; 0x4d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c2       	rjmp	.+1212   	; 0x4d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c2       	rjmp	.+1208   	; 0x4d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c2       	rjmp	.+1204   	; 0x4d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c2       	rjmp	.+1200   	; 0x4d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c2       	rjmp	.+1196   	; 0x4d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c2       	rjmp	.+1192   	; 0x4d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c2       	rjmp	.+1188   	; 0x4d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c2       	rjmp	.+1184   	; 0x4d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c2       	rjmp	.+1180   	; 0x4d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c2       	rjmp	.+1176   	; 0x4d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c2       	rjmp	.+1172   	; 0x4d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c2       	rjmp	.+1168   	; 0x4d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c2       	rjmp	.+1164   	; 0x4d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c2       	rjmp	.+1160   	; 0x4d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c2       	rjmp	.+1156   	; 0x4d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c2       	rjmp	.+1152   	; 0x4d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c2       	rjmp	.+1148   	; 0x4d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c2       	rjmp	.+1144   	; 0x4d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c2       	rjmp	.+1140   	; 0x4d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c2       	rjmp	.+1136   	; 0x4d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c2       	rjmp	.+1132   	; 0x4d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c2       	rjmp	.+1128   	; 0x4d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c2       	rjmp	.+1124   	; 0x4d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c2       	rjmp	.+1120   	; 0x4d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c2       	rjmp	.+1116   	; 0x4d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c2       	rjmp	.+1112   	; 0x4d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c2       	rjmp	.+1108   	; 0x4d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c2       	rjmp	.+1104   	; 0x4d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c2       	rjmp	.+1100   	; 0x4d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c2       	rjmp	.+1096   	; 0x4d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c2       	rjmp	.+1092   	; 0x4d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c2       	rjmp	.+1088   	; 0x4d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c2       	rjmp	.+1084   	; 0x4d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c2       	rjmp	.+1080   	; 0x4d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1a c2       	rjmp	.+1076   	; 0x4d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c2       	rjmp	.+1072   	; 0x4d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c2       	rjmp	.+1068   	; 0x4d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c2       	rjmp	.+1064   	; 0x4d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c2       	rjmp	.+1060   	; 0x4d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c2       	rjmp	.+1056   	; 0x4d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c2       	rjmp	.+1052   	; 0x4d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c c2       	rjmp	.+1048   	; 0x4d6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0a c2       	rjmp	.+1044   	; 0x4d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c2       	rjmp	.+1040   	; 0x4d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c2       	rjmp	.+1036   	; 0x4d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c2       	rjmp	.+1032   	; 0x4d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c2       	rjmp	.+1028   	; 0x4d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c2       	rjmp	.+1024   	; 0x4d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c1       	rjmp	.+1020   	; 0x4d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c1       	rjmp	.+1016   	; 0x4d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c1       	rjmp	.+1012   	; 0x4d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	59 0e       	add	r5, r25
      e6:	79 0e       	add	r7, r25
      e8:	c4 0e       	add	r12, r20
      ea:	65 0f       	add	r22, r21
      ec:	65 0f       	add	r22, r21
      ee:	fc 0e       	add	r15, r28
      f0:	05 0f       	add	r16, r21
      f2:	05 0f       	add	r16, r21
      f4:	05 0f       	add	r16, r21
      f6:	62 0f       	add	r22, r18

000000f8 <__trampolines_end>:
      f8:	20 46       	sbci	r18, 0x60	; 96
      fa:	72 65       	ori	r23, 0x52	; 82
      fc:	65 20       	and	r6, r5
      fe:	4d 65       	ori	r20, 0x5D	; 93
     100:	6d 6f       	ori	r22, 0xFD	; 253
     102:	72 79       	andi	r23, 0x92	; 146
     104:	3a 20       	and	r3, r10
	...

00000107 <__c.2096>:
     107:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000116 <__c.2069>:
     116:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     126:	20 63 6c 75 73 74 65 72 00                           cluster.

0000012f <__c.2067>:
     12f:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
     13f:	68 61 69 6e 00                                      hain.

00000144 <__c.2059>:
     144:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 00         File Created!.

00000153 <__c.2053>:
     153:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     163:	21 00                                               !.

00000165 <__c.2044>:
     165:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
     175:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

0000017f <__c.2042>:
     17f:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     18f:	21 00                                               !.

00000191 <__c.2040>:
     191:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

000001a2 <__c.2038>:
     1a2:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     1b2:	78 69 73 74 69 6e 67 00                             xisting.

000001ba <__c.2002>:
     1ba:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     1ca:	2e 2e 00                                            ...

000001cd <__c.1990>:
     1cd:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     1dd:	20 63 6c 75 73 74 65 72 00                           cluster.

000001e6 <__c.1969>:
     1e6:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     1f6:	20 63 6c 75 73 74 65 72 00                           cluster.

000001ff <__c.1961>:
     1ff:	52 4f 4f 54 00                                      ROOT.

00000204 <__c.1959>:
     204:	44 49 52 00                                         DIR.

00000208 <__c.1957>:
     208:	20 20 20 00                                            .

0000020c <__c.1955>:
     20c:	46 49 4c 45 00                                      FILE.

00000211 <__c.1953>:
     211:	20 20 20 00                                            .

00000215 <__c.1947>:
     215:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

00000223 <__c.1945>:
     223:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

0000022e <__c.1940>:
     22e:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     23e:	69 73 74 21 00                                      ist!.

00000243 <__c.2131>:
     243:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

00000254 <__c.2126>:
     254:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     264:	6f 6e 67 2e 2e 00                                   ong...

0000026a <__c.2119>:
     26a:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     27a:	20 00                                                .

0000027c <__c.2113>:
     27c:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

0000028d <__c.2108>:
     28d:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

0000029b <__c.2105>:
     29b:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     2ab:	21 00                                               !.

000002ad <__c.2103>:
     2ad:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

000002bc <__c.2099>:
     2bc:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     2cc:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000002d6 <__c.2095>:
     2d6:	45 72 61 73 65 64 21 00                             Erased!.

000002de <__c.2093>:
     2de:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

000002ed <__c.2090>:
     2ed:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     2fd:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     30d:	39 29 3a 00                                         9):.

00000311 <__c.2087>:
     311:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     321:	73 61 62 6c 65 64 21 00                             sabled!.

00000329 <__c.2085>:
     329:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     339:	28 30 2d 39 29 3a 20 00                             (0-9): .

00000341 <__c.2083>:
     341:	3e 20 39 20 3a 20 52 65 61 64 20 53 44 20 4d 65     > 9 : Read SD Me
     351:	6d 6f 72 79 20 43 61 70 61 63 69 74 79 20 28 54     mory Capacity (T
     361:	6f 74 61 6c 2f 46 72 65 65 29 00                    otal/Free).

0000036c <__c.2081>:
     36c:	3e 20 38 20 3a 20 44 65 6c 65 74 65 20 46 69 6c     > 8 : Delete Fil
     37c:	65 00                                               e.

0000037e <__c.2079>:
     37e:	3e 20 37 20 3a 20 43 72 65 61 74 65 20 46 69 6c     > 7 : Create Fil
     38e:	65 00                                               e.

00000390 <__c.2077>:
     390:	3e 20 36 20 3a 20 52 65 61 64 20 46 69 6c 65 00     > 6 : Read File.

000003a0 <__c.2075>:
     3a0:	3e 20 35 20 3a 20 47 65 74 20 66 69 6c 65 20 6c     > 5 : Get file l
     3b0:	69 73 74 00                                         ist.

000003b4 <__c.2073>:
     3b4:	3e 20 32 20 3a 20 52 65 61 64 20 73 69 6e 67 6c     > 2 : Read singl
     3c4:	65 20 42 6c 6f 63 6b 00                             e Block.

000003cc <__c.2071>:
     3cc:	3e 20 31 20 3a 20 57 72 69 74 65 20 73 69 6e 67     > 1 : Write sing
     3dc:	6c 65 20 42 6c 6f 63 6b 00                          le Block.

000003e5 <__c.2069>:
     3e5:	3e 20 30 20 3a 20 45 72 61 73 65 20 42 6c 6f 63     > 0 : Erase Bloc
     3f5:	6b 73 00                                            ks.

000003f8 <__c.2067>:
     3f8:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

00000409 <__c.2065>:
     409:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

0000041a <__c.2063>:
     41a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     42a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     43a:	2a 2a 2a 00                                         ***.

0000043e <__c.2061>:
     43e:	20 44 68 61 72 6d 61 6e 69 27 73 20 6d 69 63 72      Dharmani's micr
     44e:	6f 53 44 20 43 61 72 64 20 54 65 73 74 69 6e 67     oSD Card Testing
     45e:	2e 2e 00                                            ...

00000461 <__c.2059>:
     461:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     471:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     481:	2a 2a 2a 00                                         ***.

00000485 <__c.1807>:
     485:	53 44 20 69 6e 69 74 20 66 61 69 6c 2e 2e 00        SD init fail...

00000494 <__ctors_end>:
     494:	11 24       	eor	r1, r1
     496:	1f be       	out	0x3f, r1	; 63
     498:	cf ef       	ldi	r28, 0xFF	; 255
     49a:	d1 e2       	ldi	r29, 0x21	; 33
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	0c bf       	out	0x3c, r16	; 60

000004a4 <__do_copy_data>:
     4a4:	12 e0       	ldi	r17, 0x02	; 2
     4a6:	a0 e0       	ldi	r26, 0x00	; 0
     4a8:	b2 e0       	ldi	r27, 0x02	; 2
     4aa:	ec e7       	ldi	r30, 0x7C	; 124
     4ac:	f2 e2       	ldi	r31, 0x22	; 34
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0b bf       	out	0x3b, r16	; 59
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__do_copy_data+0x14>
     4b4:	07 90       	elpm	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	a4 31       	cpi	r26, 0x14	; 20
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__do_copy_data+0x10>

000004be <__do_clear_bss>:
     4be:	24 e0       	ldi	r18, 0x04	; 4
     4c0:	a4 e1       	ldi	r26, 0x14	; 20
     4c2:	b2 e0       	ldi	r27, 0x02	; 2
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	a3 33       	cpi	r26, 0x33	; 51
     4ca:	b2 07       	cpc	r27, r18
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
     4ce:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <main>
     4d2:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <_exit>

000004d6 <__bad_interrupt>:
     4d6:	94 cd       	rjmp	.-1240   	; 0x0 <__vectors>

000004d8 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     4e0:	a0 91 2b 04 	lds	r26, 0x042B	; 0x80042b <sectorPerCluster>
     4e4:	b0 91 2c 04 	lds	r27, 0x042C	; 0x80042c <sectorPerCluster+0x1>
     4e8:	c0 90 19 02 	lds	r12, 0x0219	; 0x800219 <firstDataSector>
     4ec:	d0 90 1a 02 	lds	r13, 0x021A	; 0x80021a <firstDataSector+0x1>
     4f0:	e0 90 1b 02 	lds	r14, 0x021B	; 0x80021b <firstDataSector+0x2>
     4f4:	f0 90 1c 02 	lds	r15, 0x021C	; 0x80021c <firstDataSector+0x3>
     4f8:	9b 01       	movw	r18, r22
     4fa:	ac 01       	movw	r20, r24
     4fc:	22 50       	subi	r18, 0x02	; 2
     4fe:	31 09       	sbc	r19, r1
     500:	41 09       	sbc	r20, r1
     502:	51 09       	sbc	r21, r1
     504:	0e 94 32 11 	call	0x2264	; 0x2264 <__muluhisi3>
     508:	6c 0d       	add	r22, r12
     50a:	7d 1d       	adc	r23, r13
     50c:	8e 1d       	adc	r24, r14
     50e:	9f 1d       	adc	r25, r15
}
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	df 90       	pop	r13
     516:	cf 90       	pop	r12
     518:	08 95       	ret

0000051a <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     51a:	4f 92       	push	r4
     51c:	5f 92       	push	r5
     51e:	6f 92       	push	r6
     520:	7f 92       	push	r7
     522:	8f 92       	push	r8
     524:	9f 92       	push	r9
     526:	af 92       	push	r10
     528:	bf 92       	push	r11
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	d4 2f       	mov	r29, r20
     53c:	28 01       	movw	r4, r16
     53e:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     540:	40 91 31 04 	lds	r20, 0x0431	; 0x800431 <reservedSectorCount>
     544:	50 91 32 04 	lds	r21, 0x0432	; 0x800432 <reservedSectorCount+0x1>
     548:	4b 01       	movw	r8, r22
     54a:	5c 01       	movw	r10, r24
     54c:	88 0c       	add	r8, r8
     54e:	99 1c       	adc	r9, r9
     550:	aa 1c       	adc	r10, r10
     552:	bb 1c       	adc	r11, r11
     554:	88 0c       	add	r8, r8
     556:	99 1c       	adc	r9, r9
     558:	aa 1c       	adc	r10, r10
     55a:	bb 1c       	adc	r11, r11
     55c:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <bytesPerSector>
     560:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <bytesPerSector+0x1>
     564:	c0 90 14 02 	lds	r12, 0x0214	; 0x800214 <__data_end>
     568:	d0 90 15 02 	lds	r13, 0x0215	; 0x800215 <__data_end+0x1>
     56c:	e0 90 16 02 	lds	r14, 0x0216	; 0x800216 <__data_end+0x2>
     570:	f0 90 17 02 	lds	r15, 0x0217	; 0x800217 <__data_end+0x3>
     574:	c4 0e       	add	r12, r20
     576:	d5 1e       	adc	r13, r21
     578:	e1 1c       	adc	r14, r1
     57a:	f1 1c       	adc	r15, r1
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	c5 01       	movw	r24, r10
     582:	b4 01       	movw	r22, r8
     584:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__udivmodsi4>
     588:	c2 0e       	add	r12, r18
     58a:	d3 1e       	adc	r13, r19
     58c:	e4 1e       	adc	r14, r20
     58e:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     590:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <bytesPerSector>
     594:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <bytesPerSector+0x1>
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	c5 01       	movw	r24, r10
     59e:	b4 01       	movw	r22, r8
     5a0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__udivmodsi4>
     5a4:	4b 01       	movw	r8, r22
     5a6:	5c 01       	movw	r10, r24
     5a8:	ca e0       	ldi	r28, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     5aa:	c7 01       	movw	r24, r14
     5ac:	b6 01       	movw	r22, r12
     5ae:	0e 94 2c 10 	call	0x2058	; 0x2058 <SD_readSingleBlock>
     5b2:	88 23       	and	r24, r24
     5b4:	11 f0       	breq	.+4      	; 0x5ba <getSetNextCluster+0xa0>
     5b6:	c1 50       	subi	r28, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     5b8:	c1 f7       	brne	.-16     	; 0x5aa <getSetNextCluster+0x90>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     5ba:	f4 01       	movw	r30, r8
     5bc:	e5 5d       	subi	r30, 0xD5	; 213
     5be:	fd 4f       	sbci	r31, 0xFD	; 253

if(get_set == GET)
     5c0:	d1 11       	cpse	r29, r1
     5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <getSetNextCluster+0xba>
  return ((*FATEntryValue) & 0x0fffffff);
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	a2 81       	ldd	r26, Z+2	; 0x02
     5ca:	b3 81       	ldd	r27, Z+3	; 0x03
     5cc:	bc 01       	movw	r22, r24
     5ce:	cd 01       	movw	r24, r26
     5d0:	9f 70       	andi	r25, 0x0F	; 15
     5d2:	0b c0       	rjmp	.+22     	; 0x5ea <getSetNextCluster+0xd0>

*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     5d4:	40 82       	st	Z, r4
     5d6:	51 82       	std	Z+1, r5	; 0x01
     5d8:	62 82       	std	Z+2, r6	; 0x02
     5da:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     5dc:	c7 01       	movw	r24, r14
     5de:	b6 01       	movw	r22, r12
     5e0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <SD_writeSingleBlock>

return (0);
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	cb 01       	movw	r24, r22
}
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	df 90       	pop	r13
     5f8:	cf 90       	pop	r12
     5fa:	bf 90       	pop	r11
     5fc:	af 90       	pop	r10
     5fe:	9f 90       	pop	r9
     600:	8f 90       	pop	r8
     602:	7f 90       	pop	r7
     604:	6f 90       	pop	r6
     606:	5f 90       	pop	r5
     608:	4f 90       	pop	r4
     60a:	08 95       	ret

0000060c <getSetFreeCluster>:
//return: -next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        -total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//        -0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	d8 2f       	mov	r29, r24
     61a:	c6 2f       	mov	r28, r22
     61c:	69 01       	movw	r12, r18
     61e:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     620:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     624:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
     628:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <__data_end+0x2>
     62c:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <__data_end+0x3>
     630:	bc 01       	movw	r22, r24
     632:	cd 01       	movw	r24, r26
     634:	6f 5f       	subi	r22, 0xFF	; 255
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	8f 4f       	sbci	r24, 0xFF	; 255
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	0e 94 2c 10 	call	0x2058	; 0x2058 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     640:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <buffer>
     644:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <buffer+0x1>
     648:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <buffer+0x2>
     64c:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <buffer+0x3>
     650:	82 35       	cpi	r24, 0x52	; 82
     652:	92 45       	sbci	r25, 0x52	; 82
     654:	a1 46       	sbci	r26, 0x61	; 97
     656:	b1 44       	sbci	r27, 0x41	; 65
     658:	09 f0       	breq	.+2      	; 0x65c <getSetFreeCluster+0x50>
     65a:	58 c0       	rjmp	.+176    	; 0x70c <getSetFreeCluster+0x100>
     65c:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <buffer+0x1e4>
     660:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <buffer+0x1e5>
     664:	a0 91 11 04 	lds	r26, 0x0411	; 0x800411 <buffer+0x1e6>
     668:	b0 91 12 04 	lds	r27, 0x0412	; 0x800412 <buffer+0x1e7>
     66c:	82 37       	cpi	r24, 0x72	; 114
     66e:	92 47       	sbci	r25, 0x72	; 114
     670:	a1 44       	sbci	r26, 0x41	; 65
     672:	b1 46       	sbci	r27, 0x61	; 97
     674:	09 f0       	breq	.+2      	; 0x678 <getSetFreeCluster+0x6c>
     676:	4e c0       	rjmp	.+156    	; 0x714 <getSetFreeCluster+0x108>
     678:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <buffer+0x1fc>
     67c:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <buffer+0x1fd>
     680:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <buffer+0x1fe>
     684:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <buffer+0x1ff>
     688:	00 97       	sbiw	r24, 0x00	; 0
     68a:	a5 45       	sbci	r26, 0x55	; 85
     68c:	ba 4a       	sbci	r27, 0xAA	; 170
     68e:	09 f0       	breq	.+2      	; 0x692 <getSetFreeCluster+0x86>
     690:	45 c0       	rjmp	.+138    	; 0x71c <getSetFreeCluster+0x110>
  return 0xffffffff;

 if(get_set == GET)
     692:	c1 11       	cpse	r28, r1
     694:	14 c0       	rjmp	.+40     	; 0x6be <getSetFreeCluster+0xb2>
 {
   if(totOrNext == TOTAL_FREE)
     696:	d1 30       	cpi	r29, 0x01	; 1
     698:	49 f4       	brne	.+18     	; 0x6ac <getSetFreeCluster+0xa0>
      return(FS->freeClusterCount);
     69a:	60 91 13 04 	lds	r22, 0x0413	; 0x800413 <buffer+0x1e8>
     69e:	70 91 14 04 	lds	r23, 0x0414	; 0x800414 <buffer+0x1e9>
     6a2:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <buffer+0x1ea>
     6a6:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <buffer+0x1eb>
     6aa:	3b c0       	rjmp	.+118    	; 0x722 <getSetFreeCluster+0x116>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     6ac:	60 91 17 04 	lds	r22, 0x0417	; 0x800417 <buffer+0x1ec>
     6b0:	70 91 18 04 	lds	r23, 0x0418	; 0x800418 <buffer+0x1ed>
     6b4:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <buffer+0x1ee>
     6b8:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <buffer+0x1ef>
     6bc:	32 c0       	rjmp	.+100    	; 0x722 <getSetFreeCluster+0x116>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     6be:	d1 30       	cpi	r29, 0x01	; 1
     6c0:	49 f4       	brne	.+18     	; 0x6d4 <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
     6c2:	c0 92 13 04 	sts	0x0413, r12	; 0x800413 <buffer+0x1e8>
     6c6:	d0 92 14 04 	sts	0x0414, r13	; 0x800414 <buffer+0x1e9>
     6ca:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <buffer+0x1ea>
     6ce:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <buffer+0x1eb>
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <getSetFreeCluster+0xd8>
   else // when totOrNext = NEXT_FREE
      FS->nextFreeCluster = FSEntry;
     6d4:	c0 92 17 04 	sts	0x0417, r12	; 0x800417 <buffer+0x1ec>
     6d8:	d0 92 18 04 	sts	0x0418, r13	; 0x800418 <buffer+0x1ed>
     6dc:	e0 92 19 04 	sts	0x0419, r14	; 0x800419 <buffer+0x1ee>
     6e0:	f0 92 1a 04 	sts	0x041A, r15	; 0x80041a <buffer+0x1ef>
 
   error = SD_writeSingleBlock(unusedSectors + 1);    //update FSinfo
     6e4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     6e8:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
     6ec:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <__data_end+0x2>
     6f0:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <__data_end+0x3>
     6f4:	bc 01       	movw	r22, r24
     6f6:	cd 01       	movw	r24, r26
     6f8:	6f 5f       	subi	r22, 0xFF	; 255
     6fa:	7f 4f       	sbci	r23, 0xFF	; 255
     6fc:	8f 4f       	sbci	r24, 0xFF	; 255
     6fe:	9f 4f       	sbci	r25, 0xFF	; 255
     700:	0e 94 5d 10 	call	0x20ba	; 0x20ba <SD_writeSingleBlock>
 }
 return 0xffffffff;
     704:	6f ef       	ldi	r22, 0xFF	; 255
     706:	7f ef       	ldi	r23, 0xFF	; 255
     708:	cb 01       	movw	r24, r22
     70a:	0b c0       	rjmp	.+22     	; 0x722 <getSetFreeCluster+0x116>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
     70c:	6f ef       	ldi	r22, 0xFF	; 255
     70e:	7f ef       	ldi	r23, 0xFF	; 255
     710:	cb 01       	movw	r24, r22
     712:	07 c0       	rjmp	.+14     	; 0x722 <getSetFreeCluster+0x116>
     714:	6f ef       	ldi	r22, 0xFF	; 255
     716:	7f ef       	ldi	r23, 0xFF	; 255
     718:	cb 01       	movw	r24, r22
     71a:	03 c0       	rjmp	.+6      	; 0x722 <getSetFreeCluster+0x116>
     71c:	6f ef       	ldi	r22, 0xFF	; 255
     71e:	7f ef       	ldi	r23, 0xFF	; 255
     720:	cb 01       	movw	r24, r22
      FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);    //update FSinfo
 }
 return 0xffffffff;
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

00000730 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     73c:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
     740:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
     744:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end+0x2>
     748:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <__data_end+0x3>

SD_readSingleBlock(0);
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	cb 01       	movw	r24, r22
     752:	0e 94 2c 10 	call	0x2058	; 0x2058 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) //check if it is boot sector
     756:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <buffer>
     75a:	8d 7f       	andi	r24, 0xFD	; 253
     75c:	89 3e       	cpi	r24, 0xE9	; 233
     75e:	01 f1       	breq	.+64     	; 0x7a0 <getBootSectorData+0x70>
{
  mbr = (struct MBRinfo_Structure *) buffer;         //if it is not boot sector, it must be MBR
 
  if(mbr->signature != 0xaa55) return 1;            //if it is not even MBR then it's not FAT32
     760:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <buffer+0x1fe>
     764:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <buffer+0x1ff>
     768:	85 35       	cpi	r24, 0x55	; 85
     76a:	9a 4a       	sbci	r25, 0xAA	; 170
     76c:	09 f0       	breq	.+2      	; 0x770 <getBootSectorData+0x40>
     76e:	96 c0       	rjmp	.+300    	; 0x89c <getBootSectorData+0x16c>
     
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     770:	60 91 f1 03 	lds	r22, 0x03F1	; 0x8003f1 <buffer+0x1c6>
     774:	70 91 f2 03 	lds	r23, 0x03F2	; 0x8003f2 <buffer+0x1c7>
     778:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <buffer+0x1c8>
     77c:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <buffer+0x1c9>
     780:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <__data_end>
     784:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <__data_end+0x1>
     788:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__data_end+0x2>
     78c:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__data_end+0x3>
 
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     790:	0e 94 2c 10 	call	0x2058	; 0x2058 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)  return 1; 
     794:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <buffer>
     798:	8d 7f       	andi	r24, 0xFD	; 253
     79a:	89 3e       	cpi	r24, 0xE9	; 233
     79c:	09 f0       	breq	.+2      	; 0x7a0 <getBootSectorData+0x70>
     79e:	80 c0       	rjmp	.+256    	; 0x8a0 <getBootSectorData+0x170>
}

bytesPerSector      = bpb->bytesPerSector;
     7a0:	eb e2       	ldi	r30, 0x2B	; 43
     7a2:	f2 e0       	ldi	r31, 0x02	; 2
     7a4:	83 85       	ldd	r24, Z+11	; 0x0b
     7a6:	94 85       	ldd	r25, Z+12	; 0x0c
     7a8:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <bytesPerSector+0x1>
     7ac:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <bytesPerSector>
sectorPerCluster    = bpb->sectorPerCluster;
     7b0:	85 85       	ldd	r24, Z+13	; 0x0d
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <sectorPerCluster+0x1>
     7b8:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <sectorPerCluster>
reservedSectorCount = bpb->reservedSectorCount;
     7bc:	c6 85       	ldd	r28, Z+14	; 0x0e
     7be:	d7 85       	ldd	r29, Z+15	; 0x0f
     7c0:	d0 93 32 04 	sts	0x0432, r29	; 0x800432 <reservedSectorCount+0x1>
     7c4:	c0 93 31 04 	sts	0x0431, r28	; 0x800431 <reservedSectorCount>
rootCluster         = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     7c8:	84 a5       	ldd	r24, Z+44	; 0x2c
     7ca:	95 a5       	ldd	r25, Z+45	; 0x2d
     7cc:	a6 a5       	ldd	r26, Z+46	; 0x2e
     7ce:	b7 a5       	ldd	r27, Z+47	; 0x2f
     7d0:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <rootCluster>
     7d4:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <rootCluster+0x1>
     7d8:	a0 93 25 02 	sts	0x0225, r26	; 0x800225 <rootCluster+0x2>
     7dc:	b0 93 26 02 	sts	0x0226, r27	; 0x800226 <rootCluster+0x3>
firstDataSector     = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     7e0:	00 91 31 04 	lds	r16, 0x0431	; 0x800431 <reservedSectorCount>
     7e4:	10 91 32 04 	lds	r17, 0x0432	; 0x800432 <reservedSectorCount+0x1>
     7e8:	a0 89       	ldd	r26, Z+16	; 0x10
     7ea:	24 a1       	ldd	r18, Z+36	; 0x24
     7ec:	35 a1       	ldd	r19, Z+37	; 0x25
     7ee:	46 a1       	ldd	r20, Z+38	; 0x26
     7f0:	57 a1       	ldd	r21, Z+39	; 0x27
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	0e 94 32 11 	call	0x2264	; 0x2264 <__muluhisi3>
     7f8:	ab 01       	movw	r20, r22
     7fa:	bc 01       	movw	r22, r24
     7fc:	84 8d       	ldd	r24, Z+28	; 0x1c
     7fe:	95 8d       	ldd	r25, Z+29	; 0x1d
     800:	a6 8d       	ldd	r26, Z+30	; 0x1e
     802:	b7 8d       	ldd	r27, Z+31	; 0x1f
     804:	80 0f       	add	r24, r16
     806:	91 1f       	adc	r25, r17
     808:	a1 1d       	adc	r26, r1
     80a:	b1 1d       	adc	r27, r1
     80c:	84 0f       	add	r24, r20
     80e:	95 1f       	adc	r25, r21
     810:	a6 1f       	adc	r26, r22
     812:	b7 1f       	adc	r27, r23
     814:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <firstDataSector>
     818:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <firstDataSector+0x1>
     81c:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <firstDataSector+0x2>
     820:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <firstDataSector+0x3>

dataSectors   = bpb->totalSectors_F32 - bpb->reservedSectorCount - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     824:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <sectorPerCluster>
     828:	30 91 2c 04 	lds	r19, 0x042C	; 0x80042c <sectorPerCluster+0x1>
     82c:	80 a1       	ldd	r24, Z+32	; 0x20
     82e:	91 a1       	ldd	r25, Z+33	; 0x21
     830:	a2 a1       	ldd	r26, Z+34	; 0x22
     832:	b3 a1       	ldd	r27, Z+35	; 0x23
     834:	8c 1b       	sub	r24, r28
     836:	9d 0b       	sbc	r25, r29
     838:	a1 09       	sbc	r26, r1
     83a:	b1 09       	sbc	r27, r1
     83c:	7c 01       	movw	r14, r24
     83e:	8d 01       	movw	r16, r26
     840:	e4 1a       	sub	r14, r20
     842:	f5 0a       	sbc	r15, r21
     844:	06 0b       	sbc	r16, r22
     846:	17 0b       	sbc	r17, r23
     848:	c8 01       	movw	r24, r16
     84a:	b7 01       	movw	r22, r14
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__udivmodsi4>
     854:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <totalClusters>
     858:	30 93 20 02 	sts	0x0220, r19	; 0x800220 <totalClusters+0x1>
     85c:	40 93 21 02 	sts	0x0221, r20	; 0x800221 <totalClusters+0x2>
     860:	50 93 22 02 	sts	0x0222, r21	; 0x800222 <totalClusters+0x3>

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	a9 01       	movw	r20, r18
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	ce de       	rcall	.-612    	; 0x60c <getSetFreeCluster>
     870:	00 91 1f 02 	lds	r16, 0x021F	; 0x80021f <totalClusters>
     874:	10 91 20 02 	lds	r17, 0x0220	; 0x800220 <totalClusters+0x1>
     878:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <totalClusters+0x2>
     87c:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <totalClusters+0x3>
     880:	06 17       	cp	r16, r22
     882:	17 07       	cpc	r17, r23
     884:	28 07       	cpc	r18, r24
     886:	39 07       	cpc	r19, r25
     888:	20 f4       	brcc	.+8      	; 0x892 <getBootSectorData+0x162>
  freeClusterCountUpdated = 0;
     88a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <freeClusterCountUpdated>
else
  freeClusterCountUpdated = 1;
return 0;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 c0       	rjmp	.+16     	; 0x8a2 <getBootSectorData+0x172>
totalClusters = dataSectors / sectorPerCluster;

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
  freeClusterCountUpdated = 0;
else
  freeClusterCountUpdated = 1;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <freeClusterCountUpdated>
return 0;
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <getBootSectorData+0x172>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;         //if it is not boot sector, it must be MBR
 
  if(mbr->signature != 0xaa55) return 1;            //if it is not even MBR then it's not FAT32
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <getBootSectorData+0x172>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
 
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)  return 1; 
     8a0:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
  freeClusterCountUpdated = 0;
else
  freeClusterCountUpdated = 1;
return 0;
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	08 95       	ret

000008b0 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0-if no error, 1-if error
//****************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	2b 97       	sbiw	r28, 0x0b	; 11
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	bc 01       	movw	r22, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     8c6:	dc 01       	movw	r26, r24
     8c8:	8c 91       	ld	r24, X
     8ca:	8e 32       	cpi	r24, 0x2E	; 46
     8cc:	61 f1       	breq	.+88     	; 0x926 <convertFileName+0x76>
     8ce:	fb 01       	movw	r30, r22
     8d0:	31 96       	adiw	r30, 0x01	; 1
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     8d2:	91 e0       	ldi	r25, 0x01	; 1
if(fileName[j] == '.') break;
     8d4:	81 91       	ld	r24, Z+
     8d6:	8e 32       	cpi	r24, 0x2E	; 46
     8d8:	21 f0       	breq	.+8      	; 0x8e2 <convertFileName+0x32>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     8da:	9f 5f       	subi	r25, 0xFF	; 255
     8dc:	9c 30       	cpi	r25, 0x0C	; 12
     8de:	d1 f7       	brne	.-12     	; 0x8d4 <convertFileName+0x24>
     8e0:	06 c0       	rjmp	.+12     	; 0x8ee <convertFileName+0x3e>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     8e2:	99 30       	cpi	r25, 0x09	; 9
     8e4:	20 f4       	brcc	.+8      	; 0x8ee <convertFileName+0x3e>

for(k=0; k<j; k++) //setting file name
     8e6:	91 11       	cpse	r25, r1
     8e8:	08 c0       	rjmp	.+16     	; 0x8fa <convertFileName+0x4a>
     8ea:	29 2f       	mov	r18, r25
     8ec:	1e c0       	rjmp	.+60     	; 0x92a <convertFileName+0x7a>
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     8ee:	8a eb       	ldi	r24, 0xBA	; 186
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	62 c0       	rjmp	.+196    	; 0x9be <convertFileName+0x10e>
     8fa:	fb 01       	movw	r30, r22
     8fc:	9e 01       	movw	r18, r28
     8fe:	2f 5f       	subi	r18, 0xFF	; 255
     900:	3f 4f       	sbci	r19, 0xFF	; 255
     902:	4f ef       	ldi	r20, 0xFF	; 255
     904:	49 0f       	add	r20, r25
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	4f 5f       	subi	r20, 0xFF	; 255
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	46 0f       	add	r20, r22
     90e:	57 1f       	adc	r21, r23

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
     910:	81 91       	ld	r24, Z+
     912:	d9 01       	movw	r26, r18
     914:	8d 93       	st	X+, r24
     916:	9d 01       	movw	r18, r26
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     918:	4e 17       	cp	r20, r30
     91a:	5f 07       	cpc	r21, r31
     91c:	c9 f7       	brne	.-14     	; 0x910 <convertFileName+0x60>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     91e:	98 30       	cpi	r25, 0x08	; 8
     920:	78 f4       	brcc	.+30     	; 0x940 <convertFileName+0x90>
     922:	29 2f       	mov	r18, r25
     924:	02 c0       	rjmp	.+4      	; 0x92a <convertFileName+0x7a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     926:	90 e0       	ldi	r25, 0x00	; 0
if(fileName[j] == '.') break;
     928:	20 e0       	ldi	r18, 0x00	; 0

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     92a:	80 e2       	ldi	r24, 0x20	; 32
     92c:	e1 e0       	ldi	r30, 0x01	; 1
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	ec 0f       	add	r30, r28
     932:	fd 1f       	adc	r31, r29
     934:	e2 0f       	add	r30, r18
     936:	f1 1d       	adc	r31, r1
     938:	80 83       	st	Z, r24
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     93a:	2f 5f       	subi	r18, 0xFF	; 255
     93c:	28 30       	cpi	r18, 0x08	; 8
     93e:	b0 f3       	brcs	.-20     	; 0x92c <convertFileName+0x7c>
  fileNameFAT[k] = ' ';

j++;
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	29 0f       	add	r18, r25
for(k=8; k<11; k++) //setting file extention
     944:	98 e0       	ldi	r25, 0x08	; 8
{
  if(fileName[j] != 0)
     946:	fb 01       	movw	r30, r22
     948:	e2 0f       	add	r30, r18
     94a:	f1 1d       	adc	r31, r1
     94c:	80 81       	ld	r24, Z
     94e:	81 11       	cpse	r24, r1
     950:	03 c0       	rjmp	.+6      	; 0x958 <convertFileName+0xa8>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     952:	9b 30       	cpi	r25, 0x0B	; 11
     954:	50 f0       	brcs	.+20     	; 0x96a <convertFileName+0xba>
     956:	15 c0       	rjmp	.+42     	; 0x982 <convertFileName+0xd2>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	e1 e0       	ldi	r30, 0x01	; 1
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	ec 0f       	add	r30, r28
     960:	fd 1f       	adc	r31, r29
     962:	e9 0f       	add	r30, r25
     964:	f1 1d       	adc	r31, r1
     966:	80 83       	st	Z, r24
     968:	0c c0       	rjmp	.+24     	; 0x982 <convertFileName+0xd2>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     96a:	20 e2       	ldi	r18, 0x20	; 32
     96c:	e1 e0       	ldi	r30, 0x01	; 1
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	ec 0f       	add	r30, r28
     972:	fd 1f       	adc	r31, r29
     974:	e9 0f       	add	r30, r25
     976:	f1 1d       	adc	r31, r1
     978:	20 83       	st	Z, r18
     97a:	9f 5f       	subi	r25, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     97c:	9b 30       	cpi	r25, 0x0B	; 11
     97e:	b1 f7       	brne	.-20     	; 0x96c <convertFileName+0xbc>
     980:	03 c0       	rjmp	.+6      	; 0x988 <convertFileName+0xd8>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     982:	9f 5f       	subi	r25, 0xFF	; 255
     984:	9b 30       	cpi	r25, 0x0B	; 11
     986:	f8 f2       	brcs	.-66     	; 0x946 <convertFileName+0x96>
     988:	9e 01       	movw	r18, r28
     98a:	2f 5f       	subi	r18, 0xFF	; 255
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	ae 01       	movw	r20, r28
     990:	44 5f       	subi	r20, 0xF4	; 244
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	f9 01       	movw	r30, r18
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     996:	80 81       	ld	r24, Z
     998:	9f e9       	ldi	r25, 0x9F	; 159
     99a:	98 0f       	add	r25, r24
     99c:	9a 31       	cpi	r25, 0x1A	; 26
     99e:	10 f4       	brcc	.+4      	; 0x9a4 <convertFileName+0xf4>
    fileNameFAT[j] -= 0x20;
     9a0:	80 52       	subi	r24, 0x20	; 32
     9a2:	80 83       	st	Z, r24
     9a4:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     9a6:	4e 17       	cp	r20, r30
     9a8:	5f 07       	cpc	r21, r31
     9aa:	a9 f7       	brne	.-22     	; 0x996 <convertFileName+0xe6>
     9ac:	fb 01       	movw	r30, r22
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     9ae:	d9 01       	movw	r26, r18
     9b0:	8d 91       	ld	r24, X+
     9b2:	9d 01       	movw	r18, r26
     9b4:	81 93       	st	Z+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     9b6:	a4 17       	cp	r26, r20
     9b8:	b5 07       	cpc	r27, r21
     9ba:	c9 f7       	brne	.-14     	; 0x9ae <convertFileName+0xfe>
  fileName[j] = fileNameFAT[j];

return 0;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
}
     9be:	2b 96       	adiw	r28, 0x0b	; 11
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     9d0:	4f 92       	push	r4
     9d2:	5f 92       	push	r5
     9d4:	6f 92       	push	r6
     9d6:	7f 92       	push	r7
     9d8:	8f 92       	push	r8
     9da:	9f 92       	push	r9
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
  unsigned long cluster, *value, sector;
  unsigned char i;
   
      startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	20 e8       	ldi	r18, 0x80	; 128
     9f2:	c2 22       	and	r12, r18
    for(cluster =startCluster; cluster <totalClusters; cluster+=128)
     9f4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <totalClusters>
     9f8:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <totalClusters+0x1>
     9fc:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <totalClusters+0x2>
     a00:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <totalClusters+0x3>
     a04:	c8 16       	cp	r12, r24
     a06:	d9 06       	cpc	r13, r25
     a08:	ea 06       	cpc	r14, r26
     a0a:	fb 06       	cpc	r15, r27
     a0c:	08 f0       	brcs	.+2      	; 0xa10 <searchNextFreeCluster+0x40>
     a0e:	70 c0       	rjmp	.+224    	; 0xaf0 <searchNextFreeCluster+0x120>
     a10:	46 01       	movw	r8, r12
     a12:	57 01       	movw	r10, r14
     a14:	88 0c       	add	r8, r8
     a16:	99 1c       	adc	r9, r9
     a18:	aa 1c       	adc	r10, r10
     a1a:	bb 1c       	adc	r11, r11
     a1c:	88 0c       	add	r8, r8
     a1e:	99 1c       	adc	r9, r9
     a20:	aa 1c       	adc	r10, r10
     a22:	bb 1c       	adc	r11, r11
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
         value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     a24:	cb e2       	ldi	r28, 0x2B	; 43
     a26:	d2 e0       	ldi	r29, 0x02	; 2
  unsigned char i;
   
      startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     a28:	40 91 31 04 	lds	r20, 0x0431	; 0x800431 <reservedSectorCount>
     a2c:	50 91 32 04 	lds	r21, 0x0432	; 0x800432 <reservedSectorCount+0x1>
     a30:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <bytesPerSector>
     a34:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <bytesPerSector+0x1>
      SD_readSingleBlock(sector);
     a38:	40 90 14 02 	lds	r4, 0x0214	; 0x800214 <__data_end>
     a3c:	50 90 15 02 	lds	r5, 0x0215	; 0x800215 <__data_end+0x1>
     a40:	60 90 16 02 	lds	r6, 0x0216	; 0x800216 <__data_end+0x2>
     a44:	70 90 17 02 	lds	r7, 0x0217	; 0x800217 <__data_end+0x3>
     a48:	44 0e       	add	r4, r20
     a4a:	55 1e       	adc	r5, r21
     a4c:	61 1c       	adc	r6, r1
     a4e:	71 1c       	adc	r7, r1
     a50:	9c 01       	movw	r18, r24
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	c5 01       	movw	r24, r10
     a58:	b4 01       	movw	r22, r8
     a5a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__udivmodsi4>
     a5e:	c3 01       	movw	r24, r6
     a60:	b2 01       	movw	r22, r4
     a62:	62 0f       	add	r22, r18
     a64:	73 1f       	adc	r23, r19
     a66:	84 1f       	adc	r24, r20
     a68:	95 1f       	adc	r25, r21
     a6a:	0e 94 2c 10 	call	0x2058	; 0x2058 <SD_readSingleBlock>
      for(i=0; i<128; i++)
      {
         value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     a6e:	88 81       	ld	r24, Y
     a70:	99 81       	ldd	r25, Y+1	; 0x01
     a72:	aa 81       	ldd	r26, Y+2	; 0x02
     a74:	bb 81       	ldd	r27, Y+3	; 0x03
     a76:	bf 70       	andi	r27, 0x0F	; 15
     a78:	89 2b       	or	r24, r25
     a7a:	8a 2b       	or	r24, r26
     a7c:	8b 2b       	or	r24, r27
     a7e:	99 f0       	breq	.+38     	; 0xaa6 <searchNextFreeCluster+0xd6>
     a80:	21 e0       	ldi	r18, 0x01	; 1
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
         value = (unsigned long *) &buffer[i*4];
     a82:	e2 2f       	mov	r30, r18
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	ee 0f       	add	r30, r30
     a8c:	ff 1f       	adc	r31, r31
         if(((*value) & 0x0fffffff) == 0)
     a8e:	e5 5d       	subi	r30, 0xD5	; 213
     a90:	fd 4f       	sbci	r31, 0xFD	; 253
     a92:	80 81       	ld	r24, Z
     a94:	91 81       	ldd	r25, Z+1	; 0x01
     a96:	a2 81       	ldd	r26, Z+2	; 0x02
     a98:	b3 81       	ldd	r27, Z+3	; 0x03
     a9a:	bf 70       	andi	r27, 0x0F	; 15
     a9c:	89 2b       	or	r24, r25
     a9e:	8a 2b       	or	r24, r26
     aa0:	8b 2b       	or	r24, r27
     aa2:	49 f4       	brne	.+18     	; 0xab6 <searchNextFreeCluster+0xe6>
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <searchNextFreeCluster+0xd8>
      startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     aa6:	20 e0       	ldi	r18, 0x00	; 0
      {
         value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
     aa8:	c7 01       	movw	r24, r14
     aaa:	b6 01       	movw	r22, r12
     aac:	62 0f       	add	r22, r18
     aae:	71 1d       	adc	r23, r1
     ab0:	81 1d       	adc	r24, r1
     ab2:	91 1d       	adc	r25, r1
     ab4:	20 c0       	rjmp	.+64     	; 0xaf6 <searchNextFreeCluster+0x126>
      startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     ab6:	2f 5f       	subi	r18, 0xFF	; 255
     ab8:	22 f7       	brpl	.-56     	; 0xa82 <searchNextFreeCluster+0xb2>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
   
      startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128)
     aba:	80 e8       	ldi	r24, 0x80	; 128
     abc:	c8 0e       	add	r12, r24
     abe:	d1 1c       	adc	r13, r1
     ac0:	e1 1c       	adc	r14, r1
     ac2:	f1 1c       	adc	r15, r1
     ac4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <totalClusters>
     ac8:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <totalClusters+0x1>
     acc:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <totalClusters+0x2>
     ad0:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <totalClusters+0x3>
     ad4:	22 e0       	ldi	r18, 0x02	; 2
     ad6:	92 0e       	add	r9, r18
     ad8:	a1 1c       	adc	r10, r1
     ada:	b1 1c       	adc	r11, r1
     adc:	c8 16       	cp	r12, r24
     ade:	d9 06       	cpc	r13, r25
     ae0:	ea 06       	cpc	r14, r26
     ae2:	fb 06       	cpc	r15, r27
     ae4:	08 f4       	brcc	.+2      	; 0xae8 <searchNextFreeCluster+0x118>
     ae6:	a0 cf       	rjmp	.-192    	; 0xa28 <searchNextFreeCluster+0x58>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      } 
    }

 return 0;
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	cb 01       	movw	r24, r22
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <searchNextFreeCluster+0x126>
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	cb 01       	movw	r24, r22
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	bf 90       	pop	r11
     b04:	af 90       	pop	r10
     b06:	9f 90       	pop	r9
     b08:	8f 90       	pop	r8
     b0a:	7f 90       	pop	r7
     b0c:	6f 90       	pop	r6
     b0e:	5f 90       	pop	r5
     b10:	4f 90       	pop	r4
     b12:	08 95       	ret

00000b14 <displayMemory>:
//          text string and send to UART
//Arguments: unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned long memory)
{
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	63 97       	sbiw	r28, 0x13	; 19
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
  unsigned char memoryString[] = "             Bytes"; //18 character long string for memory display
     b38:	23 e1       	ldi	r18, 0x13	; 19
     b3a:	e0 e0       	ldi	r30, 0x00	; 0
     b3c:	f2 e0       	ldi	r31, 0x02	; 2
     b3e:	de 01       	movw	r26, r28
     b40:	11 96       	adiw	r26, 0x01	; 1
     b42:	01 90       	ld	r0, Z+
     b44:	0d 92       	st	X+, r0
     b46:	2a 95       	dec	r18
     b48:	e1 f7       	brne	.-8      	; 0xb42 <displayMemory+0x2e>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     b4a:	1c e0       	ldi	r17, 0x0C	; 12
  {
    if(i == 5 || i == 9)
    {
       memoryString[i-1] = ','; 
     b4c:	0c e2       	ldi	r16, 0x2C	; 44
       i--;
    }
    memoryString[i-1] = (memory % 10) | 0x30;
     b4e:	0f 2e       	mov	r0, r31
     b50:	fa e0       	ldi	r31, 0x0A	; 10
     b52:	8f 2e       	mov	r8, r31
     b54:	91 2c       	mov	r9, r1
     b56:	a1 2c       	mov	r10, r1
     b58:	b1 2c       	mov	r11, r1
     b5a:	f0 2d       	mov	r31, r0
{
  unsigned char memoryString[] = "             Bytes"; //18 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i == 5 || i == 9)
     b5c:	15 30       	cpi	r17, 0x05	; 5
     b5e:	11 f0       	breq	.+4      	; 0xb64 <displayMemory+0x50>
     b60:	19 30       	cpi	r17, 0x09	; 9
     b62:	29 f4       	brne	.+10     	; 0xb6e <displayMemory+0x5a>
    {
       memoryString[i-1] = ','; 
     b64:	fe 01       	movw	r30, r28
     b66:	e1 0f       	add	r30, r17
     b68:	f1 1d       	adc	r31, r1
     b6a:	00 83       	st	Z, r16
       i--;
     b6c:	11 50       	subi	r17, 0x01	; 1
    }
    memoryString[i-1] = (memory % 10) | 0x30;
     b6e:	7e 01       	movw	r14, r28
     b70:	e1 0e       	add	r14, r17
     b72:	f1 1c       	adc	r15, r1
     b74:	a5 01       	movw	r20, r10
     b76:	94 01       	movw	r18, r8
     b78:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__udivmodsi4>
     b7c:	60 63       	ori	r22, 0x30	; 48
     b7e:	f7 01       	movw	r30, r14
     b80:	60 83       	st	Z, r22
    memory /= 10;
     b82:	62 2f       	mov	r22, r18
     b84:	73 2f       	mov	r23, r19
     b86:	84 2f       	mov	r24, r20
     b88:	95 2f       	mov	r25, r21
    if(memory == 0) break;
     b8a:	61 15       	cp	r22, r1
     b8c:	71 05       	cpc	r23, r1
     b8e:	81 05       	cpc	r24, r1
     b90:	91 05       	cpc	r25, r1
     b92:	11 f0       	breq	.+4      	; 0xb98 <displayMemory+0x84>
//************************************************************
void displayMemory (unsigned long memory)
{
  unsigned char memoryString[] = "             Bytes"; //18 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     b94:	11 50       	subi	r17, 0x01	; 1
     b96:	11 f7       	brne	.-60     	; 0xb5c <displayMemory+0x48>
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
    if(memory == 0) break;
  }

  transmitString(memoryString);
     b98:	ce 01       	movw	r24, r28
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <transmitString>
}
     ba0:	63 96       	adiw	r28, 0x13	; 19
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	9f 90       	pop	r9
     bbe:	8f 90       	pop	r8
     bc0:	08 95       	ret

00000bc2 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     bc2:	4f 92       	push	r4
     bc4:	5f 92       	push	r5
     bc6:	6f 92       	push	r6
     bc8:	7f 92       	push	r7
     bca:	8f 92       	push	r8
     bcc:	9f 92       	push	r9
     bce:	af 92       	push	r10
     bd0:	bf 92       	push	r11
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <memoryStatistics+0x22>
     be4:	1f 92       	push	r1
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
unsigned long totalMemory, freeMemory, freeClusters, totalClusterCount, cluster;
unsigned long sector, *value;
unsigned int i;

totalMemory = totalClusters * sectorPerCluster * bytesPerSector;
     bea:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <sectorPerCluster>
     bee:	30 91 2c 04 	lds	r19, 0x042C	; 0x80042c <sectorPerCluster+0x1>
     bf2:	c0 90 1f 02 	lds	r12, 0x021F	; 0x80021f <totalClusters>
     bf6:	d0 90 20 02 	lds	r13, 0x0220	; 0x800220 <totalClusters+0x1>
     bfa:	e0 90 21 02 	lds	r14, 0x0221	; 0x800221 <totalClusters+0x2>
     bfe:	f0 90 22 02 	lds	r15, 0x0222	; 0x800222 <totalClusters+0x3>
     c02:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <bytesPerSector>
     c06:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <bytesPerSector+0x1>
     c0a:	0e 94 23 11 	call	0x2246	; 0x2246 <__umulhisi3>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	c7 01       	movw	r24, r14
     c14:	b6 01       	movw	r22, r12
     c16:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__mulsi3>
     c1a:	6b 01       	movw	r12, r22
     c1c:	7c 01       	movw	r14, r24

TX_NEWLINE;
     c1e:	8d e0       	ldi	r24, 0x0D	; 13
     c20:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
     c24:	8a e0       	ldi	r24, 0x0A	; 10
     c26:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
TX_NEWLINE;
     c2a:	8d e0       	ldi	r24, 0x0D	; 13
     c2c:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
     c30:	8a e0       	ldi	r24, 0x0A	; 10
     c32:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
transmitString_F(PSTR("Total Memory: "));
     c36:	87 e0       	ldi	r24, 0x07	; 7
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>

displayMemory (totalMemory);
     c3e:	c7 01       	movw	r24, r14
     c40:	b6 01       	movw	r22, r12
     c42:	68 df       	rcall	.-304    	; 0xb14 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	a9 01       	movw	r20, r18
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	de dc       	rcall	.-1604   	; 0x60c <getSetFreeCluster>
     c50:	4b 01       	movw	r8, r22
     c52:	5c 01       	movw	r10, r24
//freeClusters = 0xffffffff;   

if(freeClusters > totalClusters)
     c54:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <totalClusters>
     c58:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <totalClusters+0x1>
     c5c:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <totalClusters+0x2>
     c60:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <totalClusters+0x3>
     c64:	88 15       	cp	r24, r8
     c66:	99 05       	cpc	r25, r9
     c68:	aa 05       	cpc	r26, r10
     c6a:	bb 05       	cpc	r27, r11
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <memoryStatistics+0xae>
     c6e:	85 c0       	rjmp	.+266    	; 0xd7a <memoryStatistics+0x1b8>
{
   freeClusterCountUpdated = 0;
     c70:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <freeClusterCountUpdated>
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;   
     c74:	40 90 23 02 	lds	r4, 0x0223	; 0x800223 <rootCluster>
     c78:	50 90 24 02 	lds	r5, 0x0224	; 0x800224 <rootCluster+0x1>
     c7c:	60 90 25 02 	lds	r6, 0x0225	; 0x800225 <rootCluster+0x2>
     c80:	70 90 26 02 	lds	r7, 0x0226	; 0x800226 <rootCluster+0x3>
     c84:	a3 01       	movw	r20, r6
     c86:	92 01       	movw	r18, r4
     c88:	22 0f       	add	r18, r18
     c8a:	33 1f       	adc	r19, r19
     c8c:	44 1f       	adc	r20, r20
     c8e:	55 1f       	adc	r21, r21
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	44 1f       	adc	r20, r20
     c96:	55 1f       	adc	r21, r21
     c98:	29 83       	std	Y+1, r18	; 0x01
     c9a:	3a 83       	std	Y+2, r19	; 0x02
     c9c:	4b 83       	std	Y+3, r20	; 0x03
     c9e:	5c 83       	std	Y+4, r21	; 0x04

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
   totalClusterCount = 0;
     ca0:	c1 2c       	mov	r12, r1
     ca2:	d1 2c       	mov	r13, r1
     ca4:	76 01       	movw	r14, r12
//freeClusters = 0xffffffff;   

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
     ca6:	81 2c       	mov	r8, r1
     ca8:	91 2c       	mov	r9, r1
     caa:	54 01       	movw	r10, r8
   totalClusterCount = 0;
   cluster = rootCluster;   
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     cac:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <reservedSectorCount>
     cb0:	70 91 32 04 	lds	r23, 0x0432	; 0x800432 <reservedSectorCount+0x1>
     cb4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <bytesPerSector>
     cb8:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <bytesPerSector+0x1>
      SD_readSingleBlock(sector);
     cbc:	00 91 14 02 	lds	r16, 0x0214	; 0x800214 <__data_end>
     cc0:	10 91 15 02 	lds	r17, 0x0215	; 0x800215 <__data_end+0x1>
     cc4:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <__data_end+0x2>
     cc8:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <__data_end+0x3>
     ccc:	28 01       	movw	r4, r16
     cce:	39 01       	movw	r6, r18
     cd0:	46 0e       	add	r4, r22
     cd2:	57 1e       	adc	r5, r23
     cd4:	61 1c       	adc	r6, r1
     cd6:	71 1c       	adc	r7, r1
     cd8:	9c 01       	movw	r18, r24
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	69 81       	ldd	r22, Y+1	; 0x01
     ce0:	7a 81       	ldd	r23, Y+2	; 0x02
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__udivmodsi4>
     cea:	c3 01       	movw	r24, r6
     cec:	b2 01       	movw	r22, r4
     cee:	62 0f       	add	r22, r18
     cf0:	73 1f       	adc	r23, r19
     cf2:	84 1f       	adc	r24, r20
     cf4:	95 1f       	adc	r25, r21
     cf6:	0e 94 2c 10 	call	0x2058	; 0x2058 <SD_readSingleBlock>
     cfa:	eb e2       	ldi	r30, 0x2B	; 43
     cfc:	f2 e0       	ldi	r31, 0x02	; 2
      for(i=0; i<128; i++)
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
      {
         value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     d02:	81 91       	ld	r24, Z+
     d04:	91 91       	ld	r25, Z+
     d06:	a1 91       	ld	r26, Z+
     d08:	b1 91       	ld	r27, Z+
     d0a:	bf 70       	andi	r27, 0x0F	; 15
     d0c:	89 2b       	or	r24, r25
     d0e:	8a 2b       	or	r24, r26
     d10:	8b 2b       	or	r24, r27
     d12:	29 f4       	brne	.+10     	; 0xd1e <memoryStatistics+0x15c>
            freeClusters++;;
     d14:	4f ef       	ldi	r20, 0xFF	; 255
     d16:	84 1a       	sub	r8, r20
     d18:	94 0a       	sbc	r9, r20
     d1a:	a4 0a       	sbc	r10, r20
     d1c:	b4 0a       	sbc	r11, r20
       
         totalClusterCount++;
     d1e:	5f ef       	ldi	r21, 0xFF	; 255
     d20:	c5 1a       	sub	r12, r21
     d22:	d5 0a       	sbc	r13, r21
     d24:	e5 0a       	sbc	r14, r21
     d26:	f5 0a       	sbc	r15, r21
         if(totalClusterCount == (totalClusters+2)) break;
     d28:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <totalClusters>
     d2c:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <totalClusters+0x1>
     d30:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <totalClusters+0x2>
     d34:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <totalClusters+0x3>
     d38:	02 96       	adiw	r24, 0x02	; 2
     d3a:	a1 1d       	adc	r26, r1
     d3c:	b1 1d       	adc	r27, r1
     d3e:	c8 16       	cp	r12, r24
     d40:	d9 06       	cpc	r13, r25
     d42:	ea 06       	cpc	r14, r26
     d44:	fb 06       	cpc	r15, r27
     d46:	41 f0       	breq	.+16     	; 0xd58 <memoryStatistics+0x196>
   cluster = rootCluster;   
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     d48:	2f 5f       	subi	r18, 0xFF	; 255
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
     d4c:	20 38       	cpi	r18, 0x80	; 128
     d4e:	31 05       	cpc	r19, r1
     d50:	c1 f6       	brne	.-80     	; 0xd02 <memoryStatistics+0x140>
      {
         value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
            freeClusters++;;
       
         totalClusterCount++;
     d52:	d7 01       	movw	r26, r14
     d54:	c6 01       	movw	r24, r12
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <memoryStatistics+0x19c>
         if(totalClusterCount == (totalClusters+2)) break;
      } 
      if(i < 128) break;
     d58:	20 38       	cpi	r18, 0x80	; 128
     d5a:	31 05       	cpc	r19, r1
     d5c:	70 f0       	brcs	.+28     	; 0xd7a <memoryStatistics+0x1b8>
     d5e:	29 81       	ldd	r18, Y+1	; 0x01
     d60:	3a 81       	ldd	r19, Y+2	; 0x02
     d62:	4b 81       	ldd	r20, Y+3	; 0x03
     d64:	5c 81       	ldd	r21, Y+4	; 0x04
     d66:	3e 5f       	subi	r19, 0xFE	; 254
     d68:	4f 4f       	sbci	r20, 0xFF	; 255
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
      cluster+=128;
    }
     d74:	6c 01       	movw	r12, r24
     d76:	7d 01       	movw	r14, r26
     d78:	99 cf       	rjmp	.-206    	; 0xcac <memoryStatistics+0xea>
}

if(!freeClusterCountUpdated)
     d7a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <freeClusterCountUpdated>
     d7e:	81 11       	cpse	r24, r1
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <memoryStatistics+0x1ca>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo total free cluster entry
     d82:	a5 01       	movw	r20, r10
     d84:	94 01       	movw	r18, r8
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	40 dc       	rcall	.-1920   	; 0x60c <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <freeClusterCountUpdated>
freeMemory = freeClusters * sectorPerCluster * bytesPerSector;
     d92:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <sectorPerCluster>
     d96:	30 91 2c 04 	lds	r19, 0x042C	; 0x80042c <sectorPerCluster+0x1>
     d9a:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <bytesPerSector>
     d9e:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <bytesPerSector+0x1>
     da2:	0e 94 23 11 	call	0x2246	; 0x2246 <__umulhisi3>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	c5 01       	movw	r24, r10
     dac:	b4 01       	movw	r22, r8
     dae:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__mulsi3>
     db2:	6b 01       	movw	r12, r22
     db4:	7c 01       	movw	r14, r24
TX_NEWLINE;
     db6:	8d e0       	ldi	r24, 0x0D	; 13
     db8:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
     dbc:	8a e0       	ldi	r24, 0x0A	; 10
     dbe:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
     dc2:	88 ef       	ldi	r24, 0xF8	; 248
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>
displayMemory (freeMemory);
     dca:	c7 01       	movw	r24, r14
     dcc:	b6 01       	movw	r22, r12
     dce:	a2 de       	rcall	.-700    	; 0xb14 <displayMemory>
TX_NEWLINE;
     dd0:	8d e0       	ldi	r24, 0x0D	; 13
     dd2:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
     dd6:	8a e0       	ldi	r24, 0x0A	; 10
     dd8:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	bf 90       	pop	r11
     df6:	af 90       	pop	r10
     df8:	9f 90       	pop	r9
     dfa:	8f 90       	pop	r8
     dfc:	7f 90       	pop	r7
     dfe:	6f 90       	pop	r6
     e00:	5f 90       	pop	r5
     e02:	4f 90       	pop	r4
     e04:	08 95       	ret

00000e06 <freeMemoryUpdate>:
//          to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	cf 93       	push	r28
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     e10:	6a 01       	movw	r12, r20
     e12:	7b 01       	movw	r14, r22
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	d9 22       	and	r13, r25
     e18:	ee 24       	eor	r14, r14
     e1a:	ff 24       	eor	r15, r15
     e1c:	cd 28       	or	r12, r13
     e1e:	ce 28       	or	r12, r14
     e20:	cf 28       	or	r12, r15
     e22:	51 f4       	brne	.+20     	; 0xe38 <freeMemoryUpdate+0x32>
     e24:	03 2e       	mov	r0, r19
     e26:	39 e0       	ldi	r19, 0x09	; 9
     e28:	76 95       	lsr	r23
     e2a:	67 95       	ror	r22
     e2c:	57 95       	ror	r21
     e2e:	47 95       	ror	r20
     e30:	3a 95       	dec	r19
     e32:	d1 f7       	brne	.-12     	; 0xe28 <freeMemoryUpdate+0x22>
     e34:	30 2d       	mov	r19, r0
     e36:	0d c0       	rjmp	.+26     	; 0xe52 <freeMemoryUpdate+0x4c>
  else size = (size / 512) +1;
     e38:	03 2e       	mov	r0, r19
     e3a:	39 e0       	ldi	r19, 0x09	; 9
     e3c:	76 95       	lsr	r23
     e3e:	67 95       	ror	r22
     e40:	57 95       	ror	r21
     e42:	47 95       	ror	r20
     e44:	3a 95       	dec	r19
     e46:	d1 f7       	brne	.-12     	; 0xe3c <freeMemoryUpdate+0x36>
     e48:	30 2d       	mov	r19, r0
     e4a:	4f 5f       	subi	r20, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	6f 4f       	sbci	r22, 0xFF	; 255
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
     e52:	6a 01       	movw	r12, r20
     e54:	7b 01       	movw	r14, r22
     e56:	97 e0       	ldi	r25, 0x07	; 7
     e58:	c9 22       	and	r12, r25
     e5a:	dd 24       	eor	r13, r13
     e5c:	ee 24       	eor	r14, r14
     e5e:	ff 24       	eor	r15, r15
     e60:	cd 28       	or	r12, r13
     e62:	ce 28       	or	r12, r14
     e64:	cf 28       	or	r12, r15
     e66:	59 f4       	brne	.+22     	; 0xe7e <freeMemoryUpdate+0x78>
     e68:	6a 01       	movw	r12, r20
     e6a:	7b 01       	movw	r14, r22
     e6c:	68 94       	set
     e6e:	12 f8       	bld	r1, 2
     e70:	f6 94       	lsr	r15
     e72:	e7 94       	ror	r14
     e74:	d7 94       	ror	r13
     e76:	c7 94       	ror	r12
     e78:	16 94       	lsr	r1
     e7a:	d1 f7       	brne	.-12     	; 0xe70 <freeMemoryUpdate+0x6a>
     e7c:	0f c0       	rjmp	.+30     	; 0xe9c <freeMemoryUpdate+0x96>
  else size = (size / 8) +1;
     e7e:	68 94       	set
     e80:	12 f8       	bld	r1, 2
     e82:	76 95       	lsr	r23
     e84:	67 95       	ror	r22
     e86:	57 95       	ror	r21
     e88:	47 95       	ror	r20
     e8a:	16 94       	lsr	r1
     e8c:	d1 f7       	brne	.-12     	; 0xe82 <freeMemoryUpdate+0x7c>
     e8e:	6a 01       	movw	r12, r20
     e90:	7b 01       	movw	r14, r22
     e92:	9f ef       	ldi	r25, 0xFF	; 255
     e94:	c9 1a       	sub	r12, r25
     e96:	d9 0a       	sbc	r13, r25
     e98:	e9 0a       	sbc	r14, r25
     e9a:	f9 0a       	sbc	r15, r25

  if(freeClusterCountUpdated)
     e9c:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <freeClusterCountUpdated>
     ea0:	99 23       	and	r25, r25
     ea2:	c9 f0       	breq	.+50     	; 0xed6 <freeMemoryUpdate+0xd0>
     ea4:	c8 2f       	mov	r28, r24
  {
      freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	a9 01       	movw	r20, r18
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	ad db       	rcall	.-2214   	; 0x60c <getSetFreeCluster>
      if(flag == ADD)
     eb2:	c1 11       	cpse	r28, r1
     eb4:	07 c0       	rjmp	.+14     	; 0xec4 <freeMemoryUpdate+0xbe>
         freeClusters = freeClusters + size;
     eb6:	a7 01       	movw	r20, r14
     eb8:	96 01       	movw	r18, r12
     eba:	26 0f       	add	r18, r22
     ebc:	37 1f       	adc	r19, r23
     ebe:	48 1f       	adc	r20, r24
     ec0:	59 1f       	adc	r21, r25
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <freeMemoryUpdate+0xca>
      else  //when flag = REMOVE
         freeClusters = freeClusters - size;
     ec4:	9b 01       	movw	r18, r22
     ec6:	ac 01       	movw	r20, r24
     ec8:	2c 19       	sub	r18, r12
     eca:	3d 09       	sbc	r19, r13
     ecc:	4e 09       	sbc	r20, r14
     ece:	5f 09       	sbc	r21, r15
      getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	9b db       	rcall	.-2250   	; 0x60c <getSetFreeCluster>
  }
}
     ed6:	cf 91       	pop	r28
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	08 95       	ret

00000ee2 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//        Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     ee2:	2f 92       	push	r2
     ee4:	3f 92       	push	r3
     ee6:	4f 92       	push	r4
     ee8:	5f 92       	push	r5
     eea:	6f 92       	push	r6
     eec:	7f 92       	push	r7
     eee:	8f 92       	push	r8
     ef0:	9f 92       	push	r9
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	2c 97       	sbiw	r28, 0x0c	; 12
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	8e 83       	std	Y+6, r24	; 0x06
     f18:	1b 01       	movw	r2, r22
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
     f1a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <rootCluster>
     f1e:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <rootCluster+0x1>
     f22:	a0 91 25 02 	lds	r26, 0x0225	; 0x800225 <rootCluster+0x2>
     f26:	b0 91 26 02 	lds	r27, 0x0226	; 0x800226 <rootCluster+0x3>
     f2a:	8f 83       	std	Y+7, r24	; 0x07
     f2c:	98 87       	std	Y+8, r25	; 0x08
     f2e:	a9 87       	std	Y+9, r26	; 0x09
     f30:	ba 87       	std	Y+10, r27	; 0x0a
           return 0;  
        }
       
        if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	91 50       	subi	r25, 0x01	; 1
     f36:	99 83       	std	Y+1, r25	; 0x01
                 transmitString_F (PSTR("FILE" ));
                 transmitString_F (PSTR("   "));
                 displayMemory (dir->fileSize);
              }
              else
                 transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
     f38:	0f 2e       	mov	r0, r31
     f3a:	ff ef       	ldi	r31, 0xFF	; 255
     f3c:	cf 2e       	mov	r12, r31
     f3e:	f1 e0       	ldi	r31, 0x01	; 1
     f40:	df 2e       	mov	r13, r31
     f42:	f0 2d       	mov	r31, r0

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
     f44:	6f 81       	ldd	r22, Y+7	; 0x07
     f46:	78 85       	ldd	r23, Y+8	; 0x08
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	c5 da       	rcall	.-2678   	; 0x4d8 <getFirstSector>
     f4e:	4b 01       	movw	r8, r22
     f50:	5c 01       	movw	r10, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
     f52:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <sectorPerCluster>
     f56:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <sectorPerCluster+0x1>
     f5a:	89 2b       	or	r24, r25
     f5c:	09 f4       	brne	.+2      	; 0xf60 <findFiles+0x7e>
     f5e:	2e c1       	rjmp	.+604    	; 0x11bc <findFiles+0x2da>
     f60:	41 2c       	mov	r4, r1
     f62:	51 2c       	mov	r5, r1
     f64:	32 01       	movw	r6, r4
   {
     SD_readSingleBlock (firstSector + sector);
     f66:	d5 01       	movw	r26, r10
     f68:	c4 01       	movw	r24, r8
     f6a:	84 0d       	add	r24, r4
     f6c:	95 1d       	adc	r25, r5
     f6e:	a6 1d       	adc	r26, r6
     f70:	b7 1d       	adc	r27, r7
     f72:	8a 83       	std	Y+2, r24	; 0x02
     f74:	9b 83       	std	Y+3, r25	; 0x03
     f76:	ac 83       	std	Y+4, r26	; 0x04
     f78:	bd 83       	std	Y+5, r27	; 0x05
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 2c 10 	call	0x2058	; 0x2058 <SD_readSingleBlock>
    
     for(i=0; i<bytesPerSector; i+=32)
     f82:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <bytesPerSector>
     f86:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <bytesPerSector+0x1>
     f8a:	89 2b       	or	r24, r25
     f8c:	09 f4       	brne	.+2      	; 0xf90 <findFiles+0xae>
     f8e:	05 c1       	rjmp	.+522    	; 0x119a <findFiles+0x2b8>
     {
        dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     f90:	ab e2       	ldi	r26, 0x2B	; 43
     f92:	b2 e0       	ldi	r27, 0x02	; 2
     f94:	8c 91       	ld	r24, X
     f96:	88 23       	and	r24, r24
     f98:	51 f0       	breq	.+20     	; 0xfae <findFiles+0xcc>
     f9a:	8d 01       	movw	r16, r26
     f9c:	e1 2c       	mov	r14, r1
     f9e:	f1 2c       	mov	r15, r1
     fa0:	12 c0       	rjmp	.+36     	; 0xfc6 <findFiles+0xe4>
     fa2:	00 5e       	subi	r16, 0xE0	; 224
     fa4:	1f 4f       	sbci	r17, 0xFF	; 255
     fa6:	f8 01       	movw	r30, r16
     fa8:	80 81       	ld	r24, Z
     faa:	81 11       	cpse	r24, r1
     fac:	0c c0       	rjmp	.+24     	; 0xfc6 <findFiles+0xe4>
        {
           if((flag == GET_FILE) || (flag == DELETE))
     fae:	8e 81       	ldd	r24, Y+6	; 0x06
     fb0:	81 50       	subi	r24, 0x01	; 1
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	08 f0       	brcs	.+2      	; 0xfb8 <findFiles+0xd6>
     fb6:	21 c1       	rjmp	.+578    	; 0x11fa <findFiles+0x318>
                transmitString_F(PSTR("File does not exist!"));
     fb8:	8e e2       	ldi	r24, 0x2E	; 46
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>
           return 0;  
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	22 c1       	rjmp	.+580    	; 0x120a <findFiles+0x328>
        }
       
        if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
     fc6:	85 3e       	cpi	r24, 0xE5	; 229
     fc8:	09 f4       	brne	.+2      	; 0xfcc <findFiles+0xea>
     fca:	dc c0       	rjmp	.+440    	; 0x1184 <findFiles+0x2a2>
     fcc:	d8 01       	movw	r26, r16
     fce:	1b 96       	adiw	r26, 0x0b	; 11
     fd0:	8c 91       	ld	r24, X
     fd2:	8f 30       	cpi	r24, 0x0F	; 15
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <findFiles+0xf6>
     fd6:	d6 c0       	rjmp	.+428    	; 0x1184 <findFiles+0x2a2>
        {
          if((flag == GET_FILE) || (flag == DELETE))
     fd8:	b9 81       	ldd	r27, Y+1	; 0x01
     fda:	b2 30       	cpi	r27, 0x02	; 2
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <findFiles+0xfe>
     fde:	86 c0       	rjmp	.+268    	; 0x10ec <findFiles+0x20a>
          {
            for(j=0; j<11; j++)
              if(dir->name[j] != fileName[j]) break;
     fe0:	f8 01       	movw	r30, r16
     fe2:	90 81       	ld	r25, Z
     fe4:	d1 01       	movw	r26, r2
     fe6:	8c 91       	ld	r24, X
     fe8:	98 13       	cpse	r25, r24
     fea:	cc c0       	rjmp	.+408    	; 0x1184 <findFiles+0x2a2>
     fec:	d8 01       	movw	r26, r16
     fee:	11 96       	adiw	r26, 0x01	; 1
     ff0:	f1 01       	movw	r30, r2
     ff2:	31 96       	adiw	r30, 0x01	; 1
       
        if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     ff4:	81 e0       	ldi	r24, 0x01	; 1
              if(dir->name[j] != fileName[j]) break;
     ff6:	2d 91       	ld	r18, X+
     ff8:	91 91       	ld	r25, Z+
     ffa:	29 13       	cpse	r18, r25
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <findFiles+0x124>
       
        if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	8b 30       	cpi	r24, 0x0B	; 11
    1002:	c9 f7       	brne	.-14     	; 0xff6 <findFiles+0x114>
    1004:	03 c0       	rjmp	.+6      	; 0x100c <findFiles+0x12a>
              if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    1006:	8b 30       	cpi	r24, 0x0B	; 11
    1008:	09 f0       	breq	.+2      	; 0x100c <findFiles+0x12a>
    100a:	bc c0       	rjmp	.+376    	; 0x1184 <findFiles+0x2a2>
            {
               if(flag == GET_FILE)
    100c:	be 81       	ldd	r27, Y+6	; 0x06
    100e:	b1 30       	cpi	r27, 0x01	; 1
    1010:	09 f4       	brne	.+2      	; 0x1014 <findFiles+0x132>
    1012:	f6 c0       	rjmp	.+492    	; 0x1200 <findFiles+0x31e>
                  return (dir);
               else    //when flag = DELETE
               {
                  TX_NEWLINE;
    1014:	8d e0       	ldi	r24, 0x0D	; 13
    1016:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
    101a:	8a e0       	ldi	r24, 0x0A	; 10
    101c:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
                  transmitString_F(PSTR("Deleting.."));
    1020:	83 e2       	ldi	r24, 0x23	; 35
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>
                  TX_NEWLINE;
    1028:	8d e0       	ldi	r24, 0x0D	; 13
    102a:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
                  TX_NEWLINE;
    1034:	8d e0       	ldi	r24, 0x0D	; 13
    1036:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
    103a:	8a e0       	ldi	r24, 0x0A	; 10
    103c:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
                  firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1040:	f8 01       	movw	r30, r16
    1042:	c4 88       	ldd	r12, Z+20	; 0x14
    1044:	d5 88       	ldd	r13, Z+21	; 0x15
    1046:	e1 2c       	mov	r14, r1
    1048:	f1 2c       	mov	r15, r1
    104a:	d6 01       	movw	r26, r12
    104c:	99 27       	eor	r25, r25
    104e:	88 27       	eor	r24, r24
    1050:	c2 8c       	ldd	r12, Z+26	; 0x1a
    1052:	d3 8c       	ldd	r13, Z+27	; 0x1b
    1054:	e1 2c       	mov	r14, r1
    1056:	f1 2c       	mov	r15, r1
    1058:	c8 2a       	or	r12, r24
    105a:	d9 2a       	or	r13, r25
    105c:	ea 2a       	or	r14, r26
    105e:	fb 2a       	or	r15, r27
               
                  //mark file as 'deleted' in FAT table
                  dir->name[0] = DELETED;   
    1060:	85 ee       	ldi	r24, 0xE5	; 229
    1062:	80 83       	st	Z, r24
                  SD_writeSingleBlock (firstSector+sector);
    1064:	6a 81       	ldd	r22, Y+2	; 0x02
    1066:	7b 81       	ldd	r23, Y+3	; 0x03
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <SD_writeSingleBlock>
                                           
                  freeMemoryUpdate (ADD, dir->fileSize);
    1070:	d8 01       	movw	r26, r16
    1072:	5c 96       	adiw	r26, 0x1c	; 28
    1074:	4d 91       	ld	r20, X+
    1076:	5d 91       	ld	r21, X+
    1078:	6d 91       	ld	r22, X+
    107a:	7c 91       	ld	r23, X
    107c:	5f 97       	sbiw	r26, 0x1f	; 31
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	c2 de       	rcall	.-636    	; 0xe06 <freeMemoryUpdate>

                  //update next free cluster entry in FSinfo sector
                  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	bf da       	rcall	.-2690   	; 0x60c <getSetFreeCluster>
                  if(firstCluster < cluster)
    108e:	c6 16       	cp	r12, r22
    1090:	d7 06       	cpc	r13, r23
    1092:	e8 06       	cpc	r14, r24
    1094:	f9 06       	cpc	r15, r25
    1096:	28 f4       	brcc	.+10     	; 0x10a2 <findFiles+0x1c0>
                     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1098:	a7 01       	movw	r20, r14
    109a:	96 01       	movw	r18, r12
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	b5 da       	rcall	.-2710   	; 0x60c <getSetFreeCluster>

                  //mark all the clusters allocated to the file as 'free'
                  while(1) 
                  {
                     nextCluster = getSetNextCluster (firstCluster, GET, 0);
    10a2:	00 e0       	ldi	r16, 0x00	; 0
    10a4:	10 e0       	ldi	r17, 0x00	; 0
    10a6:	98 01       	movw	r18, r16
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	c7 01       	movw	r24, r14
    10ac:	b6 01       	movw	r22, r12
    10ae:	35 da       	rcall	.-2966   	; 0x51a <getSetNextCluster>
    10b0:	a6 2e       	mov	r10, r22
    10b2:	b7 2e       	mov	r11, r23
    10b4:	8a 83       	std	Y+2, r24	; 0x02
    10b6:	99 83       	std	Y+1, r25	; 0x01
                     getSetNextCluster (firstCluster, SET, 0);
    10b8:	00 e0       	ldi	r16, 0x00	; 0
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	98 01       	movw	r18, r16
    10be:	41 e0       	ldi	r20, 0x01	; 1
    10c0:	c7 01       	movw	r24, r14
    10c2:	b6 01       	movw	r22, r12
    10c4:	2a da       	rcall	.-2988   	; 0x51a <getSetNextCluster>
                     if(nextCluster > 0x0ffffff6)
                       {transmitString_F(PSTR("File deleted!"));return 0;}
                     firstCluster = nextCluster;
    10c6:	ca 2c       	mov	r12, r10
    10c8:	db 2c       	mov	r13, r11
    10ca:	ea 80       	ldd	r14, Y+2	; 0x02
    10cc:	f9 80       	ldd	r15, Y+1	; 0x01
                  //mark all the clusters allocated to the file as 'free'
                  while(1) 
                  {
                     nextCluster = getSetNextCluster (firstCluster, GET, 0);
                     getSetNextCluster (firstCluster, SET, 0);
                     if(nextCluster > 0x0ffffff6)
    10ce:	b7 ef       	ldi	r27, 0xF7	; 247
    10d0:	cb 16       	cp	r12, r27
    10d2:	bf ef       	ldi	r27, 0xFF	; 255
    10d4:	db 06       	cpc	r13, r27
    10d6:	eb 06       	cpc	r14, r27
    10d8:	bf e0       	ldi	r27, 0x0F	; 15
    10da:	fb 06       	cpc	r15, r27
    10dc:	10 f3       	brcs	.-60     	; 0x10a2 <findFiles+0x1c0>
                       {transmitString_F(PSTR("File deleted!"));return 0;}
    10de:	85 e1       	ldi	r24, 0x15	; 21
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	8f c0       	rjmp	.+286    	; 0x120a <findFiles+0x328>
               }
            }
          }
          else  //when flag = GET_LIST
          {
             TX_NEWLINE;
    10ec:	8d e0       	ldi	r24, 0x0D	; 13
    10ee:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
    10f2:	8a e0       	ldi	r24, 0x0A	; 10
    10f4:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
    10f8:	e1 e0       	ldi	r30, 0x01	; 1
    10fa:	1b 86       	std	Y+11, r1	; 0x0b
    10fc:	ec 87       	std	Y+12, r30	; 0x0c
    10fe:	06 c0       	rjmp	.+12     	; 0x110c <findFiles+0x22a>
    1100:	2b 85       	ldd	r18, Y+11	; 0x0b
    1102:	2f 5f       	subi	r18, 0xFF	; 255
    1104:	2b 87       	std	Y+11, r18	; 0x0b
    1106:	3c 85       	ldd	r19, Y+12	; 0x0c
    1108:	3f 5f       	subi	r19, 0xFF	; 255
    110a:	3c 87       	std	Y+12, r19	; 0x0c
              for(j=0; j<11; j++)
              {
                if(j == 8) transmitByte(' ');
    110c:	8b 85       	ldd	r24, Y+11	; 0x0b
    110e:	88 30       	cpi	r24, 0x08	; 8
    1110:	59 f4       	brne	.+22     	; 0x1128 <findFiles+0x246>
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
                transmitByte (dir->name[j]);
    1118:	f8 01       	movw	r30, r16
    111a:	9b 85       	ldd	r25, Y+11	; 0x0b
    111c:	e9 0f       	add	r30, r25
    111e:	f1 1d       	adc	r31, r1
    1120:	80 81       	ld	r24, Z
    1122:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
    1126:	ec cf       	rjmp	.-40     	; 0x1100 <findFiles+0x21e>
    1128:	f8 01       	movw	r30, r16
    112a:	ab 85       	ldd	r26, Y+11	; 0x0b
    112c:	ea 0f       	add	r30, r26
    112e:	f1 1d       	adc	r31, r1
    1130:	80 81       	ld	r24, Z
    1132:	0e 94 c2 10 	call	0x2184	; 0x2184 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
          {
             TX_NEWLINE;
              for(j=0; j<11; j++)
    1136:	bc 85       	ldd	r27, Y+12	; 0x0c
    1138:	bb 30       	cpi	r27, 0x0B	; 11
    113a:	10 f3       	brcs	.-60     	; 0x1100 <findFiles+0x21e>
              {
                if(j == 8) transmitByte(' ');
                transmitByte (dir->name[j]);
              }
              transmitString_F (PSTR("   "));
    113c:	81 e1       	ldi	r24, 0x11	; 17
    113e:	92 e0       	ldi	r25, 0x02	; 2
    1140:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>
              if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1144:	f8 01       	movw	r30, r16
    1146:	83 85       	ldd	r24, Z+11	; 0x0b
    1148:	80 31       	cpi	r24, 0x10	; 16
    114a:	99 f0       	breq	.+38     	; 0x1172 <findFiles+0x290>
    114c:	88 30       	cpi	r24, 0x08	; 8
    114e:	b1 f0       	breq	.+44     	; 0x117c <findFiles+0x29a>
              {
                 transmitString_F (PSTR("FILE" ));
    1150:	8c e0       	ldi	r24, 0x0C	; 12
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>
                 transmitString_F (PSTR("   "));
    1158:	88 e0       	ldi	r24, 0x08	; 8
    115a:	92 e0       	ldi	r25, 0x02	; 2
    115c:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>
                 displayMemory (dir->fileSize);
    1160:	d8 01       	movw	r26, r16
    1162:	5c 96       	adiw	r26, 0x1c	; 28
    1164:	6d 91       	ld	r22, X+
    1166:	7d 91       	ld	r23, X+
    1168:	8d 91       	ld	r24, X+
    116a:	9c 91       	ld	r25, X
    116c:	5f 97       	sbiw	r26, 0x1f	; 31
    116e:	d2 dc       	rcall	.-1628   	; 0xb14 <displayMemory>
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <findFiles+0x2a2>
              }
              else
                 transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1172:	e4 e0       	ldi	r30, 0x04	; 4
    1174:	f2 e0       	ldi	r31, 0x02	; 2
    1176:	8e 2f       	mov	r24, r30
    1178:	9f 2f       	mov	r25, r31
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <findFiles+0x29e>
    117c:	8c 2d       	mov	r24, r12
    117e:	9d 2d       	mov	r25, r13
    1180:	0e 94 ca 10 	call	0x2194	; 0x2194 <transmitString_F>

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    
     for(i=0; i<bytesPerSector; i+=32)
    1184:	f0 e2       	ldi	r31, 0x20	; 32
    1186:	ef 0e       	add	r14, r31
    1188:	f1 1c       	adc	r15, r1
    118a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <bytesPerSector>
    118e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <bytesPerSector+0x1>
    1192:	e8 16       	cp	r14, r24
    1194:	f9 06       	cpc	r15, r25
    1196:	08 f4       	brcc	.+2      	; 0x119a <findFiles+0x2b8>
    1198:	04 cf       	rjmp	.-504    	; 0xfa2 <findFiles+0xc0>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    119a:	2f ef       	ldi	r18, 0xFF	; 255
    119c:	42 1a       	sub	r4, r18
    119e:	52 0a       	sbc	r5, r18
    11a0:	62 0a       	sbc	r6, r18
    11a2:	72 0a       	sbc	r7, r18
    11a4:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <sectorPerCluster>
    11a8:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <sectorPerCluster+0x1>
    11ac:	a0 e0       	ldi	r26, 0x00	; 0
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	48 16       	cp	r4, r24
    11b2:	59 06       	cpc	r5, r25
    11b4:	6a 06       	cpc	r6, r26
    11b6:	7b 06       	cpc	r7, r27
    11b8:	08 f4       	brcc	.+2      	; 0x11bc <findFiles+0x2da>
    11ba:	d5 ce       	rjmp	.-598    	; 0xf66 <findFiles+0x84>
          }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    11bc:	00 e0       	ldi	r16, 0x00	; 0
    11be:	10 e0       	ldi	r17, 0x00	; 0
    11c0:	98 01       	movw	r18, r16
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	6f 81       	ldd	r22, Y+7	; 0x07
    11c6:	78 85       	ldd	r23, Y+8	; 0x08
    11c8:	89 85       	ldd	r24, Y+9	; 0x09
    11ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    11cc:	a6 d9       	rcall	.-3252   	; 0x51a <getSetNextCluster>
    11ce:	6f 83       	std	Y+7, r22	; 0x07
    11d0:	78 87       	std	Y+8, r23	; 0x08
    11d2:	89 87       	std	Y+9, r24	; 0x09
    11d4:	9a 87       	std	Y+10, r25	; 0x0a

   if(cluster > 0x0ffffff6)
    11d6:	67 3f       	cpi	r22, 0xF7	; 247
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	73 07       	cpc	r23, r19
    11dc:	83 07       	cpc	r24, r19
    11de:	3f e0       	ldi	r19, 0x0F	; 15
    11e0:	93 07       	cpc	r25, r19
       return 0;
   if(cluster == 0)
    11e2:	88 f4       	brcc	.+34     	; 0x1206 <findFiles+0x324>
    11e4:	67 2b       	or	r22, r23
    11e6:	68 2b       	or	r22, r24
    11e8:	69 2b       	or	r22, r25
    11ea:	09 f0       	breq	.+2      	; 0x11ee <findFiles+0x30c>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    11ec:	ab ce       	rjmp	.-682    	; 0xf44 <findFiles+0x62>
    11ee:	86 ee       	ldi	r24, 0xE6	; 230
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	d0 d7       	rcall	.+4000   	; 0x2194 <transmitString_F>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	08 c0       	rjmp	.+16     	; 0x120a <findFiles+0x328>

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
        {
           if((flag == GET_FILE) || (flag == DELETE))
                transmitString_F(PSTR("File does not exist!"));
           return 0;  
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	05 c0       	rjmp	.+10     	; 0x120a <findFiles+0x328>
    1200:	80 2f       	mov	r24, r16
    1202:	91 2f       	mov	r25, r17
    1204:	02 c0       	rjmp	.+4      	; 0x120a <findFiles+0x328>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
       return 0;
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
   if(cluster == 0)
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    120a:	2c 96       	adiw	r28, 0x0c	; 12
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	bf 90       	pop	r11
    1228:	af 90       	pop	r10
    122a:	9f 90       	pop	r9
    122c:	8f 90       	pop	r8
    122e:	7f 90       	pop	r7
    1230:	6f 90       	pop	r6
    1232:	5f 90       	pop	r5
    1234:	4f 90       	pop	r4
    1236:	3f 90       	pop	r3
    1238:	2f 90       	pop	r2
    123a:	08 95       	ret

0000123c <readFile>:
//return: 0, if normal operation or flag is READ
//        1, if file is already existing and flag = VERIFY
//        2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    123c:	4f 92       	push	r4
    123e:	5f 92       	push	r5
    1240:	6f 92       	push	r6
    1242:	7f 92       	push	r7
    1244:	8f 92       	push	r8
    1246:	9f 92       	push	r9
    1248:	af 92       	push	r10
    124a:	bf 92       	push	r11
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	2e 97       	sbiw	r28, 0x0e	; 14
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	18 2f       	mov	r17, r24
    126e:	7a 83       	std	Y+2, r23	; 0x02
    1270:	69 83       	std	Y+1, r22	; 0x01
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    1272:	cb 01       	movw	r24, r22
    1274:	1d db       	rcall	.-2502   	; 0x8b0 <convertFileName>
if(error) return 2;
    1276:	81 11       	cpse	r24, r1
    1278:	9d c0       	rjmp	.+314    	; 0x13b4 <readFile+0x178>

dir = findFiles (GET_FILE, fileName); //get the file location
    127a:	69 81       	ldd	r22, Y+1	; 0x01
    127c:	7a 81       	ldd	r23, Y+2	; 0x02
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	30 de       	rcall	.-928    	; 0xee2 <findFiles>
if(dir == 0)
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	09 f4       	brne	.+2      	; 0x1288 <readFile+0x4c>
    1286:	98 c0       	rjmp	.+304    	; 0x13b8 <readFile+0x17c>
  return (0);

if(flag == VERIFY) return (1);      //specified file name is already existing
    1288:	11 30       	cpi	r17, 0x01	; 1
    128a:	09 f4       	brne	.+2      	; 0x128e <readFile+0x52>
    128c:	97 c0       	rjmp	.+302    	; 0x13bc <readFile+0x180>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    128e:	dc 01       	movw	r26, r24
    1290:	54 96       	adiw	r26, 0x14	; 20
    1292:	4d 91       	ld	r20, X+
    1294:	5c 91       	ld	r21, X
    1296:	55 97       	sbiw	r26, 0x15	; 21
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	ba 01       	movw	r22, r20
    129e:	55 27       	eor	r21, r21
    12a0:	44 27       	eor	r20, r20
    12a2:	5a 96       	adiw	r26, 0x1a	; 26
    12a4:	cd 90       	ld	r12, X+
    12a6:	dc 90       	ld	r13, X
    12a8:	5b 97       	sbiw	r26, 0x1b	; 27
    12aa:	e1 2c       	mov	r14, r1
    12ac:	f1 2c       	mov	r15, r1
    12ae:	8a 01       	movw	r16, r20
    12b0:	9b 01       	movw	r18, r22
    12b2:	0c 29       	or	r16, r12
    12b4:	1d 29       	or	r17, r13
    12b6:	2e 29       	or	r18, r14
    12b8:	3f 29       	or	r19, r15
    12ba:	0d 83       	std	Y+5, r16	; 0x05
    12bc:	1e 83       	std	Y+6, r17	; 0x06
    12be:	2f 83       	std	Y+7, r18	; 0x07
    12c0:	38 87       	std	Y+8, r19	; 0x08

fileSize = dir->fileSize;
    12c2:	5c 96       	adiw	r26, 0x1c	; 28
    12c4:	4d 90       	ld	r4, X+
    12c6:	5d 90       	ld	r5, X+
    12c8:	6d 90       	ld	r6, X+
    12ca:	7c 90       	ld	r7, X

TX_NEWLINE;
    12cc:	5f 97       	sbiw	r26, 0x1f	; 31
    12ce:	8d e0       	ldi	r24, 0x0D	; 13
    12d0:	59 d7       	rcall	.+3762   	; 0x2184 <transmitByte>
    12d2:	8a e0       	ldi	r24, 0x0A	; 10
TX_NEWLINE;
    12d4:	57 d7       	rcall	.+3758   	; 0x2184 <transmitByte>
    12d6:	8d e0       	ldi	r24, 0x0D	; 13
    12d8:	55 d7       	rcall	.+3754   	; 0x2184 <transmitByte>
    12da:	8a e0       	ldi	r24, 0x0A	; 10
    12dc:	53 d7       	rcall	.+3750   	; 0x2184 <transmitByte>
    12de:	c1 2c       	mov	r12, r1
//        2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    12e0:	d1 2c       	mov	r13, r1
    12e2:	76 01       	movw	r14, r12
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <readFile+0xae>
    12e6:	75 01       	movw	r14, r10
    SD_readSingleBlock(firstSector + j);

    for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    12e8:	64 01       	movw	r12, r8
    12ea:	6d 81       	ldd	r22, Y+5	; 0x05
TX_NEWLINE;
TX_NEWLINE;

while(1)
{
  firstSector = getFirstSector (cluster);
    12ec:	7e 81       	ldd	r23, Y+6	; 0x06
    12ee:	8f 81       	ldd	r24, Y+7	; 0x07
    12f0:	98 85       	ldd	r25, Y+8	; 0x08
    12f2:	f2 d8       	rcall	.-3612   	; 0x4d8 <getFirstSector>
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	28 5f       	subi	r18, 0xF8	; 248
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	4f 4f       	sbci	r20, 0xFF	; 255
    12fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1300:	29 87       	std	Y+9, r18	; 0x09
    1302:	3a 87       	std	Y+10, r19	; 0x0a
    1304:	4b 87       	std	Y+11, r20	; 0x0b
    1306:	5c 87       	std	Y+12, r21	; 0x0c
    1308:	69 83       	std	Y+1, r22	; 0x01
    130a:	7a 83       	std	Y+2, r23	; 0x02
    130c:	8b 83       	std	Y+3, r24	; 0x03
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <readFile+0xda>
    1312:	75 01       	movw	r14, r10
    SD_readSingleBlock(firstSector + j);

    for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    1314:	64 01       	movw	r12, r8
    1316:	69 81       	ldd	r22, Y+1	; 0x01
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<8; j++)
  {
    SD_readSingleBlock(firstSector + j);
    1318:	7a 81       	ldd	r23, Y+2	; 0x02
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	9c d6       	rcall	.+3384   	; 0x2058 <SD_readSingleBlock>
    1320:	1e 86       	std	Y+14, r1	; 0x0e

    for(k=0; k<512; k++)
    1322:	1d 86       	std	Y+13, r1	; 0x0d
    1324:	ed 85       	ldd	r30, Y+13	; 0x0d
    {
      transmitByte(buffer[k]);
    1326:	fe 85       	ldd	r31, Y+14	; 0x0e
    1328:	e5 5d       	subi	r30, 0xD5	; 213
    132a:	fd 4f       	sbci	r31, 0xFD	; 253
    132c:	80 81       	ld	r24, Z
    132e:	2a d7       	rcall	.+3668   	; 0x2184 <transmitByte>
    1330:	46 01       	movw	r8, r12
    1332:	57 01       	movw	r10, r14
      if ((byteCounter++) >= fileSize ) return 0;
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	83 1a       	sub	r8, r19
    1338:	93 0a       	sbc	r9, r19
    133a:	a3 0a       	sbc	r10, r19
    133c:	b3 0a       	sbc	r11, r19
    133e:	c4 14       	cp	r12, r4
    1340:	d5 04       	cpc	r13, r5
    1342:	e6 04       	cpc	r14, r6
    1344:	f7 04       	cpc	r15, r7
    1346:	e0 f5       	brcc	.+120    	; 0x13c0 <readFile+0x184>
    1348:	0d 85       	ldd	r16, Y+13	; 0x0d
    134a:	1e 85       	ldd	r17, Y+14	; 0x0e

  for(j=0; j<8; j++)
  {
    SD_readSingleBlock(firstSector + j);

    for(k=0; k<512; k++)
    134c:	0f 5f       	subi	r16, 0xFF	; 255
    134e:	1f 4f       	sbci	r17, 0xFF	; 255
    1350:	1e 87       	std	Y+14, r17	; 0x0e
    1352:	0d 87       	std	Y+13, r16	; 0x0d
    1354:	75 01       	movw	r14, r10
    1356:	64 01       	movw	r12, r8
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    1358:	01 15       	cp	r16, r1
    135a:	12 40       	sbci	r17, 0x02	; 2

  for(j=0; j<8; j++)
  {
    SD_readSingleBlock(firstSector + j);

    for(k=0; k<512; k++)
    135c:	19 f7       	brne	.-58     	; 0x1324 <readFile+0xe8>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	ab 81       	ldd	r26, Y+3	; 0x03
    1364:	bc 81       	ldd	r27, Y+4	; 0x04
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	a1 1d       	adc	r26, r1
    136a:	b1 1d       	adc	r27, r1
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	ab 83       	std	Y+3, r26	; 0x03
    1372:	bc 83       	std	Y+4, r27	; 0x04
    1374:	09 85       	ldd	r16, Y+9	; 0x09
    1376:	1a 85       	ldd	r17, Y+10	; 0x0a

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<8; j++)
    1378:	2b 85       	ldd	r18, Y+11	; 0x0b
    137a:	3c 85       	ldd	r19, Y+12	; 0x0c
    137c:	08 17       	cp	r16, r24
    137e:	19 07       	cpc	r17, r25
    1380:	2a 07       	cpc	r18, r26
    1382:	3b 07       	cpc	r19, r27
    1384:	31 f6       	brne	.-116    	; 0x1312 <readFile+0xd6>
    1386:	00 e0       	ldi	r16, 0x00	; 0
    1388:	10 e0       	ldi	r17, 0x00	; 0
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    138a:	98 01       	movw	r18, r16
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	6d 81       	ldd	r22, Y+5	; 0x05
    1390:	7e 81       	ldd	r23, Y+6	; 0x06
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	98 85       	ldd	r25, Y+8	; 0x08
    1396:	c1 d8       	rcall	.-3710   	; 0x51a <getSetNextCluster>
    1398:	6d 83       	std	Y+5, r22	; 0x05
    139a:	7e 83       	std	Y+6, r23	; 0x06
    139c:	8f 83       	std	Y+7, r24	; 0x07
    139e:	98 87       	std	Y+8, r25	; 0x08
    13a0:	67 2b       	or	r22, r23
    13a2:	68 2b       	or	r22, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    13a4:	69 2b       	or	r22, r25
    13a6:	09 f0       	breq	.+2      	; 0x13aa <readFile+0x16e>
    13a8:	9e cf       	rjmp	.-196    	; 0x12e6 <readFile+0xaa>
    13aa:	8d ec       	ldi	r24, 0xCD	; 205
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	f2 d6       	rcall	.+3556   	; 0x2194 <transmitString_F>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	07 c0       	rjmp	.+14     	; 0x13c2 <readFile+0x186>
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <readFile+0x186>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <readFile+0x186>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0)
  return (0);
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <readFile+0x186>

if(flag == VERIFY) return (1);      //specified file name is already existing
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	2e 96       	adiw	r28, 0x0e	; 14
    SD_readSingleBlock(firstSector + j);

    for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    13c4:	0f b6       	in	r0, 0x3f	; 63
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	9f 90       	pop	r9
    13e4:	8f 90       	pop	r8
    13e6:	7f 90       	pop	r7
    13e8:	6f 90       	pop	r6
    13ea:	5f 90       	pop	r5
    13ec:	4f 90       	pop	r4
    13ee:	08 95       	ret

000013f0 <deleteFile>:
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    13f4:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    13f6:	5c da       	rcall	.-2888   	; 0x8b0 <convertFileName>
  if(error) return;
    13f8:	81 11       	cpse	r24, r1
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <deleteFile+0x12>

  findFiles (DELETE, fileName);
    13fc:	be 01       	movw	r22, r28
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	70 dd       	rcall	.-1312   	; 0xee2 <findFiles>
}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <createFile>:
//Function: to create a file in FAT32 format in the root directory
//Arguments: pointer to the file name
//return: none
//***************************************************************************
void createFile (unsigned char *fileName)
{
    1408:	2f 92       	push	r2
    140a:	3f 92       	push	r3
    140c:	4f 92       	push	r4
    140e:	5f 92       	push	r5
    1410:	6f 92       	push	r6
    1412:	7f 92       	push	r7
    1414:	8f 92       	push	r8
    1416:	9f 92       	push	r9
    1418:	af 92       	push	r10
    141a:	bf 92       	push	r11
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	68 97       	sbiw	r28, 0x18	; 24
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	9c 87       	std	Y+12, r25	; 0x0c
    143e:	8b 87       	std	Y+11, r24	; 0x0b
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, prevCluster, firstSector, sector;
unsigned long size;

j = readFile (VERIFY, fileName);
    1440:	bc 01       	movw	r22, r24
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	fb de       	rcall	.-522    	; 0x123c <readFile>

if(j == 1) {transmitString_F(PSTR("  File already existing")); return;}
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	21 f4       	brne	.+8      	; 0x1452 <createFile+0x4a>
    144a:	82 ea       	ldi	r24, 0xA2	; 162
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	a2 d6       	rcall	.+3396   	; 0x2194 <transmitString_F>
    1450:	93 c2       	rjmp	.+1318   	; 0x1978 <createFile+0x570>
if(j == 2) return; //invalid file name
    1452:	82 30       	cpi	r24, 0x02	; 2
    1454:	09 f4       	brne	.+2      	; 0x1458 <createFile+0x50>

TX_NEWLINE;
    1456:	90 c2       	rjmp	.+1312   	; 0x1978 <createFile+0x570>
    1458:	8d e0       	ldi	r24, 0x0D	; 13
    145a:	94 d6       	rcall	.+3368   	; 0x2184 <transmitByte>
    145c:	8a e0       	ldi	r24, 0x0A	; 10
transmitString_F(PSTR(" Creating File.."));
    145e:	92 d6       	rcall	.+3364   	; 0x2184 <transmitByte>
    1460:	81 e9       	ldi	r24, 0x91	; 145
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	97 d6       	rcall	.+3374   	; 0x2194 <transmitString_F>

cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	a9 01       	movw	r20, r18
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	cd d8       	rcall	.-3686   	; 0x60c <getSetFreeCluster>
if(cluster > totalClusters)
    1472:	00 91 1f 02 	lds	r16, 0x021F	; 0x80021f <totalClusters>
    1476:	10 91 20 02 	lds	r17, 0x0220	; 0x800220 <totalClusters+0x1>
    147a:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <totalClusters+0x2>
    147e:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <totalClusters+0x3>
    1482:	06 17       	cp	r16, r22
    1484:	17 07       	cpc	r17, r23
    1486:	28 07       	cpc	r18, r24
    1488:	39 07       	cpc	r19, r25
    148a:	40 f4       	brcc	.+16     	; 0x149c <createFile+0x94>
  cluster = rootCluster;
    148c:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <rootCluster>
    1490:	70 91 24 02 	lds	r23, 0x0224	; 0x800224 <rootCluster+0x1>
    1494:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <rootCluster+0x2>
    1498:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <rootCluster+0x3>

cluster = searchNextFreeCluster(cluster);
    149c:	99 da       	rcall	.-2766   	; 0x9d0 <searchNextFreeCluster>
    149e:	6f 83       	std	Y+7, r22	; 0x07
    14a0:	78 87       	std	Y+8, r23	; 0x08
    14a2:	89 87       	std	Y+9, r24	; 0x09
   if(cluster == 0)
    14a4:	9a 87       	std	Y+10, r25	; 0x0a
    14a6:	67 2b       	or	r22, r23
    14a8:	68 2b       	or	r22, r24
   {
      TX_NEWLINE;
    14aa:	69 2b       	or	r22, r25
    14ac:	41 f4       	brne	.+16     	; 0x14be <createFile+0xb6>
    14ae:	8d e0       	ldi	r24, 0x0D	; 13
    14b0:	69 d6       	rcall	.+3282   	; 0x2184 <transmitByte>
    14b2:	8a e0       	ldi	r24, 0x0A	; 10
    14b4:	67 d6       	rcall	.+3278   	; 0x2184 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    14b6:	8f e7       	ldi	r24, 0x7F	; 127
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	6c d6       	rcall	.+3288   	; 0x2194 <transmitString_F>
    14bc:	5d c2       	rjmp	.+1210   	; 0x1978 <createFile+0x570>
      return;
    14be:	2f 81       	ldd	r18, Y+7	; 0x07
    14c0:	29 83       	std	Y+1, r18	; 0x01
    14c2:	38 85       	ldd	r19, Y+8	; 0x08
    14c4:	3b 83       	std	Y+3, r19	; 0x03
    14c6:	79 84       	ldd	r7, Y+9	; 0x09
    14c8:	6a 84       	ldd	r6, Y+10	; 0x0a
    14ca:	c1 2c       	mov	r12, r1
    14cc:	d1 2c       	mov	r13, r1
    14ce:	76 01       	movw	r14, r12
    14d0:	27 2c       	mov	r2, r7
    14d2:	36 2c       	mov	r3, r6

size = 0;

while(1)
{
   getSetNextCluster (cluster, SET, EOF);   //last cluster of the file, marked EOF
    14d4:	0f ef       	ldi	r16, 0xFF	; 255
    14d6:	1f ef       	ldi	r17, 0xFF	; 255
    14d8:	2f ef       	ldi	r18, 0xFF	; 255
    14da:	3f e0       	ldi	r19, 0x0F	; 15
    14dc:	41 e0       	ldi	r20, 0x01	; 1
    14de:	69 81       	ldd	r22, Y+1	; 0x01
    14e0:	7b 81       	ldd	r23, Y+3	; 0x03
    14e2:	82 2d       	mov	r24, r2
    14e4:	93 2d       	mov	r25, r3
    14e6:	19 d8       	rcall	.-4046   	; 0x51a <getSetNextCluster>
    14e8:	69 81       	ldd	r22, Y+1	; 0x01
   startBlock = getFirstSector (cluster);
    14ea:	7b 81       	ldd	r23, Y+3	; 0x03
    14ec:	82 2d       	mov	r24, r2
    14ee:	93 2d       	mov	r25, r3
    14f0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <getFirstSector>
    14f4:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <startBlock>
    14f8:	70 93 28 02 	sts	0x0228, r23	; 0x800228 <startBlock+0x1>
    14fc:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <startBlock+0x2>

   TX_NEWLINE;
    1500:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <startBlock+0x3>
    1504:	8d e0       	ldi	r24, 0x0D	; 13
    1506:	3e d6       	rcall	.+3196   	; 0x2184 <transmitByte>
    1508:	8a e0       	ldi	r24, 0x0A	; 10
   transmitString_F(PSTR(" Enter text (end with ~):"));
    150a:	3c d6       	rcall	.+3192   	; 0x2184 <transmitByte>
    150c:	85 e6       	ldi	r24, 0x65	; 101
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	41 d6       	rcall	.+3202   	; 0x2194 <transmitString_F>
   
   i=0;
    1512:	18 8a       	std	Y+16, r1	; 0x10
   j=0;
   do
   {
     data = receiveByte();
    1514:	1f 86       	std	Y+15, r1	; 0x0f
    1516:	61 2c       	mov	r6, r1
    if(data == 0x08)    //'Back Space' key pressed
    1518:	2b d6       	rcall	.+3158   	; 0x2170 <receiveByte>
    151a:	78 2e       	mov	r7, r24
    151c:	48 e0       	ldi	r20, 0x08	; 8
     {
       if(i != 0)
    151e:	84 13       	cpse	r24, r20
    1520:	15 c0       	rjmp	.+42     	; 0x154c <createFile+0x144>
    1522:	8f 85       	ldd	r24, Y+15	; 0x0f
    1524:	98 89       	ldd	r25, Y+16	; 0x10
       {
         transmitByte(data);
    1526:	89 2b       	or	r24, r25
    1528:	b9 f3       	breq	.-18     	; 0x1518 <createFile+0x110>
    152a:	88 e0       	ldi	r24, 0x08	; 8
         transmitByte(' ');
    152c:	2b d6       	rcall	.+3158   	; 0x2184 <transmitByte>
    152e:	80 e2       	ldi	r24, 0x20	; 32
         transmitByte(data);
    1530:	29 d6       	rcall	.+3154   	; 0x2184 <transmitByte>
    1532:	88 e0       	ldi	r24, 0x08	; 8
    1534:	27 d6       	rcall	.+3150   	; 0x2184 <transmitByte>
         i--;
    1536:	af 85       	ldd	r26, Y+15	; 0x0f
    1538:	b8 89       	ldd	r27, Y+16	; 0x10
    153a:	11 97       	sbiw	r26, 0x01	; 1
    153c:	b8 8b       	std	Y+16, r27	; 0x10
    153e:	af 87       	std	Y+15, r26	; 0x0f
         size--;
    1540:	b1 e0       	ldi	r27, 0x01	; 1
    1542:	cb 1a       	sub	r12, r27
    1544:	d1 08       	sbc	r13, r1
    1546:	e1 08       	sbc	r14, r1
    1548:	f1 08       	sbc	r15, r1
    154a:	e6 cf       	rjmp	.-52     	; 0x1518 <createFile+0x110>
       }
       continue;     
     }
     transmitByte(data);
    154c:	1b d6       	rcall	.+3126   	; 0x2184 <transmitByte>
    154e:	0f 85       	ldd	r16, Y+15	; 0x0f
     buffer[i++] = data;
    1550:	18 89       	ldd	r17, Y+16	; 0x10
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	ef 85       	ldd	r30, Y+15	; 0x0f
    1558:	f8 89       	ldd	r31, Y+16	; 0x10
    155a:	e5 5d       	subi	r30, 0xD5	; 213
    155c:	fd 4f       	sbci	r31, 0xFD	; 253
    155e:	70 82       	st	Z, r7
     size++;
    1560:	46 01       	movw	r8, r12
    1562:	57 01       	movw	r10, r14
    1564:	ef ef       	ldi	r30, 0xFF	; 255
    1566:	8e 1a       	sub	r8, r30
    1568:	9e 0a       	sbc	r9, r30
    156a:	ae 0a       	sbc	r10, r30
    156c:	be 0a       	sbc	r11, r30
     if(data == '\r')  //'Carriege Return (CR)' character
    156e:	fd e0       	ldi	r31, 0x0D	; 13
    1570:	7f 12       	cpse	r7, r31
    1572:	19 c0       	rjmp	.+50     	; 0x15a6 <createFile+0x19e>
     {
        transmitByte('\n');
    1574:	8a e0       	ldi	r24, 0x0A	; 10
    1576:	06 d6       	rcall	.+3084   	; 0x2184 <transmitByte>
    1578:	2f 85       	ldd	r18, Y+15	; 0x0f
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    157a:	38 89       	ldd	r19, Y+16	; 0x10
    157c:	2e 5f       	subi	r18, 0xFE	; 254
    157e:	3f 4f       	sbci	r19, 0xFF	; 255
    1580:	38 8b       	std	Y+16, r19	; 0x10
    1582:	2f 87       	std	Y+15, r18	; 0x0f
    1584:	f8 01       	movw	r30, r16
    1586:	e5 5d       	subi	r30, 0xD5	; 213
    1588:	fd 4f       	sbci	r31, 0xFD	; 253
    158a:	8a e0       	ldi	r24, 0x0A	; 10
    158c:	80 83       	st	Z, r24
    158e:	32 e0       	ldi	r19, 0x02	; 2
        size++;
    1590:	c3 0e       	add	r12, r19
    1592:	d1 1c       	adc	r13, r1
    1594:	e1 1c       	adc	r14, r1
    1596:	f1 1c       	adc	r15, r1
    1598:	4f 85       	ldd	r20, Y+15	; 0x0f
     }
    
     if(i == 512)
    159a:	58 89       	ldd	r21, Y+16	; 0x10
    159c:	41 15       	cp	r20, r1
    159e:	52 40       	sbci	r21, 0x02	; 2
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <createFile+0x19c>
    15a2:	ba cf       	rjmp	.-140    	; 0x1518 <createFile+0x110>
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <createFile+0x1a8>
    15a6:	01 15       	cp	r16, r1
    15a8:	92 e0       	ldi	r25, 0x02	; 2
    15aa:	19 07       	cpc	r17, r25
    15ac:	71 f5       	brne	.+92     	; 0x160a <createFile+0x202>
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <createFile+0x1ac>
     size++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        transmitByte('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
        size++;
    15b0:	46 01       	movw	r8, r12
    15b2:	57 01       	movw	r10, r14
     }
    
     if(i == 512)
     {
       i=0;
       error = SD_writeSingleBlock (startBlock);
    15b4:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <startBlock>
    15b8:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <startBlock+0x1>
    15bc:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <startBlock+0x2>
    15c0:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <startBlock+0x3>
    15c4:	7a d5       	rcall	.+2804   	; 0x20ba <SD_writeSingleBlock>
    15c6:	63 94       	inc	r6
       j++;
    15c8:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <sectorPerCluster>
       if(j == sectorPerCluster) {j = 0; break;}
    15cc:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <sectorPerCluster+0x1>
    15d0:	26 2d       	mov	r18, r6
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	28 17       	cp	r18, r24
    15d6:	39 07       	cpc	r19, r25
    15d8:	01 f1       	breq	.+64     	; 0x161a <createFile+0x212>
    15da:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <startBlock>
       startBlock++;
    15de:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <startBlock+0x1>
    15e2:	a0 91 29 02 	lds	r26, 0x0229	; 0x800229 <startBlock+0x2>
    15e6:	b0 91 2a 02 	lds	r27, 0x022A	; 0x80022a <startBlock+0x3>
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	a1 1d       	adc	r26, r1
    15ee:	b1 1d       	adc	r27, r1
    15f0:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <startBlock>
    15f4:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <startBlock+0x1>
    15f8:	a0 93 29 02 	sts	0x0229, r26	; 0x800229 <startBlock+0x2>
    15fc:	b0 93 2a 02 	sts	0x022A, r27	; 0x80022a <startBlock+0x3>
    1600:	75 01       	movw	r14, r10
    1602:	64 01       	movw	r12, r8
    1604:	18 8a       	std	Y+16, r1	; 0x10
        size++;
     }
    
     if(i == 512)
     {
       i=0;
    1606:	1f 86       	std	Y+15, r1	; 0x0f
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <createFile+0x20a>
    160a:	75 01       	movw	r14, r10
       }
       continue;     
     }
     transmitByte(data);
     buffer[i++] = data;
     size++;
    160c:	64 01       	movw	r12, r8
    160e:	18 8b       	std	Y+16, r17	; 0x10
         size--;
       }
       continue;     
     }
     transmitByte(data);
     buffer[i++] = data;
    1610:	0f 87       	std	Y+15, r16	; 0x0f
    1612:	ae e7       	ldi	r26, 0x7E	; 126
       error = SD_writeSingleBlock (startBlock);
       j++;
       if(j == sectorPerCluster) {j = 0; break;}
       startBlock++;
     }
    }while (data != '~');
    1614:	7a 12       	cpse	r7, r26
    1616:	80 cf       	rjmp	.-256    	; 0x1518 <createFile+0x110>
    1618:	0d c0       	rjmp	.+26     	; 0x1634 <createFile+0x22c>
    161a:	fe e7       	ldi	r31, 0x7E	; 126

   if(data == '~')
    161c:	7f 12       	cpse	r7, r31
    161e:	5c c0       	rjmp	.+184    	; 0x16d8 <createFile+0x2d0>
    1620:	72 2c       	mov	r7, r2
    1622:	63 2c       	mov	r6, r3
    1624:	75 01       	movw	r14, r10
   {
      size--;    //to remove the last entered '~' character
    1626:	64 01       	movw	r12, r8
    1628:	51 e0       	ldi	r21, 0x01	; 1
    162a:	c5 1a       	sub	r12, r21
    162c:	d1 08       	sbc	r13, r1
    162e:	e1 08       	sbc	r14, r1
    1630:	f1 08       	sbc	r15, r1
    1632:	1e c0       	rjmp	.+60     	; 0x1670 <createFile+0x268>
    1634:	ef 85       	ldd	r30, Y+15	; 0x0f
    1636:	f8 89       	ldd	r31, Y+16	; 0x10
    1638:	72 2c       	mov	r7, r2
    163a:	63 2c       	mov	r6, r3
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	c2 1a       	sub	r12, r18
    1640:	d1 08       	sbc	r13, r1
    1642:	e1 08       	sbc	r14, r1
    1644:	f1 08       	sbc	r15, r1
    1646:	af 01       	movw	r20, r30
      i--;
    1648:	41 50       	subi	r20, 0x01	; 1
    164a:	51 09       	sbc	r21, r1
    164c:	58 8b       	std	Y+16, r21	; 0x10
    164e:	4f 87       	std	Y+15, r20	; 0x0f
    1650:	41 15       	cp	r20, r1
     for(;i<512;i++)  //fill the rest of the buffer with 0x00
    1652:	52 40       	sbci	r21, 0x02	; 2
    1654:	68 f4       	brcc	.+26     	; 0x1670 <createFile+0x268>
    1656:	ef 85       	ldd	r30, Y+15	; 0x0f
        buffer[i]= 0x00;
    1658:	f8 89       	ldd	r31, Y+16	; 0x10
    165a:	e5 5d       	subi	r30, 0xD5	; 213
    165c:	fd 4f       	sbci	r31, 0xFD	; 253
    165e:	10 82       	st	Z, r1

   if(data == '~')
   {
      size--;    //to remove the last entered '~' character
      i--;
     for(;i<512;i++)  //fill the rest of the buffer with 0x00
    1660:	af 85       	ldd	r26, Y+15	; 0x0f
    1662:	b8 89       	ldd	r27, Y+16	; 0x10
    1664:	11 96       	adiw	r26, 0x01	; 1
    1666:	b8 8b       	std	Y+16, r27	; 0x10
    1668:	af 87       	std	Y+15, r26	; 0x0f
    166a:	a1 15       	cp	r26, r1
    166c:	b2 40       	sbci	r27, 0x02	; 2
    166e:	99 f7       	brne	.-26     	; 0x1656 <createFile+0x24e>
        buffer[i]= 0x00;
         error = SD_writeSingleBlock (startBlock);
    1670:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <startBlock>
    1674:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <startBlock+0x1>
    1678:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <startBlock+0x2>
    167c:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <startBlock+0x3>
    1680:	1c d5       	rcall	.+2616   	; 0x20ba <SD_writeSingleBlock>
    1682:	29 81       	ldd	r18, Y+1	; 0x01
   }

   getSetNextCluster(prevCluster, SET, cluster);
}             

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    1684:	3b 81       	ldd	r19, Y+3	; 0x03
    1686:	47 2d       	mov	r20, r7
    1688:	56 2d       	mov	r21, r6
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	0e 94 06 03 	call	0x60c	; 0x60c <getSetFreeCluster>
    1692:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <rootCluster>

prevCluster = rootCluster; //root cluster
    1696:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <rootCluster+0x1>
    169a:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <rootCluster+0x2>
    169e:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <rootCluster+0x3>
    16a2:	2f 87       	std	Y+15, r18	; 0x0f
    16a4:	38 8b       	std	Y+16, r19	; 0x10
    16a6:	49 8b       	std	Y+17, r20	; 0x11
    16a8:	5a 8b       	std	Y+18, r21	; 0x12
    16aa:	a9 84       	ldd	r10, Y+9	; 0x09
      transmitString_F(PSTR(" No free cluster!"));
      return;
   }
//transmitHex(LONG, cluster);

firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    16ac:	ba 84       	ldd	r11, Y+10	; 0x0a
    16ae:	19 82       	std	Y+1, r1	; 0x01
//Arguments: pointer to the file name
//return: none
//***************************************************************************
void createFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0;
    16b0:	2b 84       	ldd	r2, Y+11	; 0x0b
    16b2:	3c 84       	ldd	r3, Y+12	; 0x0c
    16b4:	3b e0       	ldi	r19, 0x0B	; 11
    16b6:	23 0e       	add	r2, r19
    16b8:	31 1c       	adc	r3, r1
          for(j=0; j<11; j++)
              dir->name[j] = fileName[j];
          dir->attrib = ATTR_ARCHIVE;    //settting file attribute as 'archive'
          dir->NTreserved = 0;            //always set to 0
          dir->timeTenth = 0;            //always set to 0
          dir->createTime = 0x9684;        //fixed time of creation
    16ba:	0f 2e       	mov	r0, r31
    16bc:	f4 e8       	ldi	r31, 0x84	; 132
    16be:	4f 2e       	mov	r4, r31
    16c0:	f6 e9       	ldi	r31, 0x96	; 150
    16c2:	5f 2e       	mov	r5, r31
    16c4:	f0 2d       	mov	r31, r0
          dir->createDate = 0x3a37;        //fixed date of creation
    16c6:	0f 2e       	mov	r0, r31
    16c8:	f7 e3       	ldi	r31, 0x37	; 55
    16ca:	6f 2e       	mov	r6, r31
    16cc:	fa e3       	ldi	r31, 0x3A	; 58
    16ce:	7f 2e       	mov	r7, r31
    16d0:	f0 2d       	mov	r31, r0
     break;
   }
      
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    16d2:	8b 84       	ldd	r8, Y+11	; 0x0b
    16d4:	9c 84       	ldd	r9, Y+12	; 0x0c
    16d6:	24 c0       	rjmp	.+72     	; 0x1720 <createFile+0x318>
    16d8:	69 81       	ldd	r22, Y+1	; 0x01
    16da:	7b 81       	ldd	r23, Y+3	; 0x03
    16dc:	82 2d       	mov	r24, r2
    16de:	93 2d       	mov	r25, r3
    16e0:	77 d9       	rcall	.-3346   	; 0x9d0 <searchNextFreeCluster>

   if(cluster == 0)
    16e2:	2b 01       	movw	r4, r22
    16e4:	3c 01       	movw	r6, r24
    16e6:	61 15       	cp	r22, r1
    16e8:	71 05       	cpc	r23, r1
    16ea:	81 05       	cpc	r24, r1
   {
      TX_NEWLINE;
    16ec:	91 05       	cpc	r25, r1
    16ee:	41 f4       	brne	.+16     	; 0x1700 <createFile+0x2f8>
    16f0:	8d e0       	ldi	r24, 0x0D	; 13
    16f2:	48 d5       	rcall	.+2704   	; 0x2184 <transmitByte>
    16f4:	8a e0       	ldi	r24, 0x0A	; 10
    16f6:	46 d5       	rcall	.+2700   	; 0x2184 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    16f8:	83 e5       	ldi	r24, 0x53	; 83
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	4b d5       	rcall	.+2710   	; 0x2194 <transmitString_F>
    16fe:	3c c1       	rjmp	.+632    	; 0x1978 <createFile+0x570>
      return;
    1700:	8b 01       	movw	r16, r22
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1702:	9c 01       	movw	r18, r24
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	69 81       	ldd	r22, Y+1	; 0x01
    1708:	7b 81       	ldd	r23, Y+3	; 0x03
    170a:	82 2d       	mov	r24, r2
    170c:	93 2d       	mov	r25, r3
    170e:	0e 94 8d 02 	call	0x51a	; 0x51a <getSetNextCluster>
    1712:	75 01       	movw	r14, r10
}             
    1714:	64 01       	movw	r12, r8
    1716:	49 82       	std	Y+1, r4	; 0x01
     break;
   }
      
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1718:	5b 82       	std	Y+3, r5	; 0x03
    171a:	26 2c       	mov	r2, r6
    171c:	37 2c       	mov	r3, r7
    171e:	da ce       	rjmp	.-588    	; 0x14d4 <createFile+0xcc>
      transmitString_F(PSTR(" No free cluster!"));
      return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
}             
    1720:	6f 85       	ldd	r22, Y+15	; 0x0f

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    1722:	78 89       	ldd	r23, Y+16	; 0x10
    1724:	89 89       	ldd	r24, Y+17	; 0x11
    1726:	9a 89       	ldd	r25, Y+18	; 0x12
    1728:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <getFirstSector>
    172c:	6b 8b       	std	Y+19, r22	; 0x13
    172e:	7c 8b       	std	Y+20, r23	; 0x14
    1730:	8d 8b       	std	Y+21, r24	; 0x15
    1732:	9e 8b       	std	Y+22, r25	; 0x16
    1734:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <sectorPerCluster>

   for(sector = 0; sector < sectorPerCluster; sector++)
    1738:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <sectorPerCluster+0x1>
    173c:	89 2b       	or	r24, r25
    173e:	09 f4       	brne	.+2      	; 0x1742 <createFile+0x33a>
    1740:	c1 c0       	rjmp	.+386    	; 0x18c4 <createFile+0x4bc>
    1742:	1b 86       	std	Y+11, r1	; 0x0b
    1744:	1c 86       	std	Y+12, r1	; 0x0c
    1746:	1d 86       	std	Y+13, r1	; 0x0d
    1748:	1e 86       	std	Y+14, r1	; 0x0e
    174a:	19 81       	ldd	r17, Y+1	; 0x01
   {
     SD_readSingleBlock (firstSector + sector);
    174c:	8b 89       	ldd	r24, Y+19	; 0x13
    174e:	9c 89       	ldd	r25, Y+20	; 0x14
    1750:	ad 89       	ldd	r26, Y+21	; 0x15
    1752:	be 89       	ldd	r27, Y+22	; 0x16
    1754:	2b 85       	ldd	r18, Y+11	; 0x0b
    1756:	3c 85       	ldd	r19, Y+12	; 0x0c
    1758:	4d 85       	ldd	r20, Y+13	; 0x0d
    175a:	5e 85       	ldd	r21, Y+14	; 0x0e
    175c:	82 0f       	add	r24, r18
    175e:	93 1f       	adc	r25, r19
    1760:	a4 1f       	adc	r26, r20
    1762:	b5 1f       	adc	r27, r21
    1764:	8b 83       	std	Y+3, r24	; 0x03
    1766:	9c 83       	std	Y+4, r25	; 0x04
    1768:	ad 83       	std	Y+5, r26	; 0x05
    176a:	be 83       	std	Y+6, r27	; 0x06
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	73 d4       	rcall	.+2278   	; 0x2058 <SD_readSingleBlock>
    1772:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <bytesPerSector>
    

     for(i=0; i<bytesPerSector; i+=32)
    1776:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <bytesPerSector+0x1>
    177a:	89 2b       	or	r24, r25
    177c:	09 f4       	brne	.+2      	; 0x1780 <createFile+0x378>
    177e:	89 c0       	rjmp	.+274    	; 0x1892 <createFile+0x48a>
    1780:	11 11       	cpse	r17, r1
     {
        dir = (struct dir_Structure *) &buffer[i];

        if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <createFile+0x39a>
    1784:	4b e2       	ldi	r20, 0x2B	; 43
    1786:	52 e0       	ldi	r21, 0x02	; 2
    1788:	1a 82       	std	Y+2, r1	; 0x02
    178a:	19 82       	std	Y+1, r1	; 0x01
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	58 8f       	std	Y+24, r21	; 0x18
    1792:	4f 8b       	std	Y+23, r20	; 0x17
    1794:	0e c0       	rjmp	.+28     	; 0x17b2 <createFile+0x3aa>
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	80 96       	adiw	r24, 0x20	; 32
    179c:	98 8f       	std	Y+24, r25	; 0x18
    179e:	8f 8b       	std	Y+23, r24	; 0x17
    17a0:	08 c0       	rjmp	.+16     	; 0x17b2 <createFile+0x3aa>
    17a2:	ab e2       	ldi	r26, 0x2B	; 43
     SD_readSingleBlock (firstSector + sector);
    

     for(i=0; i<bytesPerSector; i+=32)
     {
        dir = (struct dir_Structure *) &buffer[i];
    17a4:	b2 e0       	ldi	r27, 0x02	; 2
    17a6:	ba 83       	std	Y+2, r27	; 0x02
    17a8:	a9 83       	std	Y+1, r26	; 0x01
    17aa:	e9 81       	ldd	r30, Y+1	; 0x01

        if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
         {                       //indicating end of the directory file list
           dir->name[0] = 0x00;
    17ac:	fa 81       	ldd	r31, Y+2	; 0x02
    17ae:	10 82       	st	Z, r1
    17b0:	e3 c0       	rjmp	.+454    	; 0x1978 <createFile+0x570>
          return;
    17b2:	af 89       	ldd	r26, Y+23	; 0x17
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    17b4:	b8 8d       	ldd	r27, Y+24	; 0x18
    17b6:	8c 91       	ld	r24, X
    17b8:	88 23       	and	r24, r24
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <createFile+0x3ba>
    17bc:	85 3e       	cpi	r24, 0xE5	; 229
    17be:	09 f0       	breq	.+2      	; 0x17c2 <createFile+0x3ba>
    17c0:	5e c0       	rjmp	.+188    	; 0x187e <createFile+0x476>
    17c2:	3a 83       	std	Y+2, r19	; 0x02
    17c4:	29 83       	std	Y+1, r18	; 0x01
    17c6:	f4 01       	movw	r30, r8
    17c8:	af 89       	ldd	r26, Y+23	; 0x17
    17ca:	b8 8d       	ldd	r27, Y+24	; 0x18
    17cc:	81 91       	ld	r24, Z+
        {
          for(j=0; j<11; j++)
              dir->name[j] = fileName[j];
    17ce:	8d 93       	st	X+, r24
    17d0:	2e 16       	cp	r2, r30
          return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
        {
          for(j=0; j<11; j++)
    17d2:	3f 06       	cpc	r3, r31
    17d4:	d9 f7       	brne	.-10     	; 0x17cc <createFile+0x3c4>
    17d6:	2f 89       	ldd	r18, Y+23	; 0x17
    17d8:	38 8d       	ldd	r19, Y+24	; 0x18
    17da:	e0 e2       	ldi	r30, 0x20	; 32
              dir->name[j] = fileName[j];
          dir->attrib = ATTR_ARCHIVE;    //settting file attribute as 'archive'
    17dc:	d9 01       	movw	r26, r18
    17de:	1b 96       	adiw	r26, 0x0b	; 11
    17e0:	ec 93       	st	X, r30
    17e2:	1b 97       	sbiw	r26, 0x0b	; 11
    17e4:	1c 96       	adiw	r26, 0x0c	; 12
          dir->NTreserved = 0;            //always set to 0
    17e6:	1c 92       	st	X, r1
    17e8:	1c 97       	sbiw	r26, 0x0c	; 12
    17ea:	1d 96       	adiw	r26, 0x0d	; 13
          dir->timeTenth = 0;            //always set to 0
    17ec:	1c 92       	st	X, r1
    17ee:	1d 97       	sbiw	r26, 0x0d	; 13
    17f0:	1f 96       	adiw	r26, 0x0f	; 15
          dir->createTime = 0x9684;        //fixed time of creation
    17f2:	5c 92       	st	X, r5
    17f4:	4e 92       	st	-X, r4
    17f6:	1e 97       	sbiw	r26, 0x0e	; 14
    17f8:	51 96       	adiw	r26, 0x11	; 17
          dir->createDate = 0x3a37;        //fixed date of creation
    17fa:	7c 92       	st	X, r7
    17fc:	6e 92       	st	-X, r6
    17fe:	50 97       	sbiw	r26, 0x10	; 16
    1800:	53 96       	adiw	r26, 0x13	; 19
          dir->lastAccessDate = 0x3a37;    //fixed date of last access
    1802:	7c 92       	st	X, r7
    1804:	6e 92       	st	-X, r6
    1806:	52 97       	sbiw	r26, 0x12	; 18
    1808:	57 96       	adiw	r26, 0x17	; 23
          dir->writeTime = 0x9684;        //fixed time of last write
    180a:	5c 92       	st	X, r5
    180c:	4e 92       	st	-X, r4
    180e:	56 97       	sbiw	r26, 0x16	; 22
          dir->writeDate = 0x3a37;        //fixed date of last write
    1810:	59 96       	adiw	r26, 0x19	; 25
    1812:	7c 92       	st	X, r7
          dir->firstClusterHI = firstClusterHigh;
    1814:	6e 92       	st	-X, r6
    1816:	58 97       	sbiw	r26, 0x18	; 24
          dir->firstClusterLO = firstClusterLow;
    1818:	55 96       	adiw	r26, 0x15	; 21
    181a:	bc 92       	st	X, r11
    181c:	ae 92       	st	-X, r10
    181e:	54 97       	sbiw	r26, 0x14	; 20
    1820:	2f 81       	ldd	r18, Y+7	; 0x07
          dir->fileSize = size;
    1822:	38 85       	ldd	r19, Y+8	; 0x08
    1824:	5b 96       	adiw	r26, 0x1b	; 27
    1826:	3c 93       	st	X, r19
    1828:	2e 93       	st	-X, r18
    182a:	5a 97       	sbiw	r26, 0x1a	; 26
    182c:	5c 96       	adiw	r26, 0x1c	; 28

          SD_writeSingleBlock (firstSector + sector);
    182e:	cd 92       	st	X+, r12
    1830:	dd 92       	st	X+, r13
    1832:	ed 92       	st	X+, r14
    1834:	fc 92       	st	X, r15
    1836:	5f 97       	sbiw	r26, 0x1f	; 31
    1838:	6b 81       	ldd	r22, Y+3	; 0x03
          fileCreatedFlag = 1;

          TX_NEWLINE;
    183a:	7c 81       	ldd	r23, Y+4	; 0x04
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	3c d4       	rcall	.+2168   	; 0x20ba <SD_writeSingleBlock>
    1842:	8d e0       	ldi	r24, 0x0D	; 13
    1844:	9f d4       	rcall	.+2366   	; 0x2184 <transmitByte>
          TX_NEWLINE;
    1846:	8a e0       	ldi	r24, 0x0A	; 10
    1848:	9d d4       	rcall	.+2362   	; 0x2184 <transmitByte>
    184a:	8d e0       	ldi	r24, 0x0D	; 13
    184c:	9b d4       	rcall	.+2358   	; 0x2184 <transmitByte>
    184e:	8a e0       	ldi	r24, 0x0A	; 10
    1850:	99 d4       	rcall	.+2354   	; 0x2184 <transmitByte>
          transmitString_F(PSTR(" File Created!"));
    1852:	84 e4       	ldi	r24, 0x44	; 68
    1854:	91 e0       	ldi	r25, 0x01	; 1
    1856:	9e d4       	rcall	.+2364   	; 0x2194 <transmitString_F>
    1858:	b7 01       	movw	r22, r14

          freeMemoryUpdate (REMOVE, size); //updating free memory count in FSinfo sector
    185a:	a6 01       	movw	r20, r12
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	d3 da       	rcall	.-2650   	; 0xe06 <freeMemoryUpdate>
    1860:	e9 81       	ldd	r30, Y+1	; 0x01
    1862:	fa 81       	ldd	r31, Y+2	; 0x02
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    

     for(i=0; i<bytesPerSector; i+=32)
    1864:	b0 96       	adiw	r30, 0x20	; 32
    1866:	fa 83       	std	Y+2, r31	; 0x02
    1868:	e9 83       	std	Y+1, r30	; 0x01
    186a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <bytesPerSector>
    186e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <bytesPerSector+0x1>
    1872:	e8 17       	cp	r30, r24
    1874:	f9 07       	cpc	r31, r25
    1876:	08 f4       	brcc	.+2      	; 0x187a <createFile+0x472>
    1878:	78 c0       	rjmp	.+240    	; 0x196a <createFile+0x562>
    187a:	11 e0       	ldi	r17, 0x01	; 1
    187c:	0a c0       	rjmp	.+20     	; 0x1892 <createFile+0x48a>
          dir->firstClusterHI = firstClusterHigh;
          dir->firstClusterLO = firstClusterLow;
          dir->fileSize = size;

          SD_writeSingleBlock (firstSector + sector);
          fileCreatedFlag = 1;
    187e:	20 5e       	subi	r18, 0xE0	; 224
    1880:	3f 4f       	sbci	r19, 0xFF	; 255
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    

     for(i=0; i<bytesPerSector; i+=32)
    1882:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <bytesPerSector>
    1886:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <bytesPerSector+0x1>
    188a:	28 17       	cp	r18, r24
    188c:	39 07       	cpc	r19, r25
    188e:	08 f4       	brcc	.+2      	; 0x1892 <createFile+0x48a>
    1890:	82 cf       	rjmp	.-252    	; 0x1796 <createFile+0x38e>
    1892:	2b 85       	ldd	r18, Y+11	; 0x0b
    1894:	3c 85       	ldd	r19, Y+12	; 0x0c

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1896:	4d 85       	ldd	r20, Y+13	; 0x0d
    1898:	5e 85       	ldd	r21, Y+14	; 0x0e
    189a:	2f 5f       	subi	r18, 0xFF	; 255
    189c:	3f 4f       	sbci	r19, 0xFF	; 255
    189e:	4f 4f       	sbci	r20, 0xFF	; 255
    18a0:	5f 4f       	sbci	r21, 0xFF	; 255
    18a2:	2b 87       	std	Y+11, r18	; 0x0b
    18a4:	3c 87       	std	Y+12, r19	; 0x0c
    18a6:	4d 87       	std	Y+13, r20	; 0x0d
    18a8:	5e 87       	std	Y+14, r21	; 0x0e
    18aa:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <sectorPerCluster>
    18ae:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <sectorPerCluster+0x1>
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	28 17       	cp	r18, r24
    18b8:	39 07       	cpc	r19, r25
    18ba:	4a 07       	cpc	r20, r26
    18bc:	5b 07       	cpc	r21, r27
    18be:	08 f4       	brcc	.+2      	; 0x18c2 <createFile+0x4ba>
    18c0:	45 cf       	rjmp	.-374    	; 0x174c <createFile+0x344>
    18c2:	19 83       	std	Y+1, r17	; 0x01
    18c4:	00 e0       	ldi	r16, 0x00	; 0
         
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    18c6:	10 e0       	ldi	r17, 0x00	; 0
    18c8:	98 01       	movw	r18, r16
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    18ce:	78 89       	ldd	r23, Y+16	; 0x10
    18d0:	89 89       	ldd	r24, Y+17	; 0x11
    18d2:	9a 89       	ldd	r25, Y+18	; 0x12
    18d4:	0e 94 8d 02 	call	0x51a	; 0x51a <getSetNextCluster>
    18d8:	67 3f       	cpi	r22, 0xF7	; 247

   if(cluster > 0x0ffffff6)
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	73 07       	cpc	r23, r19
    18de:	83 07       	cpc	r24, r19
    18e0:	3f e0       	ldi	r19, 0x0F	; 15
    18e2:	93 07       	cpc	r25, r19
    18e4:	88 f1       	brcs	.+98     	; 0x1948 <createFile+0x540>
    18e6:	6f 3f       	cpi	r22, 0xFF	; 255
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 40       	sbci	r25, 0x0F	; 15
    18ee:	41 f5       	brne	.+80     	; 0x1940 <createFile+0x538>
    18f0:	6f 85       	ldd	r22, Y+15	; 0x0f
      {  
        cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    18f2:	78 89       	ldd	r23, Y+16	; 0x10
    18f4:	89 89       	ldd	r24, Y+17	; 0x11
    18f6:	9a 89       	ldd	r25, Y+18	; 0x12
    18f8:	6b d8       	rcall	.-3882   	; 0x9d0 <searchNextFreeCluster>
    18fa:	6b 83       	std	Y+3, r22	; 0x03
    18fc:	7f 8b       	std	Y+23, r23	; 0x17
    18fe:	8b 8b       	std	Y+19, r24	; 0x13
    1900:	9b 87       	std	Y+11, r25	; 0x0b
    1902:	06 2f       	mov	r16, r22
        getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1904:	17 2f       	mov	r17, r23
    1906:	28 2f       	mov	r18, r24
    1908:	39 2f       	mov	r19, r25
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	6f 85       	ldd	r22, Y+15	; 0x0f
    190e:	78 89       	ldd	r23, Y+16	; 0x10
    1910:	89 89       	ldd	r24, Y+17	; 0x11
    1912:	9a 89       	ldd	r25, Y+18	; 0x12
    1914:	0e 94 8d 02 	call	0x51a	; 0x51a <getSetNextCluster>
    1918:	0f ef       	ldi	r16, 0xFF	; 255
        getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    191a:	1f ef       	ldi	r17, 0xFF	; 255
    191c:	2f ef       	ldi	r18, 0xFF	; 255
    191e:	3f e0       	ldi	r19, 0x0F	; 15
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	6b 81       	ldd	r22, Y+3	; 0x03
    1924:	7f 89       	ldd	r23, Y+23	; 0x17
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	9b 85       	ldd	r25, Y+11	; 0x0b
    192a:	0e 94 8d 02 	call	0x51a	; 0x51a <getSetNextCluster>

   if(cluster > 0x0ffffff6)
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
      {  
        cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    192e:	5b 81       	ldd	r21, Y+3	; 0x03
    1930:	5f 87       	std	Y+15, r21	; 0x0f
    1932:	8f 89       	ldd	r24, Y+23	; 0x17
    1934:	88 8b       	std	Y+16, r24	; 0x10
    1936:	9b 89       	ldd	r25, Y+19	; 0x13
    1938:	99 8b       	std	Y+17, r25	; 0x11
    193a:	ab 85       	ldd	r26, Y+11	; 0x0b
    193c:	aa 8b       	std	Y+18, r26	; 0x12
    193e:	08 c0       	rjmp	.+16     	; 0x1950 <createFile+0x548>
        getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      }

     else
      {    
        transmitString_F(PSTR("End of Cluster Chain"));
    1940:	8f e2       	ldi	r24, 0x2F	; 47
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	27 d4       	rcall	.+2126   	; 0x2194 <transmitString_F>
    1946:	18 c0       	rjmp	.+48     	; 0x1978 <createFile+0x570>
        return;
    1948:	6f 87       	std	Y+15, r22	; 0x0f
         
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    194a:	78 8b       	std	Y+16, r23	; 0x10
    194c:	89 8b       	std	Y+17, r24	; 0x11
    194e:	9a 8b       	std	Y+18, r25	; 0x12
    1950:	2f 85       	ldd	r18, Y+15	; 0x0f
      {    
        transmitString_F(PSTR("End of Cluster Chain"));
        return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1952:	38 89       	ldd	r19, Y+16	; 0x10
    1954:	49 89       	ldd	r20, Y+17	; 0x11
    1956:	5a 89       	ldd	r21, Y+18	; 0x12
    1958:	23 2b       	or	r18, r19
    195a:	24 2b       	or	r18, r20
    195c:	25 2b       	or	r18, r21
    195e:	09 f0       	breq	.+2      	; 0x1962 <createFile+0x55a>
    1960:	df ce       	rjmp	.-578    	; 0x1720 <createFile+0x318>
    1962:	86 e1       	ldi	r24, 0x16	; 22
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	16 d4       	rcall	.+2092   	; 0x2194 <transmitString_F>
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <createFile+0x570>
    196a:	49 81       	ldd	r20, Y+1	; 0x01
    196c:	5a 81       	ldd	r21, Y+2	; 0x02
    196e:	45 5d       	subi	r20, 0xD5	; 213
    1970:	5d 4f       	sbci	r21, 0xFD	; 253
     SD_readSingleBlock (firstSector + sector);
    

     for(i=0; i<bytesPerSector; i+=32)
     {
        dir = (struct dir_Structure *) &buffer[i];
    1972:	5a 83       	std	Y+2, r21	; 0x02
    1974:	49 83       	std	Y+1, r20	; 0x01
    1976:	19 cf       	rjmp	.-462    	; 0x17aa <createFile+0x3a2>
    1978:	68 96       	adiw	r28, 0x18	; 24
    197a:	0f b6       	in	r0, 0x3f	; 63
   
   prevCluster = cluster;
 }
 
 return;
}
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	df 90       	pop	r13
    1992:	cf 90       	pop	r12
    1994:	bf 90       	pop	r11
    1996:	af 90       	pop	r10
    1998:	9f 90       	pop	r9
    199a:	8f 90       	pop	r8
    199c:	7f 90       	pop	r7
    199e:	6f 90       	pop	r6
    19a0:	5f 90       	pop	r5
    19a2:	4f 90       	pop	r4
    19a4:	3f 90       	pop	r3
    19a6:	2f 90       	pop	r2
    19a8:	08 95       	ret

000019aa <port_init>:
volatile unsigned long firstDataSector, rootCluster, totalClusters;
volatile unsigned int  bytesPerSector, sectorPerCluster, reservedSectorCount;

void port_init(void)
{
	LED_DDR = LED_OUTPUT_MASK;
    19aa:	88 e7       	ldi	r24, 0x78	; 120
    19ac:	80 bb       	out	0x10, r24	; 16
	SPI_DDR = SPI_OUTPUT_MASK;
    19ae:	87 e8       	ldi	r24, 0x87	; 135
    19b0:	84 b9       	out	0x04, r24	; 4
	SPI2_DDR = SPI2_OUTPUT_MASK;
    19b2:	88 e6       	ldi	r24, 0x68	; 104
    19b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	PUMPE_DDR = PUMPE_OUTPUT_MASK;
    19b8:	8c ef       	ldi	r24, 0xFC	; 252
    19ba:	81 b9       	out	0x01, r24	; 1
	PUMPE_DDR2 = PUMPE2_OUTPUT_MASK;
    19bc:	85 e0       	ldi	r24, 0x05	; 5
    19be:	83 bb       	out	0x13, r24	; 19
	PUMPE_DDR3 = PUMPE3_OUTPUT_MASK;
    19c0:	8c e7       	ldi	r24, 0x7C	; 124
    19c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	RFID_DDR = RFID_OUTPUT_MASK;
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	87 b9       	out	0x07, r24	; 7
	FLUSS_DDR = 0b00000000;
    19ca:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	SPI_PORT |= SPI_MISO_PIN;
    19ce:	93 b1       	in	r25, 0x03	; 3
    19d0:	85 b1       	in	r24, 0x05	; 5
    19d2:	89 2b       	or	r24, r25
    19d4:	85 b9       	out	0x05, r24	; 5
    19d6:	08 95       	ret

000019d8 <uart0_init>:
// actual: baud rate:19231 (0.2%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UBRR0H = (((F_CPU/16/9600) -1) >> 8);
    19d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = ((F_CPU/16/9600) -1);
    19dc:	87 e6       	ldi	r24, 0x67	; 103
    19de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
    19e2:	88 e9       	ldi	r24, 0x98	; 152
    19e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    19e8:	86 e0       	ldi	r24, 0x06	; 6
    19ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    19ee:	08 95       	ret

000019f0 <init_devices>:
}

//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();
    19f0:	f8 94       	cli
 port_init();
    19f2:	db df       	rcall	.-74     	; 0x19aa <port_init>
 spi_init();
    19f4:	ac d3       	rcall	.+1880   	; 0x214e <spi_init>
 uart0_init();
    19f6:	f0 cf       	rjmp	.-32     	; 0x19d8 <uart0_init>
    19f8:	08 95       	ret

000019fa <main>:
    19fa:	cf 93       	push	r28
 //all peripherals are now initialized
}


int main(void)
{
    19fc:	df 93       	push	r29
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	2d 97       	sbiw	r28, 0x0d	; 13
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a0e:	2f ef       	ldi	r18, 0xFF	; 255
    1a10:	81 ee       	ldi	r24, 0xE1	; 225
    1a12:	94 e0       	ldi	r25, 0x04	; 4
    1a14:	21 50       	subi	r18, 0x01	; 1
    1a16:	80 40       	sbci	r24, 0x00	; 0
    1a18:	90 40       	sbci	r25, 0x00	; 0
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <main+0x1a>
    1a1c:	00 c0       	rjmp	.+0      	; 0x1a1e <main+0x24>
    1a1e:	00 00       	nop
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    1a20:	e7 df       	rcall	.-50     	; 0x19f0 <init_devices>

TX_NEWLINE;
    1a22:	8d e0       	ldi	r24, 0x0D	; 13
    1a24:	af d3       	rcall	.+1886   	; 0x2184 <transmitByte>
    1a26:	8a e0       	ldi	r24, 0x0A	; 10
    1a28:	ad d3       	rcall	.+1882   	; 0x2184 <transmitByte>
TX_NEWLINE;
    1a2a:	8d e0       	ldi	r24, 0x0D	; 13
    1a2c:	ab d3       	rcall	.+1878   	; 0x2184 <transmitByte>
    1a2e:	8a e0       	ldi	r24, 0x0A	; 10
    1a30:	a9 d3       	rcall	.+1874   	; 0x2184 <transmitByte>
transmitString_F (PSTR("***********************************"));
    1a32:	81 e6       	ldi	r24, 0x61	; 97
    1a34:	94 e0       	ldi	r25, 0x04	; 4
    1a36:	ae d3       	rcall	.+1884   	; 0x2194 <transmitString_F>
TX_NEWLINE;
    1a38:	8d e0       	ldi	r24, 0x0D	; 13
    1a3a:	a4 d3       	rcall	.+1864   	; 0x2184 <transmitByte>
    1a3c:	8a e0       	ldi	r24, 0x0A	; 10
    1a3e:	a2 d3       	rcall	.+1860   	; 0x2184 <transmitByte>
transmitString_F (PSTR(" Dharmani's microSD Card Testing.."));
    1a40:	8e e3       	ldi	r24, 0x3E	; 62
    1a42:	94 e0       	ldi	r25, 0x04	; 4
    1a44:	a7 d3       	rcall	.+1870   	; 0x2194 <transmitString_F>
TX_NEWLINE;
    1a46:	8d e0       	ldi	r24, 0x0D	; 13
    1a48:	9d d3       	rcall	.+1850   	; 0x2184 <transmitByte>
    1a4a:	8a e0       	ldi	r24, 0x0A	; 10
    1a4c:	9b d3       	rcall	.+1846   	; 0x2184 <transmitByte>
transmitString_F (PSTR("***********************************"));
    1a4e:	8a e1       	ldi	r24, 0x1A	; 26
    1a50:	94 e0       	ldi	r25, 0x04	; 4
    1a52:	a0 d3       	rcall	.+1856   	; 0x2194 <transmitString_F>
    1a54:	8d e0       	ldi	r24, 0x0D	; 13
TX_NEWLINE;
    1a56:	96 d3       	rcall	.+1836   	; 0x2184 <transmitByte>
    1a58:	8a e0       	ldi	r24, 0x0A	; 10
    1a5a:	94 d3       	rcall	.+1832   	; 0x2184 <transmitByte>
    1a5c:	76 d2       	rcall	.+1260   	; 0x1f4a <SD_init>
    1a5e:	80 e5       	ldi	r24, 0x50	; 80
    1a60:	8c bd       	out	0x2c, r24	; 44

SD_init();
    1a62:	8d b5       	in	r24, 0x2d	; 45
    1a64:	81 60       	ori	r24, 0x01	; 1
SPI_HIGH_SPEED;   //SCK - 4 MHz
    1a66:	8d bd       	out	0x2d, r24	; 45
    1a68:	ef e9       	ldi	r30, 0x9F	; 159
    1a6a:	ff e0       	ldi	r31, 0x0F	; 15
    1a6c:	31 97       	sbiw	r30, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <main+0x72>
    1a70:	00 c0       	rjmp	.+0      	; 0x1a72 <main+0x78>
    1a72:	00 00       	nop
    1a74:	0e 94 98 03 	call	0x730	; 0x730 <getBootSectorData>
    1a78:	88 23       	and	r24, r24
_delay_ms(1);

FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1a7a:	29 f0       	breq	.+10     	; 0x1a86 <main+0x8c>
    1a7c:	89 e0       	ldi	r24, 0x09	; 9
if(error)  
    1a7e:	94 e0       	ldi	r25, 0x04	; 4
    1a80:	89 d3       	rcall	.+1810   	; 0x2194 <transmitString_F>
 {
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1a82:	71 2c       	mov	r7, r1
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <main+0x90>
    1a86:	77 24       	eor	r7, r7
    1a88:	73 94       	inc	r7
  FAT32_active = 0;
    1a8a:	81 2c       	mov	r8, r1
    1a8c:	91 2c       	mov	r9, r1

SD_init();
SPI_HIGH_SPEED;   //SCK - 4 MHz
_delay_ms(1);

FAT32_active = 1;
    1a8e:	54 01       	movw	r10, r8
    1a90:	83 94       	inc	r8
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    1a92:	6e 01       	movw	r12, r28
    1a94:	fe e0       	ldi	r31, 0x0E	; 14
    1a96:	cf 0e       	add	r12, r31
    1a98:	d1 1c       	adc	r13, r1
    1a9a:	0f 2e       	mov	r0, r31
    1a9c:	f8 ee       	ldi	r31, 0xE8	; 232
{
TX_NEWLINE;
TX_NEWLINE;
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
data = receiveByte(); transmitByte(data);
startBlock = (data & 0x0f) * 1000;
    1a9e:	4f 2e       	mov	r4, r31
    1aa0:	f3 e0       	ldi	r31, 0x03	; 3
    1aa2:	5f 2e       	mov	r5, r31
    1aa4:	f0 2d       	mov	r31, r0
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f) * 100;
    1aa6:	0f 2e       	mov	r0, r31
    1aa8:	f4 e6       	ldi	r31, 0x64	; 100
    1aaa:	6f 2e       	mov	r6, r31
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    1aac:	f0 2d       	mov	r31, r0
    1aae:	8d e0       	ldi	r24, 0x0D	; 13
    1ab0:	69 d3       	rcall	.+1746   	; 0x2184 <transmitByte>
    1ab2:	8a e0       	ldi	r24, 0x0A	; 10
transmitString_F(PSTR("Press any key..."));
    1ab4:	67 d3       	rcall	.+1742   	; 0x2184 <transmitByte>
    1ab6:	88 ef       	ldi	r24, 0xF8	; 248
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
TX_NEWLINE;
    1aba:	6c d3       	rcall	.+1752   	; 0x2194 <transmitString_F>
    1abc:	8d e0       	ldi	r24, 0x0D	; 13
    1abe:	62 d3       	rcall	.+1732   	; 0x2184 <transmitByte>
    1ac0:	8a e0       	ldi	r24, 0x0A	; 10
option = receiveByte();
    1ac2:	60 d3       	rcall	.+1728   	; 0x2184 <transmitByte>
TX_NEWLINE;
    1ac4:	55 d3       	rcall	.+1706   	; 0x2170 <receiveByte>
    1ac6:	8d e0       	ldi	r24, 0x0D	; 13
    1ac8:	5d d3       	rcall	.+1722   	; 0x2184 <transmitByte>
    1aca:	8a e0       	ldi	r24, 0x0A	; 10
transmitString_F(PSTR("> 0 : Erase Blocks"));
    1acc:	5b d3       	rcall	.+1718   	; 0x2184 <transmitByte>
    1ace:	85 ee       	ldi	r24, 0xE5	; 229
    1ad0:	93 e0       	ldi	r25, 0x03	; 3
TX_NEWLINE;
    1ad2:	60 d3       	rcall	.+1728   	; 0x2194 <transmitString_F>
    1ad4:	8d e0       	ldi	r24, 0x0D	; 13
    1ad6:	56 d3       	rcall	.+1708   	; 0x2184 <transmitByte>
    1ad8:	8a e0       	ldi	r24, 0x0A	; 10
transmitString_F(PSTR("> 1 : Write single Block"));
    1ada:	54 d3       	rcall	.+1704   	; 0x2184 <transmitByte>
    1adc:	8c ec       	ldi	r24, 0xCC	; 204
    1ade:	93 e0       	ldi	r25, 0x03	; 3
TX_NEWLINE;
    1ae0:	59 d3       	rcall	.+1714   	; 0x2194 <transmitString_F>
    1ae2:	8d e0       	ldi	r24, 0x0D	; 13
    1ae4:	4f d3       	rcall	.+1694   	; 0x2184 <transmitByte>
    1ae6:	8a e0       	ldi	r24, 0x0A	; 10
transmitString_F(PSTR("> 2 : Read single Block"));
    1ae8:	4d d3       	rcall	.+1690   	; 0x2184 <transmitByte>
    1aea:	84 eb       	ldi	r24, 0xB4	; 180
TX_NEWLINE;
transmitString_F(PSTR("> 4 : Read multiple Blocks"));
#endif


TX_NEWLINE;
    1aec:	93 e0       	ldi	r25, 0x03	; 3
    1aee:	52 d3       	rcall	.+1700   	; 0x2194 <transmitString_F>
    1af0:	8d e0       	ldi	r24, 0x0D	; 13
    1af2:	48 d3       	rcall	.+1680   	; 0x2184 <transmitByte>
transmitString_F(PSTR("> 5 : Get file list"));
    1af4:	8a e0       	ldi	r24, 0x0A	; 10
    1af6:	46 d3       	rcall	.+1676   	; 0x2184 <transmitByte>
    1af8:	80 ea       	ldi	r24, 0xA0	; 160
TX_NEWLINE;
    1afa:	93 e0       	ldi	r25, 0x03	; 3
    1afc:	4b d3       	rcall	.+1686   	; 0x2194 <transmitString_F>
    1afe:	8d e0       	ldi	r24, 0x0D	; 13
    1b00:	41 d3       	rcall	.+1666   	; 0x2184 <transmitByte>
transmitString_F(PSTR("> 6 : Read File"));
    1b02:	8a e0       	ldi	r24, 0x0A	; 10
    1b04:	3f d3       	rcall	.+1662   	; 0x2184 <transmitByte>
    1b06:	80 e9       	ldi	r24, 0x90	; 144
TX_NEWLINE;
    1b08:	93 e0       	ldi	r25, 0x03	; 3
    1b0a:	44 d3       	rcall	.+1672   	; 0x2194 <transmitString_F>
    1b0c:	8d e0       	ldi	r24, 0x0D	; 13
    1b0e:	3a d3       	rcall	.+1652   	; 0x2184 <transmitByte>
    1b10:	8a e0       	ldi	r24, 0x0A	; 10
transmitString_F(PSTR("> 7 : Create File"));
    1b12:	38 d3       	rcall	.+1648   	; 0x2184 <transmitByte>
    1b14:	8e e7       	ldi	r24, 0x7E	; 126
    1b16:	93 e0       	ldi	r25, 0x03	; 3
TX_NEWLINE;
    1b18:	3d d3       	rcall	.+1658   	; 0x2194 <transmitString_F>
    1b1a:	8d e0       	ldi	r24, 0x0D	; 13
    1b1c:	33 d3       	rcall	.+1638   	; 0x2184 <transmitByte>
    1b1e:	8a e0       	ldi	r24, 0x0A	; 10
transmitString_F(PSTR("> 8 : Delete File"));
    1b20:	31 d3       	rcall	.+1634   	; 0x2184 <transmitByte>
    1b22:	8c e6       	ldi	r24, 0x6C	; 108
    1b24:	93 e0       	ldi	r25, 0x03	; 3
    1b26:	36 d3       	rcall	.+1644   	; 0x2194 <transmitString_F>
TX_NEWLINE;
    1b28:	8d e0       	ldi	r24, 0x0D	; 13
    1b2a:	2c d3       	rcall	.+1624   	; 0x2184 <transmitByte>
    1b2c:	8a e0       	ldi	r24, 0x0A	; 10
    1b2e:	2a d3       	rcall	.+1620   	; 0x2184 <transmitByte>
transmitString_F(PSTR("> 9 : Read SD Memory Capacity (Total/Free)"));
    1b30:	81 e4       	ldi	r24, 0x41	; 65
    1b32:	93 e0       	ldi	r25, 0x03	; 3

TX_NEWLINE;
    1b34:	2f d3       	rcall	.+1630   	; 0x2194 <transmitString_F>
    1b36:	8d e0       	ldi	r24, 0x0D	; 13
    1b38:	25 d3       	rcall	.+1610   	; 0x2184 <transmitByte>
    1b3a:	8a e0       	ldi	r24, 0x0A	; 10
TX_NEWLINE;
    1b3c:	23 d3       	rcall	.+1606   	; 0x2184 <transmitByte>
    1b3e:	8d e0       	ldi	r24, 0x0D	; 13
    1b40:	21 d3       	rcall	.+1602   	; 0x2184 <transmitByte>
    1b42:	8a e0       	ldi	r24, 0x0A	; 10
    1b44:	1f d3       	rcall	.+1598   	; 0x2184 <transmitByte>
    1b46:	89 e2       	ldi	r24, 0x29	; 41
transmitString_F(PSTR("> Select Option (0-9): "));
    1b48:	93 e0       	ldi	r25, 0x03	; 3
    1b4a:	24 d3       	rcall	.+1608   	; 0x2194 <transmitString_F>
    1b4c:	11 d3       	rcall	.+1570   	; 0x2170 <receiveByte>
    1b4e:	e8 2e       	mov	r14, r24

/*WARNING: If option 0, 1 or 3 is selected, the card may not be detected by PC/Laptop again,
as it disturbs the FAT format, and you may have to format it again with FAT32.
This options are given for learning the raw data transfer to & from the SD Card*/

option = receiveByte();
    1b50:	19 d3       	rcall	.+1586   	; 0x2184 <transmitByte>
    1b52:	8b ec       	ldi	r24, 0xCB	; 203
    1b54:	8e 0d       	add	r24, r14
transmitByte(option);
    1b56:	85 30       	cpi	r24, 0x05	; 5
    1b58:	70 f4       	brcc	.+28     	; 0x1b76 <main+0x17c>

if(option >= 0x35 && option <= 0x39)  //options 5 to 9 disabled if FAT32 not found
    1b5a:	71 10       	cpse	r7, r1
    1b5c:	0c c0       	rjmp	.+24     	; 0x1b76 <main+0x17c>
    1b5e:	8d e0       	ldi	r24, 0x0D	; 13
{
  if(!FAT32_active)
    1b60:	11 d3       	rcall	.+1570   	; 0x2184 <transmitByte>
  {
    TX_NEWLINE;
    1b62:	8a e0       	ldi	r24, 0x0A	; 10
    1b64:	0f d3       	rcall	.+1566   	; 0x2184 <transmitByte>
    1b66:	8d e0       	ldi	r24, 0x0D	; 13
    1b68:	0d d3       	rcall	.+1562   	; 0x2184 <transmitByte>
    1b6a:	8a e0       	ldi	r24, 0x0A	; 10
    1b6c:	0b d3       	rcall	.+1558   	; 0x2184 <transmitByte>
    TX_NEWLINE;
    1b6e:	81 e1       	ldi	r24, 0x11	; 17
    1b70:	93 e0       	ldi	r25, 0x03	; 3
    1b72:	10 d3       	rcall	.+1568   	; 0x2194 <transmitString_F>
    1b74:	9c cf       	rjmp	.-200    	; 0x1aae <main+0xb4>
    1b76:	80 ed       	ldi	r24, 0xD0	; 208
    1b78:	8e 0d       	add	r24, r14
      transmitString_F(PSTR("FAT32 options disabled!"));
    1b7a:	85 30       	cpi	r24, 0x05	; 5
    1b7c:	08 f0       	brcs	.+2      	; 0x1b80 <main+0x186>
    1b7e:	84 c0       	rjmp	.+264    	; 0x1c88 <main+0x28e>
    1b80:	8d e0       	ldi	r24, 0x0D	; 13
      continue;
    1b82:	00 d3       	rcall	.+1536   	; 0x2184 <transmitByte>
  }
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    1b84:	8a e0       	ldi	r24, 0x0A	; 10
    1b86:	fe d2       	rcall	.+1532   	; 0x2184 <transmitByte>
    1b88:	8d e0       	ldi	r24, 0x0D	; 13
    1b8a:	fc d2       	rcall	.+1528   	; 0x2184 <transmitByte>
    1b8c:	8a e0       	ldi	r24, 0x0A	; 10
{
TX_NEWLINE;
    1b8e:	fa d2       	rcall	.+1524   	; 0x2184 <transmitByte>
    1b90:	8d ee       	ldi	r24, 0xED	; 237
    1b92:	92 e0       	ldi	r25, 0x02	; 2
    1b94:	ff d2       	rcall	.+1534   	; 0x2194 <transmitString_F>
    1b96:	ec d2       	rcall	.+1496   	; 0x2170 <receiveByte>
TX_NEWLINE;
    1b98:	18 2f       	mov	r17, r24
    1b9a:	f4 d2       	rcall	.+1512   	; 0x2184 <transmitByte>
    1b9c:	1f 70       	andi	r17, 0x0F	; 15
    1b9e:	14 9d       	mul	r17, r4
    1ba0:	c0 01       	movw	r24, r0
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    1ba2:	15 9d       	mul	r17, r5
    1ba4:	90 0d       	add	r25, r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	09 2e       	mov	r0, r25
data = receiveByte(); transmitByte(data);
    1baa:	00 0c       	add	r0, r0
    1bac:	aa 0b       	sbc	r26, r26
    1bae:	bb 0b       	sbc	r27, r27
    1bb0:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <startBlock>
startBlock = (data & 0x0f) * 1000;
    1bb4:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <startBlock+0x1>
    1bb8:	a0 93 29 02 	sts	0x0229, r26	; 0x800229 <startBlock+0x2>
    1bbc:	b0 93 2a 02 	sts	0x022A, r27	; 0x80022a <startBlock+0x3>
    1bc0:	d7 d2       	rcall	.+1454   	; 0x2170 <receiveByte>
    1bc2:	18 2f       	mov	r17, r24
    1bc4:	df d2       	rcall	.+1470   	; 0x2184 <transmitByte>
    1bc6:	40 91 27 02 	lds	r20, 0x0227	; 0x800227 <startBlock>
    1bca:	50 91 28 02 	lds	r21, 0x0228	; 0x800228 <startBlock+0x1>
    1bce:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <startBlock+0x2>
    1bd2:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <startBlock+0x3>
    1bd6:	1f 70       	andi	r17, 0x0F	; 15
data = receiveByte(); transmitByte(data);
    1bd8:	61 9e       	mul	r6, r17
    1bda:	c0 01       	movw	r24, r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	09 2e       	mov	r0, r25
    1be0:	00 0c       	add	r0, r0
startBlock += (data & 0x0f) * 100;
    1be2:	aa 0b       	sbc	r26, r26
    1be4:	bb 0b       	sbc	r27, r27
    1be6:	84 0f       	add	r24, r20
    1be8:	95 1f       	adc	r25, r21
    1bea:	a6 1f       	adc	r26, r22
    1bec:	b7 1f       	adc	r27, r23
    1bee:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <startBlock>
    1bf2:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <startBlock+0x1>
    1bf6:	a0 93 29 02 	sts	0x0229, r26	; 0x800229 <startBlock+0x2>
    1bfa:	b0 93 2a 02 	sts	0x022A, r27	; 0x80022a <startBlock+0x3>
    1bfe:	b8 d2       	rcall	.+1392   	; 0x2170 <receiveByte>
    1c00:	18 2f       	mov	r17, r24
    1c02:	c0 d2       	rcall	.+1408   	; 0x2184 <transmitByte>
    1c04:	40 91 27 02 	lds	r20, 0x0227	; 0x800227 <startBlock>
    1c08:	50 91 28 02 	lds	r21, 0x0228	; 0x800228 <startBlock+0x1>
    1c0c:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <startBlock+0x2>
    1c10:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <startBlock+0x3>
    1c14:	1f 70       	andi	r17, 0x0F	; 15
data = receiveByte(); transmitByte(data);
    1c16:	81 2f       	mov	r24, r17
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	22 0f       	add	r18, r18
startBlock += (data & 0x0f) * 10;
    1c1e:	33 1f       	adc	r19, r19
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	82 0f       	add	r24, r18
    1c2e:	93 1f       	adc	r25, r19
    1c30:	09 2e       	mov	r0, r25
    1c32:	00 0c       	add	r0, r0
    1c34:	aa 0b       	sbc	r26, r26
    1c36:	bb 0b       	sbc	r27, r27
    1c38:	84 0f       	add	r24, r20
    1c3a:	95 1f       	adc	r25, r21
    1c3c:	a6 1f       	adc	r26, r22
    1c3e:	b7 1f       	adc	r27, r23
    1c40:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <startBlock>
    1c44:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <startBlock+0x1>
    1c48:	a0 93 29 02 	sts	0x0229, r26	; 0x800229 <startBlock+0x2>
    1c4c:	b0 93 2a 02 	sts	0x022A, r27	; 0x80022a <startBlock+0x3>
    1c50:	8f d2       	rcall	.+1310   	; 0x2170 <receiveByte>
    1c52:	18 2f       	mov	r17, r24
    1c54:	97 d2       	rcall	.+1326   	; 0x2184 <transmitByte>
    1c56:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <startBlock>
    1c5a:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <startBlock+0x1>
    1c5e:	a0 91 29 02 	lds	r26, 0x0229	; 0x800229 <startBlock+0x2>
    1c62:	b0 91 2a 02 	lds	r27, 0x022A	; 0x80022a <startBlock+0x3>
data = receiveByte(); transmitByte(data);
    1c66:	1f 70       	andi	r17, 0x0F	; 15
    1c68:	81 0f       	add	r24, r17
    1c6a:	91 1d       	adc	r25, r1
    1c6c:	a1 1d       	adc	r26, r1
startBlock += (data & 0x0f);
    1c6e:	b1 1d       	adc	r27, r1
    1c70:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <startBlock>
    1c74:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <startBlock+0x1>
    1c78:	a0 93 29 02 	sts	0x0229, r26	; 0x800229 <startBlock+0x2>
    1c7c:	b0 93 2a 02 	sts	0x022A, r27	; 0x80022a <startBlock+0x3>
    1c80:	8d e0       	ldi	r24, 0x0D	; 13
    1c82:	80 d2       	rcall	.+1280   	; 0x2184 <transmitByte>
    1c84:	8a e0       	ldi	r24, 0x0A	; 10
    1c86:	7e d2       	rcall	.+1276   	; 0x2184 <transmitByte>
    1c88:	80 92 2d 04 	sts	0x042D, r8	; 0x80042d <totalBlocks>
    1c8c:	90 92 2e 04 	sts	0x042E, r9	; 0x80042e <totalBlocks+0x1>
TX_NEWLINE;
    1c90:	a0 92 2f 04 	sts	0x042F, r10	; 0x80042f <totalBlocks+0x2>
    1c94:	b0 92 30 04 	sts	0x0430, r11	; 0x800430 <totalBlocks+0x3>
    1c98:	8e 2d       	mov	r24, r14
}

totalBlocks = 1;
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	f0 97       	sbiw	r30, 0x30	; 48
    1ca0:	ea 30       	cpi	r30, 0x0A	; 10
    1ca2:	f1 05       	cpc	r31, r1
    1ca4:	08 f0       	brcs	.+2      	; 0x1ca8 <main+0x2ae>
    1ca6:	11 c1       	rjmp	.+546    	; 0x1eca <main+0x4d0>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    1ca8:	88 27       	eor	r24, r24
    1caa:	ee 58       	subi	r30, 0x8E	; 142
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb0:	c2 c2       	rjmp	.+1412   	; 0x2236 <__tablejump2__>
    1cb2:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <totalBlocks>
    1cb6:	30 91 2e 04 	lds	r19, 0x042E	; 0x80042e <totalBlocks+0x1>
    1cba:	40 91 2f 04 	lds	r20, 0x042F	; 0x80042f <totalBlocks+0x2>
    1cbe:	50 91 30 04 	lds	r21, 0x0430	; 0x800430 <totalBlocks+0x3>
    1cc2:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <startBlock>
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    1cc6:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <startBlock+0x1>
    1cca:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <startBlock+0x2>
    1cce:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <startBlock+0x3>
    1cd2:	82 d1       	rcall	.+772    	; 0x1fd8 <SD_erase>
    1cd4:	18 2f       	mov	r17, r24
    1cd6:	8d e0       	ldi	r24, 0x0D	; 13
    1cd8:	55 d2       	rcall	.+1194   	; 0x2184 <transmitByte>
    1cda:	8a e0       	ldi	r24, 0x0A	; 10
    1cdc:	53 d2       	rcall	.+1190   	; 0x2184 <transmitByte>
    1cde:	11 23       	and	r17, r17
    1ce0:	21 f0       	breq	.+8      	; 0x1cea <main+0x2f0>
    1ce2:	8e ed       	ldi	r24, 0xDE	; 222
    1ce4:	92 e0       	ldi	r25, 0x02	; 2
          TX_NEWLINE;
    1ce6:	56 d2       	rcall	.+1196   	; 0x2194 <transmitString_F>
    1ce8:	ff c0       	rjmp	.+510    	; 0x1ee8 <main+0x4ee>
    1cea:	86 ed       	ldi	r24, 0xD6	; 214
    1cec:	92 e0       	ldi	r25, 0x02	; 2
          if(error)
    1cee:	52 d2       	rcall	.+1188   	; 0x2194 <transmitString_F>
    1cf0:	fb c0       	rjmp	.+502    	; 0x1ee8 <main+0x4ee>
              transmitString_F(PSTR("Erase failed.."));
    1cf2:	8d e0       	ldi	r24, 0x0D	; 13
    1cf4:	47 d2       	rcall	.+1166   	; 0x2184 <transmitByte>
    1cf6:	8a e0       	ldi	r24, 0x0A	; 10
    1cf8:	45 d2       	rcall	.+1162   	; 0x2184 <transmitByte>
          else
              transmitString_F(PSTR("Erased!"));
    1cfa:	8c eb       	ldi	r24, 0xBC	; 188
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	4a d2       	rcall	.+1172   	; 0x2194 <transmitString_F>
    1d00:	00 e0       	ldi	r16, 0x00	; 0
    1d02:	10 e0       	ldi	r17, 0x00	; 0
          break;

case '1': TX_NEWLINE;
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <main+0x30e>
    1d06:	87 01       	movw	r16, r14
    1d08:	33 d2       	rcall	.+1126   	; 0x2170 <receiveByte>
    1d0a:	38 2e       	mov	r3, r24
    1d0c:	3b d2       	rcall	.+1142   	; 0x2184 <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    1d0e:	78 01       	movw	r14, r16
    1d10:	2f ef       	ldi	r18, 0xFF	; 255
    1d12:	e2 1a       	sub	r14, r18
          i=0;
    1d14:	f2 0a       	sbc	r15, r18
    1d16:	f8 01       	movw	r30, r16
    1d18:	e5 5d       	subi	r30, 0xD5	; 213
                transmitByte(data);
                buffer[i++] = data;
                if(data == '\r')    //append 'newline' character whenevr 'carriage return' is received
                {
                    transmitByte('\n');
                    buffer[i++] = '\n';
    1d1a:	fd 4f       	sbci	r31, 0xFD	; 253
case '1': TX_NEWLINE;
          transmitString_F(PSTR(" Enter text (End with ~):"));
          i=0;
            do
            {
                data = receiveByte();
    1d1c:	30 82       	st	Z, r3
    1d1e:	8d e0       	ldi	r24, 0x0D	; 13
    1d20:	38 12       	cpse	r3, r24
                transmitByte(data);
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <main+0x348>
    1d24:	8a e0       	ldi	r24, 0x0A	; 10
                buffer[i++] = data;
    1d26:	2e d2       	rcall	.+1116   	; 0x2184 <transmitByte>
    1d28:	0e 5f       	subi	r16, 0xFE	; 254
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2c:	f7 01       	movw	r30, r14
    1d2e:	e5 5d       	subi	r30, 0xD5	; 213
    1d30:	fd 4f       	sbci	r31, 0xFD	; 253
    1d32:	8a e0       	ldi	r24, 0x0A	; 10
                if(data == '\r')    //append 'newline' character whenevr 'carriage return' is received
    1d34:	80 83       	st	Z, r24
    1d36:	01 15       	cp	r16, r1
    1d38:	92 e0       	ldi	r25, 0x02	; 2
                {
                    transmitByte('\n');
    1d3a:	19 07       	cpc	r17, r25
    1d3c:	49 f0       	breq	.+18     	; 0x1d50 <main+0x356>
    1d3e:	78 01       	movw	r14, r16
                    buffer[i++] = '\n';
    1d40:	e2 cf       	rjmp	.-60     	; 0x1d06 <main+0x30c>
    1d42:	e1 14       	cp	r14, r1
    1d44:	e2 e0       	ldi	r30, 0x02	; 2
    1d46:	fe 06       	cpc	r15, r30
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <main+0x356>
    1d4a:	fe e7       	ldi	r31, 0x7E	; 126
                }
                if(i == 512) break;
    1d4c:	3f 12       	cpse	r3, r31
    1d4e:	db cf       	rjmp	.-74     	; 0x1d06 <main+0x30c>
    1d50:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <startBlock>
    1d54:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <startBlock+0x1>
    1d58:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <startBlock+0x2>
            }while (data != '~');
    1d5c:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <startBlock+0x3>

            error = SD_writeSingleBlock (startBlock);
    1d60:	ac d1       	rcall	.+856    	; 0x20ba <SD_writeSingleBlock>
    1d62:	18 2f       	mov	r17, r24
    1d64:	8d e0       	ldi	r24, 0x0D	; 13
    1d66:	0e d2       	rcall	.+1052   	; 0x2184 <transmitByte>
    1d68:	8a e0       	ldi	r24, 0x0A	; 10
    1d6a:	0c d2       	rcall	.+1048   	; 0x2184 <transmitByte>
    1d6c:	8d e0       	ldi	r24, 0x0D	; 13
            TX_NEWLINE;
    1d6e:	0a d2       	rcall	.+1044   	; 0x2184 <transmitByte>
    1d70:	8a e0       	ldi	r24, 0x0A	; 10
    1d72:	08 d2       	rcall	.+1040   	; 0x2184 <transmitByte>
    1d74:	11 23       	and	r17, r17
            TX_NEWLINE;
    1d76:	21 f0       	breq	.+8      	; 0x1d80 <main+0x386>
    1d78:	8d ea       	ldi	r24, 0xAD	; 173
    1d7a:	92 e0       	ldi	r25, 0x02	; 2
    1d7c:	0b d2       	rcall	.+1046   	; 0x2194 <transmitString_F>
    1d7e:	b4 c0       	rjmp	.+360    	; 0x1ee8 <main+0x4ee>
            if(error)
    1d80:	8b e9       	ldi	r24, 0x9B	; 155
    1d82:	92 e0       	ldi	r25, 0x02	; 2
                transmitString_F(PSTR("Write failed.."));
    1d84:	07 d2       	rcall	.+1038   	; 0x2194 <transmitString_F>
    1d86:	b0 c0       	rjmp	.+352    	; 0x1ee8 <main+0x4ee>
    1d88:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <startBlock>
            else
                transmitString_F(PSTR("Write successful!"));
    1d8c:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <startBlock+0x1>
    1d90:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <startBlock+0x2>
    1d94:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <startBlock+0x3>
            break;

case '2': error = SD_readSingleBlock (startBlock);
    1d98:	5f d1       	rcall	.+702    	; 0x2058 <SD_readSingleBlock>
    1d9a:	18 2f       	mov	r17, r24
    1d9c:	8d e0       	ldi	r24, 0x0D	; 13
    1d9e:	f2 d1       	rcall	.+996    	; 0x2184 <transmitByte>
    1da0:	8a e0       	ldi	r24, 0x0A	; 10
    1da2:	f0 d1       	rcall	.+992    	; 0x2184 <transmitByte>
    1da4:	11 11       	cpse	r17, r1
          TX_NEWLINE;
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <main+0x3bc>
    1da8:	eb e2       	ldi	r30, 0x2B	; 43
    1daa:	f2 e0       	ldi	r31, 0x02	; 2
    1dac:	80 81       	ld	r24, Z
    1dae:	8e 37       	cpi	r24, 0x7E	; 126
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <main+0x3ba>
          if(error)
    1db2:	9f c0       	rjmp	.+318    	; 0x1ef2 <main+0x4f8>
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    1db4:	15 c0       	rjmp	.+42     	; 0x1de0 <main+0x3e6>
    1db6:	8d e8       	ldi	r24, 0x8D	; 141
    1db8:	92 e0       	ldi	r25, 0x02	; 2
    1dba:	ec d1       	rcall	.+984    	; 0x2194 <transmitString_F>
    1dbc:	95 c0       	rjmp	.+298    	; 0x1ee8 <main+0x4ee>
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	e5 5d       	subi	r30, 0xD5	; 213
            break;

case '2': error = SD_readSingleBlock (startBlock);
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
    1dc2:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8e 37       	cpi	r24, 0x7E	; 126
    1dc8:	59 f0       	breq	.+22     	; 0x1de0 <main+0x3e6>
    1dca:	f8 01       	movw	r30, r16
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    1dcc:	e5 5d       	subi	r30, 0xD5	; 213
    1dce:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd0:	80 81       	ld	r24, Z
    1dd2:	d8 d1       	rcall	.+944    	; 0x2184 <transmitByte>
    1dd4:	0f 5f       	subi	r16, 0xFF	; 255
                transmitByte(buffer[i]);
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	01 15       	cp	r16, r1
    1dda:	f2 e0       	ldi	r31, 0x02	; 2
    1ddc:	1f 07       	cpc	r17, r31
    1dde:	79 f7       	brne	.-34     	; 0x1dbe <main+0x3c4>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    1de0:	8d e0       	ldi	r24, 0x0D	; 13
    1de2:	d0 d1       	rcall	.+928    	; 0x2184 <transmitByte>
    1de4:	8a e0       	ldi	r24, 0x0A	; 10
    1de6:	ce d1       	rcall	.+924    	; 0x2184 <transmitByte>
    1de8:	8d e0       	ldi	r24, 0x0D	; 13
    1dea:	cc d1       	rcall	.+920    	; 0x2184 <transmitByte>
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    1dec:	8a e0       	ldi	r24, 0x0A	; 10
    1dee:	ca d1       	rcall	.+916    	; 0x2184 <transmitByte>
    1df0:	8c e7       	ldi	r24, 0x7C	; 124
    1df2:	92 e0       	ldi	r25, 0x02	; 2
    1df4:	cf d1       	rcall	.+926    	; 0x2194 <transmitString_F>
            TX_NEWLINE;
    1df6:	78 c0       	rjmp	.+240    	; 0x1ee8 <main+0x4ee>
    1df8:	8d e0       	ldi	r24, 0x0D	; 13
    1dfa:	c4 d1       	rcall	.+904    	; 0x2184 <transmitByte>
    1dfc:	8a e0       	ldi	r24, 0x0A	; 10
    1dfe:	c2 d1       	rcall	.+900    	; 0x2184 <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	6d d8       	rcall	.-3878   	; 0xee2 <findFiles>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    1e08:	6f c0       	rjmp	.+222    	; 0x1ee8 <main+0x4ee>
    1e0a:	8d e0       	ldi	r24, 0x0D	; 13
    1e0c:	bb d1       	rcall	.+886    	; 0x2184 <transmitByte>
    1e0e:	8a e0       	ldi	r24, 0x0A	; 10
    1e10:	b9 d1       	rcall	.+882    	; 0x2184 <transmitByte>
              findFiles(GET_LIST,0);
    1e12:	8d e0       	ldi	r24, 0x0D	; 13
    1e14:	b7 d1       	rcall	.+878    	; 0x2184 <transmitByte>
    1e16:	8a e0       	ldi	r24, 0x0A	; 10
          break;
    1e18:	b5 d1       	rcall	.+874    	; 0x2184 <transmitByte>

case '6':
case '7':
case '8': TX_NEWLINE;
    1e1a:	8a e6       	ldi	r24, 0x6A	; 106
    1e1c:	92 e0       	ldi	r25, 0x02	; 2
    1e1e:	ba d1       	rcall	.+884    	; 0x2194 <transmitString_F>
    1e20:	fe 01       	movw	r30, r28
              TX_NEWLINE;
    1e22:	31 96       	adiw	r30, 0x01	; 1
    1e24:	11 92       	st	Z+, r1
    1e26:	ec 15       	cp	r30, r12
    1e28:	fd 05       	cpc	r31, r13
          transmitString_F(PSTR("Enter file name: "));
    1e2a:	e1 f7       	brne	.-8      	; 0x1e24 <main+0x42a>
    1e2c:	21 2c       	mov	r2, r1
    1e2e:	31 2c       	mov	r3, r1
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <main+0x43a>
    1e32:	1c 01       	movw	r2, r24
          for(i=0; i<13; i++)
                  fileName[i] = 0x00;   //clearing any previously stored file name
    1e34:	9d d1       	rcall	.+826    	; 0x2170 <receiveByte>
case '6':
case '7':
case '8': TX_NEWLINE;
              TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    1e36:	18 2f       	mov	r17, r24
    1e38:	8d 30       	cpi	r24, 0x0D	; 13
    1e3a:	29 f1       	breq	.+74     	; 0x1e86 <main+0x48c>
    1e3c:	88 30       	cpi	r24, 0x08	; 8
    1e3e:	69 f4       	brne	.+26     	; 0x1e5a <main+0x460>
    1e40:	21 14       	cp	r2, r1
              }
              continue;    
            }
            if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
            transmitByte(data);
            fileName[i++] = data;
    1e42:	31 04       	cpc	r3, r1
          for(i=0; i<13; i++)
                  fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    1e44:	b9 f3       	breq	.-18     	; 0x1e34 <main+0x43a>
    1e46:	88 e0       	ldi	r24, 0x08	; 8
    1e48:	9d d1       	rcall	.+826    	; 0x2184 <transmitByte>
            if(data == '\r') break;  //'ENTER' key pressed
    1e4a:	80 e2       	ldi	r24, 0x20	; 32
    1e4c:	9b d1       	rcall	.+822    	; 0x2184 <transmitByte>
            if(data == 0x08)  //'Back Space' key pressed
    1e4e:	88 e0       	ldi	r24, 0x08	; 8
    1e50:	99 d1       	rcall	.+818    	; 0x2184 <transmitByte>
            {
              if(i != 0)
    1e52:	21 e0       	ldi	r18, 0x01	; 1
    1e54:	22 1a       	sub	r2, r18
    1e56:	31 08       	sbc	r3, r1
              {
                transmitByte(data);
    1e58:	ed cf       	rjmp	.-38     	; 0x1e34 <main+0x43a>
    1e5a:	80 ee       	ldi	r24, 0xE0	; 224
    1e5c:	81 0f       	add	r24, r17
                transmitByte(' ');
    1e5e:	8f 35       	cpi	r24, 0x5F	; 95
    1e60:	48 f7       	brcc	.-46     	; 0x1e34 <main+0x43a>
    1e62:	81 2f       	mov	r24, r17
                transmitByte(data);
    1e64:	8f d1       	rcall	.+798    	; 0x2184 <transmitByte>
    1e66:	c1 01       	movw	r24, r2
    1e68:	01 96       	adiw	r24, 0x01	; 1
                i--;
    1e6a:	e1 e0       	ldi	r30, 0x01	; 1
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	ec 0f       	add	r30, r28
    1e70:	fd 1f       	adc	r31, r29
              }
              continue;    
            }
            if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    1e72:	e2 0d       	add	r30, r2
    1e74:	f3 1d       	adc	r31, r3
    1e76:	10 83       	st	Z, r17
    1e78:	8d 30       	cpi	r24, 0x0D	; 13
            transmitByte(data);
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	d1 f6       	brne	.-76     	; 0x1e32 <main+0x438>
    1e7e:	84 e5       	ldi	r24, 0x54	; 84
            fileName[i++] = data;
    1e80:	92 e0       	ldi	r25, 0x02	; 2
    1e82:	88 d1       	rcall	.+784    	; 0x2194 <transmitString_F>
    1e84:	31 c0       	rjmp	.+98     	; 0x1ee8 <main+0x4ee>
    1e86:	8d e0       	ldi	r24, 0x0D	; 13
    1e88:	28 16       	cp	r2, r24
    1e8a:	31 04       	cpc	r3, r1
    1e8c:	68 f5       	brcc	.+90     	; 0x1ee8 <main+0x4ee>
    1e8e:	8d e0       	ldi	r24, 0x0D	; 13
    1e90:	79 d1       	rcall	.+754    	; 0x2184 <transmitByte>
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    1e92:	8a e0       	ldi	r24, 0x0A	; 10
    1e94:	77 d1       	rcall	.+750    	; 0x2184 <transmitByte>
    1e96:	96 e3       	ldi	r25, 0x36	; 54
    1e98:	e9 12       	cpse	r14, r25
    1e9a:	06 c0       	rjmp	.+12     	; 0x1ea8 <main+0x4ae>
    1e9c:	be 01       	movw	r22, r28
    1e9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
          }
          if(i>12) break;
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	cb d9       	rcall	.-3178   	; 0x123c <readFile>
    1ea6:	20 c0       	rjmp	.+64     	; 0x1ee8 <main+0x4ee>
    1ea8:	e7 e3       	ldi	r30, 0x37	; 55
      
          TX_NEWLINE;
    1eaa:	ee 12       	cpse	r14, r30
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <main+0x4bc>
    1eae:	ce 01       	movw	r24, r28
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	aa da       	rcall	.-2732   	; 0x1408 <createFile>
    1eb4:	19 c0       	rjmp	.+50     	; 0x1ee8 <main+0x4ee>
          if(option == '6')
    1eb6:	f8 e3       	ldi	r31, 0x38	; 56
    1eb8:	ef 12       	cpse	r14, r31
    1eba:	16 c0       	rjmp	.+44     	; 0x1ee8 <main+0x4ee>
            readFile( READ, fileName);
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	97 da       	rcall	.-2770   	; 0x13f0 <deleteFile>
    1ec2:	12 c0       	rjmp	.+36     	; 0x1ee8 <main+0x4ee>
    1ec4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <memoryStatistics>
    1ec8:	0f c0       	rjmp	.+30     	; 0x1ee8 <main+0x4ee>
          if(option == '7')
    1eca:	8d e0       	ldi	r24, 0x0D	; 13
    1ecc:	5b d1       	rcall	.+694    	; 0x2184 <transmitByte>
    1ece:	8a e0       	ldi	r24, 0x0A	; 10
            createFile(fileName);
    1ed0:	59 d1       	rcall	.+690    	; 0x2184 <transmitByte>
    1ed2:	8d e0       	ldi	r24, 0x0D	; 13
    1ed4:	57 d1       	rcall	.+686    	; 0x2184 <transmitByte>
    1ed6:	8a e0       	ldi	r24, 0x0A	; 10
    1ed8:	55 d1       	rcall	.+682    	; 0x2184 <transmitByte>
          if(option == '8')
    1eda:	83 e4       	ldi	r24, 0x43	; 67
    1edc:	92 e0       	ldi	r25, 0x02	; 2
    1ede:	5a d1       	rcall	.+692    	; 0x2194 <transmitString_F>
            deleteFile(fileName);
    1ee0:	8d e0       	ldi	r24, 0x0D	; 13
    1ee2:	50 d1       	rcall	.+672    	; 0x2184 <transmitByte>
    1ee4:	8a e0       	ldi	r24, 0x0A	; 10
    1ee6:	4e d1       	rcall	.+668    	; 0x2184 <transmitByte>
    1ee8:	8d e0       	ldi	r24, 0x0D	; 13
          break;

case '9': memoryStatistics();
    1eea:	4c d1       	rcall	.+664    	; 0x2184 <transmitByte>
    1eec:	8a e0       	ldi	r24, 0x0A	; 10
          break;
    1eee:	4a d1       	rcall	.+660    	; 0x2184 <transmitByte>

default: TX_NEWLINE;
    1ef0:	de cd       	rjmp	.-1092   	; 0x1aae <main+0xb4>
    1ef2:	eb e2       	ldi	r30, 0x2B	; 43
    1ef4:	f2 e0       	ldi	r31, 0x02	; 2
    1ef6:	80 81       	ld	r24, Z
    1ef8:	45 d1       	rcall	.+650    	; 0x2184 <transmitByte>
    1efa:	01 e0       	ldi	r16, 0x01	; 1
         TX_NEWLINE;
    1efc:	10 e0       	ldi	r17, 0x00	; 0
    1efe:	5f cf       	rjmp	.-322    	; 0x1dbe <main+0x3c4>

00001f00 <SD_sendCommand>:
//Arguments: unsigned char (8-bit command value)
// & unsigned long (32-bit command argument)
//return: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	c4 2f       	mov	r28, r20
    1f0a:	d5 2f       	mov	r29, r21
    1f0c:	16 2f       	mov	r17, r22
    1f0e:	07 2f       	mov	r16, r23
unsigned char response, retry=0;

SD_CS_ASSERT;
    1f10:	40 98       	cbi	0x08, 0	; 8

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    1f12:	80 64       	ori	r24, 0x40	; 64
    1f14:	20 d1       	rcall	.+576    	; 0x2156 <SPI_transmit>
SPI_transmit(arg>>24);
    1f16:	80 2f       	mov	r24, r16
    1f18:	1e d1       	rcall	.+572    	; 0x2156 <SPI_transmit>
SPI_transmit(arg>>16);
    1f1a:	81 2f       	mov	r24, r17
    1f1c:	1c d1       	rcall	.+568    	; 0x2156 <SPI_transmit>
SPI_transmit(arg>>8);
    1f1e:	8d 2f       	mov	r24, r29
    1f20:	1a d1       	rcall	.+564    	; 0x2156 <SPI_transmit>
SPI_transmit(arg);
    1f22:	8c 2f       	mov	r24, r28
    1f24:	18 d1       	rcall	.+560    	; 0x2156 <SPI_transmit>
    1f26:	85 e9       	ldi	r24, 0x95	; 149
SPI_transmit(0x95);
    1f28:	16 d1       	rcall	.+556    	; 0x2156 <SPI_transmit>
    1f2a:	c0 e0       	ldi	r28, 0x00	; 0

while((response = SPI_receive()) == 0xff) //wait response
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <SD_sendCommand+0x32>
    1f2e:	c1 50       	subi	r28, 0x01	; 1
   if(retry++ > 0xfe) break; //time out error
    1f30:	21 f0       	breq	.+8      	; 0x1f3a <SD_sendCommand+0x3a>
SPI_transmit(arg>>16);
SPI_transmit(arg>>8);
SPI_transmit(arg);
SPI_transmit(0x95);

while((response = SPI_receive()) == 0xff) //wait response
    1f32:	17 d1       	rcall	.+558    	; 0x2162 <SPI_receive>
    1f34:	d8 2f       	mov	r29, r24
    1f36:	8f 3f       	cpi	r24, 0xFF	; 255
    1f38:	d1 f3       	breq	.-12     	; 0x1f2e <SD_sendCommand+0x2e>
    1f3a:	13 d1       	rcall	.+550    	; 0x2162 <SPI_receive>
   if(retry++ > 0xfe) break; //time out error

SPI_receive(); //extra 8 CLK
    1f3c:	40 9a       	sbi	0x08, 0	; 8
    1f3e:	8d 2f       	mov	r24, r29
SD_CS_DEASSERT;
    1f40:	df 91       	pop	r29

return response; //return state
}
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	08 95       	ret

00001f4a <SD_init>:
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
//******************************************************************
unsigned char SD_init(void)
{
unsigned char i, response, retry=0 ;

SD_CS_ASSERT;
    1f4e:	40 98       	cbi	0x08, 0	; 8
    1f50:	df ef       	ldi	r29, 0xFF	; 255
    1f52:	ca e0       	ldi	r28, 0x0A	; 10
do
{
   for(i=0;i<10;i++)
      SPI_transmit(0xff);
    1f54:	8f ef       	ldi	r24, 0xFF	; 255
    1f56:	ff d0       	rcall	.+510    	; 0x2156 <SPI_transmit>
    1f58:	c1 50       	subi	r28, 0x01	; 1
unsigned char i, response, retry=0 ;

SD_CS_ASSERT;
do
{
   for(i=0;i<10;i++)
    1f5a:	e1 f7       	brne	.-8      	; 0x1f54 <SD_init+0xa>
      SPI_transmit(0xff);
   response = SD_sendCommand(GO_IDLE_STATE, 0);//send 'reset & go idle' command
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	ba 01       	movw	r22, r20
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	cd df       	rcall	.-102    	; 0x1f00 <SD_sendCommand>
    1f66:	d1 50       	subi	r29, 0x01	; 1
   retry++;
   if(retry>0xfe) {transmitString_F(PSTR("SD init fail..")); return 1; }//time out
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <SD_init+0x2a>
    1f6a:	85 e8       	ldi	r24, 0x85	; 133
    1f6c:	94 e0       	ldi	r25, 0x04	; 4
    1f6e:	12 d1       	rcall	.+548    	; 0x2194 <transmitString_F>
    1f70:	c1 e0       	ldi	r28, 0x01	; 1
    1f72:	2e c0       	rjmp	.+92     	; 0x1fd0 <SD_init+0x86>
} while(response != 0x01);
    1f74:	81 30       	cpi	r24, 0x01	; 1

SD_CS_DEASSERT;
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <SD_init+0x8>

SPI_transmit (0xff);
    1f78:	40 9a       	sbi	0x08, 0	; 8
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
SPI_transmit (0xff);
    1f7c:	ec d0       	rcall	.+472    	; 0x2156 <SPI_transmit>
    1f7e:	8f ef       	ldi	r24, 0xFF	; 255

retry = 0;

do
{
    response = SD_sendCommand(SEND_OP_COND, 0); //activate card's initialization process
    1f80:	ea d0       	rcall	.+468    	; 0x2156 <SPI_transmit>
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	ba 01       	movw	r22, r20
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    response = SD_sendCommand(SEND_OP_COND, 0); //resend command (for compatibility with some cards)
    1f8a:	ba df       	rcall	.-140    	; 0x1f00 <SD_sendCommand>
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	ba 01       	movw	r22, r20
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	b5 df       	rcall	.-150    	; 0x1f00 <SD_sendCommand>
    1f96:	de ef       	ldi	r29, 0xFE	; 254

retry = 0;

do
{
    response = SD_sendCommand(SEND_OP_COND, 0); //activate card's initialization process
    1f98:	0c c0       	rjmp	.+24     	; 0x1fb2 <SD_init+0x68>
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	ba 01       	movw	r22, r20
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    response = SD_sendCommand(SEND_OP_COND, 0); //resend command (for compatibility with some cards)
    1fa2:	ae df       	rcall	.-164    	; 0x1f00 <SD_sendCommand>
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	50 e0       	ldi	r21, 0x00	; 0
    1fa8:	ba 01       	movw	r22, r20
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	a9 df       	rcall	.-174    	; 0x1f00 <SD_sendCommand>
    retry++;
    if(retry>0xfe) return 1; //time out
    1fae:	d1 50       	subi	r29, 0x01	; 1
}while(response);
    1fb0:	71 f0       	breq	.+28     	; 0x1fce <SD_init+0x84>
    1fb2:	81 11       	cpse	r24, r1

SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
    1fb4:	f2 cf       	rjmp	.-28     	; 0x1f9a <SD_init+0x50>
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	ba 01       	movw	r22, r20
    1fbc:	8b e3       	ldi	r24, 0x3B	; 59
SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512
    1fbe:	a0 df       	rcall	.-192    	; 0x1f00 <SD_sendCommand>
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	52 e0       	ldi	r21, 0x02	; 2
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	80 e1       	ldi	r24, 0x10	; 16
    1fca:	9a df       	rcall	.-204    	; 0x1f00 <SD_sendCommand>

return 0; //normal return
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <SD_init+0x86>
do
{
    response = SD_sendCommand(SEND_OP_COND, 0); //activate card's initialization process
    response = SD_sendCommand(SEND_OP_COND, 0); //resend command (for compatibility with some cards)
    retry++;
    if(retry>0xfe) return 1; //time out
    1fce:	c1 e0       	ldi	r28, 0x01	; 1

SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512

return 0; //normal return
}
    1fd0:	8c 2f       	mov	r24, r28
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	08 95       	ret

00001fd8 <SD_erase>:
//Arguments: none
//return: unsigned char; will be 0 if no error,
// otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	6b 01       	movw	r12, r22
    1fea:	7c 01       	movw	r14, r24
    1fec:	49 01       	movw	r8, r18
    1fee:	5a 01       	movw	r10, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock<<9); //send starting block address
    1ff0:	ab 01       	movw	r20, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	03 2e       	mov	r0, r19
    1ff6:	39 e0       	ldi	r19, 0x09	; 9
    1ff8:	44 0f       	add	r20, r20
    1ffa:	55 1f       	adc	r21, r21
    1ffc:	66 1f       	adc	r22, r22
    1ffe:	77 1f       	adc	r23, r23
    2000:	3a 95       	dec	r19
    2002:	d1 f7       	brne	.-12     	; 0x1ff8 <SD_erase+0x20>
    2004:	30 2d       	mov	r19, r0
    2006:	80 e2       	ldi	r24, 0x20	; 32
    2008:	7b df       	rcall	.-266    	; 0x1f00 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    200a:	81 11       	cpse	r24, r1
    200c:	1c c0       	rjmp	.+56     	; 0x2046 <SD_erase+0x6e>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)<<9); //send end block address
    200e:	b5 01       	movw	r22, r10
    2010:	a4 01       	movw	r20, r8
    2012:	41 50       	subi	r20, 0x01	; 1
    2014:	51 09       	sbc	r21, r1
    2016:	61 09       	sbc	r22, r1
    2018:	71 09       	sbc	r23, r1
    201a:	4c 0d       	add	r20, r12
    201c:	5d 1d       	adc	r21, r13
    201e:	6e 1d       	adc	r22, r14
    2020:	7f 1d       	adc	r23, r15
    2022:	03 2e       	mov	r0, r19
    2024:	39 e0       	ldi	r19, 0x09	; 9
    2026:	44 0f       	add	r20, r20
    2028:	55 1f       	adc	r21, r21
    202a:	66 1f       	adc	r22, r22
    202c:	77 1f       	adc	r23, r23
    202e:	3a 95       	dec	r19
    2030:	d1 f7       	brne	.-12     	; 0x2026 <SD_erase+0x4e>
    2032:	30 2d       	mov	r19, r0
    2034:	81 e2       	ldi	r24, 0x21	; 33
    2036:	64 df       	rcall	.-312    	; 0x1f00 <SD_sendCommand>
if(response != 0x00)
    2038:	81 11       	cpse	r24, r1
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <SD_erase+0x6e>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	ba 01       	movw	r22, r20
    2042:	86 e2       	ldi	r24, 0x26	; 38
    2044:	5d df       	rcall	.-326    	; 0x1f00 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	df 90       	pop	r13
    204c:	cf 90       	pop	r12
    204e:	bf 90       	pop	r11
    2050:	af 90       	pop	r10
    2052:	9f 90       	pop	r9
    2054:	8f 90       	pop	r8
    2056:	08 95       	ret

00002058 <SD_readSingleBlock>:
//Arguments: none
//return: unsigned char; will be 0 if no error,
// otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
unsigned char response;
unsigned int i, retry=0;

response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock<<9); //read a Block command
    205c:	ab 01       	movw	r20, r22
    205e:	bc 01       	movw	r22, r24
    2060:	03 2e       	mov	r0, r19
    2062:	39 e0       	ldi	r19, 0x09	; 9
    2064:	44 0f       	add	r20, r20
    2066:	55 1f       	adc	r21, r21
    2068:	66 1f       	adc	r22, r22
    206a:	77 1f       	adc	r23, r23
    206c:	3a 95       	dec	r19
    206e:	d1 f7       	brne	.-12     	; 0x2064 <SD_readSingleBlock+0xc>
    2070:	30 2d       	mov	r19, r0
    2072:	81 e1       	ldi	r24, 0x11	; 17
    2074:	45 df       	rcall	.-374    	; 0x1f00 <SD_sendCommand>
//block address converted to starting address of 512 byte Block
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    2076:	81 11       	cpse	r24, r1
    2078:	1d c0       	rjmp	.+58     	; 0x20b4 <SD_readSingleBlock+0x5c>
  return response;

SD_CS_ASSERT;
    207a:	40 98       	cbi	0x08, 0	; 8

while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    207c:	c0 e0       	ldi	r28, 0x00	; 0
    207e:	d0 e0       	ldi	r29, 0x00	; 0
    2080:	05 c0       	rjmp	.+10     	; 0x208c <SD_readSingleBlock+0x34>
    2082:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    2084:	19 f4       	brne	.+6      	; 0x208c <SD_readSingleBlock+0x34>
    2086:	40 9a       	sbi	0x08, 0	; 8
    2088:	81 e0       	ldi	r24, 0x01	; 1
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
  return response;

SD_CS_ASSERT;

while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    208a:	14 c0       	rjmp	.+40     	; 0x20b4 <SD_readSingleBlock+0x5c>
    208c:	6a d0       	rcall	.+212    	; 0x2162 <SPI_receive>
    208e:	8e 3f       	cpi	r24, 0xFE	; 254
    2090:	c1 f7       	brne	.-16     	; 0x2082 <SD_readSingleBlock+0x2a>
    2092:	c0 e0       	ldi	r28, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    2094:	d0 e0       	ldi	r29, 0x00	; 0
    2096:	65 d0       	rcall	.+202    	; 0x2162 <SPI_receive>
    2098:	fe 01       	movw	r30, r28
    209a:	e5 5d       	subi	r30, 0xD5	; 213
    209c:	fd 4f       	sbci	r31, 0xFD	; 253
    209e:	80 83       	st	Z, r24
SD_CS_ASSERT;

while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    20a0:	21 96       	adiw	r28, 0x01	; 1
    20a2:	c1 15       	cp	r28, r1
    20a4:	82 e0       	ldi	r24, 0x02	; 2
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    20a6:	d8 07       	cpc	r29, r24
    20a8:	b1 f7       	brne	.-20     	; 0x2096 <SD_readSingleBlock+0x3e>
SPI_receive();
    20aa:	5b d0       	rcall	.+182    	; 0x2162 <SPI_receive>
    20ac:	5a d0       	rcall	.+180    	; 0x2162 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    20ae:	59 d0       	rcall	.+178    	; 0x2162 <SPI_receive>
    20b0:	40 9a       	sbi	0x08, 0	; 8
SD_CS_DEASSERT;
    20b2:	80 e0       	ldi	r24, 0x00	; 0

return 0;
    20b4:	df 91       	pop	r29
}
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <SD_writeSingleBlock>:
    20ba:	cf 93       	push	r28
//Arguments: none
//return: unsigned char; will be 0 if no error,
// otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    20bc:	df 93       	push	r29
unsigned char response;
unsigned int i, retry=0;

response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock<<9); //write a Block command
    20be:	ab 01       	movw	r20, r22
    20c0:	bc 01       	movw	r22, r24
    20c2:	03 2e       	mov	r0, r19
    20c4:	39 e0       	ldi	r19, 0x09	; 9
    20c6:	44 0f       	add	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	66 1f       	adc	r22, r22
    20cc:	77 1f       	adc	r23, r23
    20ce:	3a 95       	dec	r19
    20d0:	d1 f7       	brne	.-12     	; 0x20c6 <SD_writeSingleBlock+0xc>
    20d2:	30 2d       	mov	r19, r0
    20d4:	88 e1       	ldi	r24, 0x18	; 24
    20d6:	14 df       	rcall	.-472    	; 0x1f00 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    20d8:	81 11       	cpse	r24, r1
    20da:	36 c0       	rjmp	.+108    	; 0x2148 <SD_writeSingleBlock+0x8e>
return response;

SD_CS_ASSERT;
    20dc:	40 98       	cbi	0x08, 0	; 8

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    20de:	8e ef       	ldi	r24, 0xFE	; 254
    20e0:	3a d0       	rcall	.+116    	; 0x2156 <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    20e2:	c0 e0       	ldi	r28, 0x00	; 0
    20e4:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    20e6:	fe 01       	movw	r30, r28
    20e8:	e5 5d       	subi	r30, 0xD5	; 213
    20ea:	fd 4f       	sbci	r31, 0xFD	; 253
    20ec:	80 81       	ld	r24, Z
    20ee:	33 d0       	rcall	.+102    	; 0x2156 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    20f0:	21 96       	adiw	r28, 0x01	; 1
    20f2:	c1 15       	cp	r28, r1
    20f4:	22 e0       	ldi	r18, 0x02	; 2
    20f6:	d2 07       	cpc	r29, r18
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    20f8:	b1 f7       	brne	.-20     	; 0x20e6 <SD_writeSingleBlock+0x2c>
SPI_transmit(0xff);
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
    20fc:	2c d0       	rcall	.+88     	; 0x2156 <SPI_transmit>
    20fe:	8f ef       	ldi	r24, 0xFF	; 255

response = SPI_receive();
    2100:	2a d0       	rcall	.+84     	; 0x2156 <SPI_transmit>
    2102:	2f d0       	rcall	.+94     	; 0x2162 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2104:	98 2f       	mov	r25, r24
    2106:	9f 71       	andi	r25, 0x1F	; 31
    2108:	95 30       	cpi	r25, 0x05	; 5
    210a:	39 f0       	breq	.+14     	; 0x211a <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    210c:	40 9a       	sbi	0x08, 0	; 8
  return response;
    210e:	1c c0       	rjmp	.+56     	; 0x2148 <SD_writeSingleBlock+0x8e>
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2110:	21 96       	adiw	r28, 0x01	; 1
    2112:	29 f4       	brne	.+10     	; 0x211e <SD_writeSingleBlock+0x64>
    2114:	40 9a       	sbi	0x08, 0	; 8
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	17 c0       	rjmp	.+46     	; 0x2148 <SD_writeSingleBlock+0x8e>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    211a:	c0 e0       	ldi	r28, 0x00	; 0
    211c:	d0 e0       	ldi	r29, 0x00	; 0
    211e:	21 d0       	rcall	.+66     	; 0x2162 <SPI_receive>
    2120:	88 23       	and	r24, r24
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    2122:	b1 f3       	breq	.-20     	; 0x2110 <SD_writeSingleBlock+0x56>
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    2124:	40 9a       	sbi	0x08, 0	; 8
    2126:	8f ef       	ldi	r24, 0xFF	; 255
    2128:	16 d0       	rcall	.+44     	; 0x2156 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    212a:	40 98       	cbi	0x08, 0	; 8

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    212c:	08 c0       	rjmp	.+16     	; 0x213e <SD_writeSingleBlock+0x84>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    212e:	ce 01       	movw	r24, r28
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	21 96       	adiw	r28, 0x01	; 1
    2134:	19 f4       	brne	.+6      	; 0x213c <SD_writeSingleBlock+0x82>
    2136:	40 9a       	sbi	0x08, 0	; 8
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	06 c0       	rjmp	.+12     	; 0x2148 <SD_writeSingleBlock+0x8e>

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    213c:	ec 01       	movw	r28, r24
    213e:	11 d0       	rcall	.+34     	; 0x2162 <SPI_receive>
    2140:	88 23       	and	r24, r24
    2142:	a9 f3       	breq	.-22     	; 0x212e <SD_writeSingleBlock+0x74>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    2144:	40 9a       	sbi	0x08, 0	; 8

return 0;
    2146:	80 e0       	ldi	r24, 0x00	; 0
}
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	08 95       	ret

0000214e <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    214e:	82 e5       	ldi	r24, 0x52	; 82
    2150:	8c bd       	out	0x2c, r24	; 44
 SPSR = 0x00;
    2152:	1d bc       	out	0x2d, r1	; 45
    2154:	08 95       	ret

00002156 <SPI_transmit>:


unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    2156:	8e bd       	out	0x2e, r24	; 46

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    2158:	0d b4       	in	r0, 0x2d	; 45
    215a:	07 fe       	sbrs	r0, 7
    215c:	fd cf       	rjmp	.-6      	; 0x2158 <SPI_transmit+0x2>
  data = SPDR;
    215e:	8e b5       	in	r24, 0x2e	; 46

return(data);
}
    2160:	08 95       	ret

00002162 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    2162:	8f ef       	ldi	r24, 0xFF	; 255
    2164:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));
    2166:	0d b4       	in	r0, 0x2d	; 45
    2168:	07 fe       	sbrs	r0, 7
    216a:	fd cf       	rjmp	.-6      	; 0x2166 <SPI_receive+0x4>
  data = SPDR;
    216c:	8e b5       	in	r24, 0x2e	; 46

// Return data register
return data;
}
    216e:	08 95       	ret

00002170 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
unsigned char data, status;

while(!(UCSR0A & (1<<RXC0)));   // Wait for incomming data
    2170:	e0 ec       	ldi	r30, 0xC0	; 192
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	88 23       	and	r24, r24
    2178:	ec f7       	brge	.-6      	; 0x2174 <receiveByte+0x4>

status = UCSR0A;
    217a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
data = UDR0;
    217e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

return(data);
}
    2182:	08 95       	ret

00002184 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
while ( !(UCSR0A & (1<<UDRE0)) );  // Wait for empty transmit buffer
    2184:	e0 ec       	ldi	r30, 0xC0	; 192
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	90 81       	ld	r25, Z
    218a:	95 ff       	sbrs	r25, 5
    218c:	fd cf       	rjmp	.-6      	; 0x2188 <transmitByte+0x4>
UDR0 = data;                      //Start transmition
    218e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2192:	08 95       	ret

00002194 <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
    219a:	fc 01       	movw	r30, r24
    219c:	84 91       	lpm	r24, Z
    219e:	88 23       	and	r24, r24
    21a0:	41 f0       	breq	.+16     	; 0x21b2 <transmitString_F+0x1e>
    21a2:	fe 01       	movw	r30, r28
   transmitByte(pgm_read_byte(&(*string++)));
    21a4:	21 96       	adiw	r28, 0x01	; 1
    21a6:	84 91       	lpm	r24, Z
    21a8:	ed df       	rcall	.-38     	; 0x2184 <transmitByte>
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    21aa:	fe 01       	movw	r30, r28
    21ac:	84 91       	lpm	r24, Z
    21ae:	81 11       	cpse	r24, r1
    21b0:	f8 cf       	rjmp	.-16     	; 0x21a2 <transmitString_F+0xe>
   transmitByte(pgm_read_byte(&(*string++)));
}
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	08 95       	ret

000021b8 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	ec 01       	movw	r28, r24
  while (*string)
    21be:	88 81       	ld	r24, Y
    21c0:	88 23       	and	r24, r24
    21c2:	29 f0       	breq	.+10     	; 0x21ce <transmitString+0x16>
    21c4:	21 96       	adiw	r28, 0x01	; 1
   transmitByte(*string++);
    21c6:	de df       	rcall	.-68     	; 0x2184 <transmitByte>
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    21c8:	89 91       	ld	r24, Y+
    21ca:	81 11       	cpse	r24, r1
    21cc:	fc cf       	rjmp	.-8      	; 0x21c6 <transmitString+0xe>
   transmitByte(*string++);
}
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret

000021d4 <__mulsi3>:
    21d4:	db 01       	movw	r26, r22
    21d6:	8f 93       	push	r24
    21d8:	9f 93       	push	r25
    21da:	44 d0       	rcall	.+136    	; 0x2264 <__muluhisi3>
    21dc:	bf 91       	pop	r27
    21de:	af 91       	pop	r26
    21e0:	a2 9f       	mul	r26, r18
    21e2:	80 0d       	add	r24, r0
    21e4:	91 1d       	adc	r25, r1
    21e6:	a3 9f       	mul	r26, r19
    21e8:	90 0d       	add	r25, r0
    21ea:	b2 9f       	mul	r27, r18
    21ec:	90 0d       	add	r25, r0
    21ee:	11 24       	eor	r1, r1
    21f0:	08 95       	ret

000021f2 <__udivmodsi4>:
    21f2:	a1 e2       	ldi	r26, 0x21	; 33
    21f4:	1a 2e       	mov	r1, r26
    21f6:	aa 1b       	sub	r26, r26
    21f8:	bb 1b       	sub	r27, r27
    21fa:	fd 01       	movw	r30, r26
    21fc:	0d c0       	rjmp	.+26     	; 0x2218 <__udivmodsi4_ep>

000021fe <__udivmodsi4_loop>:
    21fe:	aa 1f       	adc	r26, r26
    2200:	bb 1f       	adc	r27, r27
    2202:	ee 1f       	adc	r30, r30
    2204:	ff 1f       	adc	r31, r31
    2206:	a2 17       	cp	r26, r18
    2208:	b3 07       	cpc	r27, r19
    220a:	e4 07       	cpc	r30, r20
    220c:	f5 07       	cpc	r31, r21
    220e:	20 f0       	brcs	.+8      	; 0x2218 <__udivmodsi4_ep>
    2210:	a2 1b       	sub	r26, r18
    2212:	b3 0b       	sbc	r27, r19
    2214:	e4 0b       	sbc	r30, r20
    2216:	f5 0b       	sbc	r31, r21

00002218 <__udivmodsi4_ep>:
    2218:	66 1f       	adc	r22, r22
    221a:	77 1f       	adc	r23, r23
    221c:	88 1f       	adc	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	1a 94       	dec	r1
    2222:	69 f7       	brne	.-38     	; 0x21fe <__udivmodsi4_loop>
    2224:	60 95       	com	r22
    2226:	70 95       	com	r23
    2228:	80 95       	com	r24
    222a:	90 95       	com	r25
    222c:	9b 01       	movw	r18, r22
    222e:	ac 01       	movw	r20, r24
    2230:	bd 01       	movw	r22, r26
    2232:	cf 01       	movw	r24, r30
    2234:	08 95       	ret

00002236 <__tablejump2__>:
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	88 1f       	adc	r24, r24
    223c:	8b bf       	out	0x3b, r24	; 59
    223e:	07 90       	elpm	r0, Z+
    2240:	f6 91       	elpm	r31, Z
    2242:	e0 2d       	mov	r30, r0
    2244:	19 94       	eijmp

00002246 <__umulhisi3>:
    2246:	a2 9f       	mul	r26, r18
    2248:	b0 01       	movw	r22, r0
    224a:	b3 9f       	mul	r27, r19
    224c:	c0 01       	movw	r24, r0
    224e:	a3 9f       	mul	r26, r19
    2250:	70 0d       	add	r23, r0
    2252:	81 1d       	adc	r24, r1
    2254:	11 24       	eor	r1, r1
    2256:	91 1d       	adc	r25, r1
    2258:	b2 9f       	mul	r27, r18
    225a:	70 0d       	add	r23, r0
    225c:	81 1d       	adc	r24, r1
    225e:	11 24       	eor	r1, r1
    2260:	91 1d       	adc	r25, r1
    2262:	08 95       	ret

00002264 <__muluhisi3>:
    2264:	f0 df       	rcall	.-32     	; 0x2246 <__umulhisi3>
    2266:	a5 9f       	mul	r26, r21
    2268:	90 0d       	add	r25, r0
    226a:	b4 9f       	mul	r27, r20
    226c:	90 0d       	add	r25, r0
    226e:	a4 9f       	mul	r26, r20
    2270:	80 0d       	add	r24, r0
    2272:	91 1d       	adc	r25, r1
    2274:	11 24       	eor	r1, r1
    2276:	08 95       	ret

00002278 <_exit>:
    2278:	f8 94       	cli

0000227a <__stop_program>:
    227a:	ff cf       	rjmp	.-2      	; 0x227a <__stop_program>
