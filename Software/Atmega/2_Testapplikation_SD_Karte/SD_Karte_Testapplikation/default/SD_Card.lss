
SD_Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000027aa  0000283e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000231  00800080  00800080  0000285e  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  0000285e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000521  00000000  00000000  000028fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c94  00000000  00000000  00002e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000666  00000000  00000000  00004ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000179c  00000000  00000000  00005119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  000068b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000086f  00000000  00000000  00006ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015a3  00000000  00000000  00007357  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000088fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      34:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      38:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

00000054 <__c.1865>:
      54:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

00000063 <__c.1858>:
      63:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000072 <__c.1755>:
      72:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      82:	20 63 6c 75 73 74 65 72 00                           cluster.

0000008b <__c.1753>:
      8b:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      9b:	68 61 69 6e 00                                      hain.

000000a0 <__c.1745>:
      a0:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 00         File Created!.

000000af <__c.1740>:
      af:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

000000bf <__c.1737>:
      bf:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      cf:	21 00                                               !.

000000d1 <__c.1728>:
      d1:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
      e1:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000000eb <__c.1726>:
      eb:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      fb:	21 00                                               !.

000000fd <__c.1724>:
      fd:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

0000010e <__c.1720>:
     10e:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     11e:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     12e:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00000138 <__c.1667>:
     138:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     148:	2e 2e 00                                            ...

0000014b <__c.1638>:
     14b:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     15b:	20 63 6c 75 73 74 65 72 00                           cluster.

00000164 <__c.1588>:
     164:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     174:	20 63 6c 75 73 74 65 72 00                           cluster.

0000017d <__c.1580>:
     17d:	52 4f 4f 54 00                                      ROOT.

00000182 <__c.1578>:
     182:	44 49 52 00                                         DIR.

00000186 <__c.1576>:
     186:	20 20 20 00                                            .

0000018a <__c.1574>:
     18a:	46 49 4c 45 00                                      FILE.

0000018f <__c.1572>:
     18f:	20 20 20 00                                            .

00000193 <__c.1566>:
     193:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000001a1 <__c.1564>:
     1a1:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000001ac <__c.1559>:
     1ac:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     1bc:	69 73 74 21 00                                      ist!.

000001c1 <__c.1615>:
     1c1:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

000001d2 <__c.1610>:
     1d2:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     1e2:	6f 6e 67 2e 2e 00                                   ong...

000001e8 <__c.1603>:
     1e8:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     1f8:	20 00                                                .

000001fa <__c.1597>:
     1fa:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

0000020b <__c.1592>:
     20b:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00000219 <__c.1589>:
     219:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     229:	21 00                                               !.

0000022b <__c.1587>:
     22b:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

0000023a <__c.1583>:
     23a:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     24a:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

00000254 <__c.1579>:
     254:	45 72 61 73 65 64 21 00                             Erased!.

0000025c <__c.1577>:
     25c:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

0000026b <__c.1574>:
     26b:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     27b:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     28b:	39 29 3a 00                                         9):.

0000028f <__c.1571>:
     28f:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     29f:	73 61 62 6c 65 64 21 00                             sabled!.

000002a7 <__c.1569>:
     2a7:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     2b7:	28 30 2d 39 29 3a 20 00                             (0-9): .

000002bf <__c.1567>:
     2bf:	3e 20 39 20 3a 20 52 65 61 64 20 53 44 20 4d 65     > 9 : Read SD Me
     2cf:	6d 6f 72 79 20 43 61 70 61 63 69 74 79 20 28 54     mory Capacity (T
     2df:	6f 74 61 6c 2f 46 72 65 65 29 00                    otal/Free).

000002ea <__c.1565>:
     2ea:	3e 20 38 20 3a 20 44 65 6c 65 74 65 20 46 69 6c     > 8 : Delete Fil
     2fa:	65 00                                               e.

000002fc <__c.1563>:
     2fc:	3e 20 37 20 3a 20 57 72 69 74 65 20 46 69 6c 65     > 7 : Write File
	...

0000030d <__c.1561>:
     30d:	3e 20 36 20 3a 20 52 65 61 64 20 46 69 6c 65 00     > 6 : Read File.

0000031d <__c.1559>:
     31d:	3e 20 35 20 3a 20 47 65 74 20 66 69 6c 65 20 6c     > 5 : Get file l
     32d:	69 73 74 00                                         ist.

00000331 <__c.1557>:
     331:	3e 20 32 20 3a 20 52 65 61 64 20 73 69 6e 67 6c     > 2 : Read singl
     341:	65 20 42 6c 6f 63 6b 00                             e Block.

00000349 <__c.1555>:
     349:	3e 20 31 20 3a 20 57 72 69 74 65 20 73 69 6e 67     > 1 : Write sing
     359:	6c 65 20 42 6c 6f 63 6b 00                          le Block.

00000362 <__c.1553>:
     362:	3e 20 30 20 3a 20 45 72 61 73 65 20 42 6c 6f 63     > 0 : Erase Bloc
     372:	6b 73 00                                            ks.

00000375 <__c.1551>:
     375:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

00000386 <__c.1549>:
     386:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

00000397 <__c.1547>:
     397:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     3a7:	44 65 74 65 63 74 65 64 21 00                       Detected!.

000003b1 <__c.1544>:
     3b1:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     3c1:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     3d1:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000003dc <__c.1541>:
     3dc:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     3ec:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

000003f9 <__c.1537>:
     3f9:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     409:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     419:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000424 <__c.1533>:
     424:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     434:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000441 <__c.1531>:
     441:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     451:	63 74 65 64 2e 2e 00                                cted...

00000458 <__c.1526>:
     458:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     468:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     478:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

00000486 <__c.1524>:
     486:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
     496:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
     4a6:	69 6e 67 2e 2e 20 20 00                             ing..  .

000004ae <__c.1522>:
     4ae:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4be:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4ce:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

000004dc <__ctors_end>:
     4dc:	11 24       	eor	r1, r1
     4de:	1f be       	out	0x3f, r1	; 63
     4e0:	cf e5       	ldi	r28, 0x5F	; 95
     4e2:	d8 e0       	ldi	r29, 0x08	; 8
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	cd bf       	out	0x3d, r28	; 61

000004e8 <__do_copy_data>:
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	a0 e6       	ldi	r26, 0x60	; 96
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	ea ea       	ldi	r30, 0xAA	; 170
     4f0:	f7 e2       	ldi	r31, 0x27	; 39
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <.do_copy_data_start>

000004f4 <.do_copy_data_loop>:
     4f4:	05 90       	lpm	r0, Z+
     4f6:	0d 92       	st	X+, r0

000004f8 <.do_copy_data_start>:
     4f8:	a0 38       	cpi	r26, 0x80	; 128
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <.do_copy_data_loop>

000004fe <__do_clear_bss>:
     4fe:	12 e0       	ldi	r17, 0x02	; 2
     500:	a0 e8       	ldi	r26, 0x80	; 128
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a1 3b       	cpi	r26, 0xB1	; 177
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <main>
     512:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <_exit>

00000516 <__bad_interrupt>:
     516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000051a <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     522:	20 91 9a 02 	lds	r18, 0x029A
     526:	30 91 9b 02 	lds	r19, 0x029B
     52a:	e0 90 84 00 	lds	r14, 0x0084
     52e:	f0 90 85 00 	lds	r15, 0x0085
     532:	00 91 86 00 	lds	r16, 0x0086
     536:	10 91 87 00 	lds	r17, 0x0087
     53a:	62 50       	subi	r22, 0x02	; 2
     53c:	70 40       	sbci	r23, 0x00	; 0
     53e:	80 40       	sbci	r24, 0x00	; 0
     540:	90 40       	sbci	r25, 0x00	; 0
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
     54a:	9b 01       	movw	r18, r22
     54c:	ac 01       	movw	r20, r24
     54e:	2e 0d       	add	r18, r14
     550:	3f 1d       	adc	r19, r15
     552:	40 1f       	adc	r20, r16
     554:	51 1f       	adc	r21, r17
}
     556:	b9 01       	movw	r22, r18
     558:	ca 01       	movw	r24, r20
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	08 95       	ret

00000564 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     564:	8f 92       	push	r8
     566:	9f 92       	push	r9
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	64 97       	sbiw	r28, 0x14	; 20
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	98 2e       	mov	r9, r24
     58c:	6a 01       	movw	r12, r20
     58e:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     590:	de 01       	movw	r26, r28
     592:	11 96       	adiw	r26, 0x01	; 1
     594:	e0 e6       	ldi	r30, 0x60	; 96
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	84 e1       	ldi	r24, 0x14	; 20
     59a:	01 90       	ld	r0, Z+
     59c:	0d 92       	st	X+, r0
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	e1 f7       	brne	.-8      	; 0x59a <displayMemory+0x36>
     5a2:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     5a4:	8c e2       	ldi	r24, 0x2C	; 44
     5a6:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     5a8:	05 30       	cpi	r16, 0x05	; 5
     5aa:	11 f0       	breq	.+4      	; 0x5b0 <displayMemory+0x4c>
     5ac:	09 30       	cpi	r16, 0x09	; 9
     5ae:	29 f4       	brne	.+10     	; 0x5ba <displayMemory+0x56>
	{
	   memoryString[i-1] = ',';  
     5b0:	fe 01       	movw	r30, r28
     5b2:	e0 0f       	add	r30, r16
     5b4:	f1 1d       	adc	r31, r1
     5b6:	80 82       	st	Z, r8
	   i--;
     5b8:	01 50       	subi	r16, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     5ba:	5e 01       	movw	r10, r28
     5bc:	a0 0e       	add	r10, r16
     5be:	b1 1c       	adc	r11, r1
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	2a e0       	ldi	r18, 0x0A	; 10
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
     5d0:	60 63       	ori	r22, 0x30	; 48
     5d2:	f5 01       	movw	r30, r10
     5d4:	60 83       	st	Z, r22
    memory /= 10;
     5d6:	c7 01       	movw	r24, r14
     5d8:	b6 01       	movw	r22, r12
     5da:	2a e0       	ldi	r18, 0x0A	; 10
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
     5e6:	c9 01       	movw	r24, r18
     5e8:	da 01       	movw	r26, r20
     5ea:	6c 01       	movw	r12, r24
     5ec:	7d 01       	movw	r14, r26
	if(memory == 0) break;
     5ee:	c1 14       	cp	r12, r1
     5f0:	d1 04       	cpc	r13, r1
     5f2:	e1 04       	cpc	r14, r1
     5f4:	f1 04       	cpc	r15, r1
     5f6:	11 f0       	breq	.+4      	; 0x5fc <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     5f8:	01 50       	subi	r16, 0x01	; 1
     5fa:	b1 f6       	brne	.-84     	; 0x5a8 <displayMemory+0x44>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	9f 16       	cp	r9, r31
     600:	11 f4       	brne	.+4      	; 0x606 <displayMemory+0xa2>
     602:	8b e4       	ldi	r24, 0x4B	; 75
     604:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	0e 94 88 13 	call	0x2710	; 0x2710 <transmitString>
}
     60e:	64 96       	adiw	r28, 0x14	; 20
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	cf 91       	pop	r28
     61c:	df 91       	pop	r29
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	df 90       	pop	r13
     626:	cf 90       	pop	r12
     628:	bf 90       	pop	r11
     62a:	af 90       	pop	r10
     62c:	9f 90       	pop	r9
     62e:	8f 90       	pop	r8
     630:	08 95       	ret

00000632 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	2b 97       	sbiw	r28, 0x0b	; 11
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	8c 01       	movw	r16, r24
     64c:	58 2f       	mov	r21, r24
     64e:	a1 2f       	mov	r26, r17
     650:	fc 01       	movw	r30, r24
     652:	40 e0       	ldi	r20, 0x00	; 0
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     654:	80 81       	ld	r24, Z
     656:	8e 32       	cpi	r24, 0x2E	; 46
     658:	19 f4       	brne	.+6      	; 0x660 <convertFileName+0x2e>

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     65a:	49 30       	cpi	r20, 0x09	; 9
     65c:	30 f0       	brcs	.+12     	; 0x66a <convertFileName+0x38>
     65e:	0e c0       	rjmp	.+28     	; 0x67c <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     660:	4f 5f       	subi	r20, 0xFF	; 255
     662:	31 96       	adiw	r30, 0x01	; 1
     664:	4c 30       	cpi	r20, 0x0C	; 12
     666:	b1 f7       	brne	.-20     	; 0x654 <convertFileName+0x22>
     668:	09 c0       	rjmp	.+18     	; 0x67c <convertFileName+0x4a>
     66a:	be 01       	movw	r22, r28
     66c:	6f 5f       	subi	r22, 0xFF	; 255
     66e:	7f 4f       	sbci	r23, 0xFF	; 255
     670:	85 2f       	mov	r24, r21
     672:	9a 2f       	mov	r25, r26
     674:	9c 01       	movw	r18, r24
     676:	f9 01       	movw	r30, r18
     678:	db 01       	movw	r26, r22
     67a:	08 c0       	rjmp	.+16     	; 0x68c <convertFileName+0x5a>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     67c:	88 e3       	ldi	r24, 0x38	; 56
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	52 c0       	rjmp	.+164    	; 0x72c <convertFileName+0xfa>

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
     688:	81 91       	ld	r24, Z+
     68a:	8d 93       	st	X+, r24
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     68c:	8e 2f       	mov	r24, r30
     68e:	85 1b       	sub	r24, r21
     690:	84 17       	cp	r24, r20
     692:	d0 f3       	brcs	.-12     	; 0x688 <convertFileName+0x56>
     694:	84 2f       	mov	r24, r20
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     696:	9e 01       	movw	r18, r28
     698:	2f 5f       	subi	r18, 0xFF	; 255
     69a:	3f 4f       	sbci	r19, 0xFF	; 255
     69c:	90 e2       	ldi	r25, 0x20	; 32
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <convertFileName+0x78>
     6a0:	f9 01       	movw	r30, r18
     6a2:	e8 0f       	add	r30, r24
     6a4:	f1 1d       	adc	r31, r1
     6a6:	90 83       	st	Z, r25
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     6a8:	8f 5f       	subi	r24, 0xFF	; 255
     6aa:	88 30       	cpi	r24, 0x08	; 8
     6ac:	c9 f7       	brne	.-14     	; 0x6a0 <convertFileName+0x6e>
  fileNameFAT[k] = ' ';

j++;
     6ae:	24 2f       	mov	r18, r20
     6b0:	2f 5f       	subi	r18, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     6b2:	ae 01       	movw	r20, r28
     6b4:	4f 5f       	subi	r20, 0xFF	; 255
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	30 e2       	ldi	r19, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     6ba:	f8 01       	movw	r30, r16
     6bc:	e2 0f       	add	r30, r18
     6be:	f1 1d       	adc	r31, r1
     6c0:	90 81       	ld	r25, Z
     6c2:	99 23       	and	r25, r25
     6c4:	59 f0       	breq	.+22     	; 0x6dc <convertFileName+0xaa>
    fileNameFAT[k] = fileName[j++];
     6c6:	fa 01       	movw	r30, r20
     6c8:	e8 0f       	add	r30, r24
     6ca:	f1 1d       	adc	r31, r1
     6cc:	90 83       	st	Z, r25
     6ce:	2f 5f       	subi	r18, 0xFF	; 255
     6d0:	07 c0       	rjmp	.+14     	; 0x6e0 <convertFileName+0xae>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     6d2:	fa 01       	movw	r30, r20
     6d4:	e8 0f       	add	r30, r24
     6d6:	f1 1d       	adc	r31, r1
     6d8:	30 83       	st	Z, r19
     6da:	8f 5f       	subi	r24, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     6dc:	8b 30       	cpi	r24, 0x0B	; 11
     6de:	c8 f3       	brcs	.-14     	; 0x6d2 <convertFileName+0xa0>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
     6e2:	8b 30       	cpi	r24, 0x0B	; 11
     6e4:	50 f3       	brcs	.-44     	; 0x6ba <convertFileName+0x88>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     6e6:	9e 01       	movw	r18, r28
     6e8:	24 5f       	subi	r18, 0xF4	; 244
     6ea:	3f 4f       	sbci	r19, 0xFF	; 255
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     6ec:	fb 01       	movw	r30, r22
     6ee:	90 81       	ld	r25, Z
     6f0:	89 2f       	mov	r24, r25
     6f2:	81 56       	subi	r24, 0x61	; 97
     6f4:	8a 31       	cpi	r24, 0x1A	; 26
     6f6:	10 f4       	brcc	.+4      	; 0x6fc <convertFileName+0xca>
    fileNameFAT[j] -= 0x20;
     6f8:	90 52       	subi	r25, 0x20	; 32
     6fa:	90 83       	st	Z, r25
     6fc:	6f 5f       	subi	r22, 0xFF	; 255
     6fe:	7f 4f       	sbci	r23, 0xFF	; 255
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     700:	62 17       	cp	r22, r18
     702:	73 07       	cpc	r23, r19
     704:	99 f7       	brne	.-26     	; 0x6ec <convertFileName+0xba>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     70a:	ae 01       	movw	r20, r28
     70c:	4f 5f       	subi	r20, 0xFF	; 255
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	f8 01       	movw	r30, r16
     712:	e2 0f       	add	r30, r18
     714:	f3 1f       	adc	r31, r19
     716:	da 01       	movw	r26, r20
     718:	a2 0f       	add	r26, r18
     71a:	b3 1f       	adc	r27, r19
     71c:	8c 91       	ld	r24, X
     71e:	80 83       	st	Z, r24
     720:	2f 5f       	subi	r18, 0xFF	; 255
     722:	3f 4f       	sbci	r19, 0xFF	; 255

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     724:	2b 30       	cpi	r18, 0x0B	; 11
     726:	31 05       	cpc	r19, r1
     728:	99 f7       	brne	.-26     	; 0x710 <convertFileName+0xde>
     72a:	80 e0       	ldi	r24, 0x00	; 0
  fileName[j] = fileNameFAT[j];

return 0;
}
     72c:	2b 96       	adiw	r28, 0x0b	; 11
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	cf 91       	pop	r28
     73a:	df 91       	pop	r29
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     742:	6f 92       	push	r6
     744:	7f 92       	push	r7
     746:	8f 92       	push	r8
     748:	9f 92       	push	r9
     74a:	af 92       	push	r10
     74c:	bf 92       	push	r11
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     75a:	60 78       	andi	r22, 0x80	; 128
     75c:	3b 01       	movw	r6, r22
     75e:	4c 01       	movw	r8, r24
     760:	22 e0       	ldi	r18, 0x02	; 2
     762:	66 0c       	add	r6, r6
     764:	77 1c       	adc	r7, r7
     766:	88 1c       	adc	r8, r8
     768:	99 1c       	adc	r9, r9
     76a:	2a 95       	dec	r18
     76c:	d1 f7       	brne	.-12     	; 0x762 <searchNextFreeCluster+0x20>
     76e:	5b 01       	movw	r10, r22
     770:	6c 01       	movw	r12, r24
     772:	50 c0       	rjmp	.+160    	; 0x814 <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     774:	e0 90 a5 02 	lds	r14, 0x02A5
     778:	f0 90 a6 02 	lds	r15, 0x02A6
     77c:	20 91 8c 00 	lds	r18, 0x008C
     780:	30 91 8d 00 	lds	r19, 0x008D
      SD_readSingleBlock(sector);
     784:	00 e0       	ldi	r16, 0x00	; 0
     786:	10 e0       	ldi	r17, 0x00	; 0
     788:	80 91 9c 02 	lds	r24, 0x029C
     78c:	90 91 9d 02 	lds	r25, 0x029D
     790:	a0 91 9e 02 	lds	r26, 0x029E
     794:	b0 91 9f 02 	lds	r27, 0x029F
     798:	e8 0e       	add	r14, r24
     79a:	f9 1e       	adc	r15, r25
     79c:	0a 1f       	adc	r16, r26
     79e:	1b 1f       	adc	r17, r27
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	c4 01       	movw	r24, r8
     7a6:	b3 01       	movw	r22, r6
     7a8:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
     7ac:	e2 0e       	add	r14, r18
     7ae:	f3 1e       	adc	r15, r19
     7b0:	04 1f       	adc	r16, r20
     7b2:	15 1f       	adc	r17, r21
     7b4:	c8 01       	movw	r24, r16
     7b6:	b7 01       	movw	r22, r14
     7b8:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
     7bc:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     7be:	e6 2f       	mov	r30, r22
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	e6 56       	subi	r30, 0x66	; 102
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	80 81       	ld	r24, Z
     7d0:	91 81       	ldd	r25, Z+1	; 0x01
     7d2:	a2 81       	ldd	r26, Z+2	; 0x02
     7d4:	b3 81       	ldd	r27, Z+3	; 0x03
     7d6:	bf 70       	andi	r27, 0x0F	; 15
     7d8:	00 97       	sbiw	r24, 0x00	; 0
     7da:	a1 05       	cpc	r26, r1
     7dc:	b1 05       	cpc	r27, r1
     7de:	39 f4       	brne	.+14     	; 0x7ee <searchNextFreeCluster+0xac>
            return(cluster+i);
     7e0:	a6 01       	movw	r20, r12
     7e2:	95 01       	movw	r18, r10
     7e4:	26 0f       	add	r18, r22
     7e6:	31 1d       	adc	r19, r1
     7e8:	41 1d       	adc	r20, r1
     7ea:	51 1d       	adc	r21, r1
     7ec:	25 c0       	rjmp	.+74     	; 0x838 <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     7ee:	6f 5f       	subi	r22, 0xFF	; 255
     7f0:	60 38       	cpi	r22, 0x80	; 128
     7f2:	29 f7       	brne	.-54     	; 0x7be <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     7f4:	80 e8       	ldi	r24, 0x80	; 128
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a0 e0       	ldi	r26, 0x00	; 0
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	a8 0e       	add	r10, r24
     7fe:	b9 1e       	adc	r11, r25
     800:	ca 1e       	adc	r12, r26
     802:	db 1e       	adc	r13, r27
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	68 0e       	add	r6, r24
     80e:	79 1e       	adc	r7, r25
     810:	8a 1e       	adc	r8, r26
     812:	9b 1e       	adc	r9, r27
     814:	80 91 8e 00 	lds	r24, 0x008E
     818:	90 91 8f 00 	lds	r25, 0x008F
     81c:	a0 91 90 00 	lds	r26, 0x0090
     820:	b0 91 91 00 	lds	r27, 0x0091
     824:	a8 16       	cp	r10, r24
     826:	b9 06       	cpc	r11, r25
     828:	ca 06       	cpc	r12, r26
     82a:	db 06       	cpc	r13, r27
     82c:	08 f4       	brcc	.+2      	; 0x830 <searchNextFreeCluster+0xee>
     82e:	a2 cf       	rjmp	.-188    	; 0x774 <searchNextFreeCluster+0x32>
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
     838:	b9 01       	movw	r22, r18
     83a:	ca 01       	movw	r24, r20
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	bf 90       	pop	r11
     84a:	af 90       	pop	r10
     84c:	9f 90       	pop	r9
     84e:	8f 90       	pop	r8
     850:	7f 90       	pop	r7
     852:	6f 90       	pop	r6
     854:	08 95       	ret

00000856 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     856:	cf 92       	push	r12
     858:	df 92       	push	r13
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	d8 2e       	mov	r13, r24
     864:	c6 2e       	mov	r12, r22
     866:	79 01       	movw	r14, r18
     868:	8a 01       	movw	r16, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     86a:	60 91 9c 02 	lds	r22, 0x029C
     86e:	70 91 9d 02 	lds	r23, 0x029D
     872:	80 91 9e 02 	lds	r24, 0x029E
     876:	90 91 9f 02 	lds	r25, 0x029F
     87a:	6f 5f       	subi	r22, 0xFF	; 255
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	8f 4f       	sbci	r24, 0xFF	; 255
     880:	9f 4f       	sbci	r25, 0xFF	; 255
     882:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     886:	80 91 9a 00 	lds	r24, 0x009A
     88a:	90 91 9b 00 	lds	r25, 0x009B
     88e:	a0 91 9c 00 	lds	r26, 0x009C
     892:	b0 91 9d 00 	lds	r27, 0x009D
     896:	82 55       	subi	r24, 0x52	; 82
     898:	92 45       	sbci	r25, 0x52	; 82
     89a:	a1 46       	sbci	r26, 0x61	; 97
     89c:	b1 44       	sbci	r27, 0x41	; 65
     89e:	09 f0       	breq	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	54 c0       	rjmp	.+168    	; 0x94a <__stack+0xeb>
     8a2:	80 91 7e 02 	lds	r24, 0x027E
     8a6:	90 91 7f 02 	lds	r25, 0x027F
     8aa:	a0 91 80 02 	lds	r26, 0x0280
     8ae:	b0 91 81 02 	lds	r27, 0x0281
     8b2:	82 57       	subi	r24, 0x72	; 114
     8b4:	92 47       	sbci	r25, 0x72	; 114
     8b6:	a1 44       	sbci	r26, 0x41	; 65
     8b8:	b1 46       	sbci	r27, 0x61	; 97
     8ba:	09 f0       	breq	.+2      	; 0x8be <__stack+0x5f>
     8bc:	46 c0       	rjmp	.+140    	; 0x94a <__stack+0xeb>
     8be:	80 91 96 02 	lds	r24, 0x0296
     8c2:	90 91 97 02 	lds	r25, 0x0297
     8c6:	a0 91 98 02 	lds	r26, 0x0298
     8ca:	b0 91 99 02 	lds	r27, 0x0299
     8ce:	80 50       	subi	r24, 0x00	; 0
     8d0:	90 40       	sbci	r25, 0x00	; 0
     8d2:	a5 45       	sbci	r26, 0x55	; 85
     8d4:	ba 4a       	sbci	r27, 0xAA	; 170
     8d6:	c9 f5       	brne	.+114    	; 0x94a <__stack+0xeb>
  return 0xffffffff;

 if(get_set == GET)
     8d8:	cc 20       	and	r12, r12
     8da:	a9 f4       	brne	.+42     	; 0x906 <__stack+0xa7>
 {
   if(totOrNext == TOTAL_FREE)
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	d8 16       	cp	r13, r24
     8e0:	49 f4       	brne	.+18     	; 0x8f4 <__stack+0x95>
      return(FS->freeClusterCount);
     8e2:	20 91 82 02 	lds	r18, 0x0282
     8e6:	30 91 83 02 	lds	r19, 0x0283
     8ea:	40 91 84 02 	lds	r20, 0x0284
     8ee:	50 91 85 02 	lds	r21, 0x0285
     8f2:	2f c0       	rjmp	.+94     	; 0x952 <__stack+0xf3>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     8f4:	20 91 86 02 	lds	r18, 0x0286
     8f8:	30 91 87 02 	lds	r19, 0x0287
     8fc:	40 91 88 02 	lds	r20, 0x0288
     900:	50 91 89 02 	lds	r21, 0x0289
     904:	26 c0       	rjmp	.+76     	; 0x952 <__stack+0xf3>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     906:	21 e0       	ldi	r18, 0x01	; 1
     908:	d2 16       	cp	r13, r18
     90a:	49 f4       	brne	.+18     	; 0x91e <__stack+0xbf>
      FS->freeClusterCount = FSEntry;
     90c:	e0 92 82 02 	sts	0x0282, r14
     910:	f0 92 83 02 	sts	0x0283, r15
     914:	00 93 84 02 	sts	0x0284, r16
     918:	10 93 85 02 	sts	0x0285, r17
     91c:	08 c0       	rjmp	.+16     	; 0x92e <__stack+0xcf>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     91e:	e0 92 86 02 	sts	0x0286, r14
     922:	f0 92 87 02 	sts	0x0287, r15
     926:	00 93 88 02 	sts	0x0288, r16
     92a:	10 93 89 02 	sts	0x0289, r17
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     92e:	60 91 9c 02 	lds	r22, 0x029C
     932:	70 91 9d 02 	lds	r23, 0x029D
     936:	80 91 9e 02 	lds	r24, 0x029E
     93a:	90 91 9f 02 	lds	r25, 0x029F
     93e:	6f 5f       	subi	r22, 0xFF	; 255
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	8f 4f       	sbci	r24, 0xFF	; 255
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	0e 94 0d 12 	call	0x241a	; 0x241a <SD_writeSingleBlock>
 }
 return 0xffffffff;
     94a:	2f ef       	ldi	r18, 0xFF	; 255
     94c:	3f ef       	ldi	r19, 0xFF	; 255
     94e:	4f ef       	ldi	r20, 0xFF	; 255
     950:	5f ef       	ldi	r21, 0xFF	; 255
}
     952:	b9 01       	movw	r22, r18
     954:	ca 01       	movw	r24, r20
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	08 95       	ret

00000964 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     964:	df 92       	push	r13
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	d8 2e       	mov	r13, r24
     970:	db 01       	movw	r26, r22
     972:	ca 01       	movw	r24, r20
     974:	e9 e0       	ldi	r30, 0x09	; 9
     976:	b6 95       	lsr	r27
     978:	a7 95       	ror	r26
     97a:	97 95       	ror	r25
     97c:	87 95       	ror	r24
     97e:	ea 95       	dec	r30
     980:	d1 f7       	brne	.-12     	; 0x976 <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     982:	51 70       	andi	r21, 0x01	; 1
     984:	60 70       	andi	r22, 0x00	; 0
     986:	70 70       	andi	r23, 0x00	; 0
     988:	41 15       	cp	r20, r1
     98a:	51 05       	cpc	r21, r1
     98c:	61 05       	cpc	r22, r1
     98e:	71 05       	cpc	r23, r1
     990:	19 f4       	brne	.+6      	; 0x998 <freeMemoryUpdate+0x34>
     992:	ac 01       	movw	r20, r24
     994:	bd 01       	movw	r22, r26
     996:	06 c0       	rjmp	.+12     	; 0x9a4 <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
     998:	ac 01       	movw	r20, r24
     99a:	bd 01       	movw	r22, r26
     99c:	4f 5f       	subi	r20, 0xFF	; 255
     99e:	5f 4f       	sbci	r21, 0xFF	; 255
     9a0:	6f 4f       	sbci	r22, 0xFF	; 255
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	db 01       	movw	r26, r22
     9a6:	ca 01       	movw	r24, r20
     9a8:	33 e0       	ldi	r19, 0x03	; 3
     9aa:	b6 95       	lsr	r27
     9ac:	a7 95       	ror	r26
     9ae:	97 95       	ror	r25
     9b0:	87 95       	ror	r24
     9b2:	3a 95       	dec	r19
     9b4:	d1 f7       	brne	.-12     	; 0x9aa <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
     9b6:	47 70       	andi	r20, 0x07	; 7
     9b8:	50 70       	andi	r21, 0x00	; 0
     9ba:	60 70       	andi	r22, 0x00	; 0
     9bc:	70 70       	andi	r23, 0x00	; 0
     9be:	41 15       	cp	r20, r1
     9c0:	51 05       	cpc	r21, r1
     9c2:	61 05       	cpc	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	19 f4       	brne	.+6      	; 0x9ce <freeMemoryUpdate+0x6a>
     9c8:	7c 01       	movw	r14, r24
     9ca:	8d 01       	movw	r16, r26
     9cc:	07 c0       	rjmp	.+14     	; 0x9dc <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
     9ce:	7c 01       	movw	r14, r24
     9d0:	8d 01       	movw	r16, r26
     9d2:	08 94       	sec
     9d4:	e1 1c       	adc	r14, r1
     9d6:	f1 1c       	adc	r15, r1
     9d8:	01 1d       	adc	r16, r1
     9da:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
     9dc:	80 91 ac 02 	lds	r24, 0x02AC
     9e0:	88 23       	and	r24, r24
     9e2:	d9 f0       	breq	.+54     	; 0xa1a <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	0e 94 2b 04 	call	0x856	; 0x856 <getSetFreeCluster>
	if(flag == ADD)
     9f4:	dd 20       	and	r13, r13
     9f6:	39 f4       	brne	.+14     	; 0xa06 <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
     9f8:	9b 01       	movw	r18, r22
     9fa:	ac 01       	movw	r20, r24
     9fc:	2e 0d       	add	r18, r14
     9fe:	3f 1d       	adc	r19, r15
     a00:	40 1f       	adc	r20, r16
     a02:	51 1f       	adc	r21, r17
     a04:	06 c0       	rjmp	.+12     	; 0xa12 <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	2e 19       	sub	r18, r14
     a0c:	3f 09       	sbc	r19, r15
     a0e:	40 0b       	sbc	r20, r16
     a10:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	0e 94 2b 04 	call	0x856	; 0x856 <getSetFreeCluster>
  }
}
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	08 95       	ret

00000a26 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     a26:	2f 92       	push	r2
     a28:	3f 92       	push	r3
     a2a:	4f 92       	push	r4
     a2c:	5f 92       	push	r5
     a2e:	6f 92       	push	r6
     a30:	7f 92       	push	r7
     a32:	8f 92       	push	r8
     a34:	9f 92       	push	r9
     a36:	af 92       	push	r10
     a38:	bf 92       	push	r11
     a3a:	cf 92       	push	r12
     a3c:	df 92       	push	r13
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
     a46:	20 91 8e 00 	lds	r18, 0x008E
     a4a:	30 91 8f 00 	lds	r19, 0x008F
     a4e:	40 91 90 00 	lds	r20, 0x0090
     a52:	50 91 91 00 	lds	r21, 0x0091
     a56:	60 91 9a 02 	lds	r22, 0x029A
     a5a:	70 91 9b 02 	lds	r23, 0x029B
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
     a66:	5b 01       	movw	r10, r22
     a68:	6c 01       	movw	r12, r24
     a6a:	1a e0       	ldi	r17, 0x0A	; 10
     a6c:	d6 94       	lsr	r13
     a6e:	c7 94       	ror	r12
     a70:	b7 94       	ror	r11
     a72:	a7 94       	ror	r10
     a74:	1a 95       	dec	r17
     a76:	d1 f7       	brne	.-12     	; 0xa6c <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
     a78:	e0 90 8c 00 	lds	r14, 0x008C
     a7c:	f0 90 8d 00 	lds	r15, 0x008D

TX_NEWLINE;
     a80:	8d e0       	ldi	r24, 0x0D	; 13
     a82:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
     a86:	8a e0       	ldi	r24, 0x0A	; 10
     a88:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
TX_NEWLINE;
     a8c:	8d e0       	ldi	r24, 0x0D	; 13
     a8e:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
     a92:	8a e0       	ldi	r24, 0x0A	; 10
     a94:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("Total Memory: "));
     a98:	83 e6       	ldi	r24, 0x63	; 99
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>

displayMemory (HIGH, totalMemory);
     aa0:	00 e0       	ldi	r16, 0x00	; 0
     aa2:	10 e0       	ldi	r17, 0x00	; 0
     aa4:	c6 01       	movw	r24, r12
     aa6:	b5 01       	movw	r22, r10
     aa8:	a8 01       	movw	r20, r16
     aaa:	97 01       	movw	r18, r14
     aac:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
     ab0:	ab 01       	movw	r20, r22
     ab2:	bc 01       	movw	r22, r24
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	0e 94 b2 02 	call	0x564	; 0x564 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	0e 94 2b 04 	call	0x856	; 0x856 <getSetFreeCluster>
     aca:	3b 01       	movw	r6, r22
     acc:	4c 01       	movw	r8, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     ace:	80 91 8e 00 	lds	r24, 0x008E
     ad2:	90 91 8f 00 	lds	r25, 0x008F
     ad6:	a0 91 90 00 	lds	r26, 0x0090
     ada:	b0 91 91 00 	lds	r27, 0x0091
     ade:	86 15       	cp	r24, r6
     ae0:	97 05       	cpc	r25, r7
     ae2:	a8 05       	cpc	r26, r8
     ae4:	b9 05       	cpc	r27, r9
     ae6:	08 f0       	brcs	.+2      	; 0xaea <memoryStatistics+0xc4>
     ae8:	7c c0       	rjmp	.+248    	; 0xbe2 <memoryStatistics+0x1bc>
{
   freeClusterCountUpdated = 0;
     aea:	10 92 ac 02 	sts	0x02AC, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     aee:	a0 90 92 00 	lds	r10, 0x0092
     af2:	b0 90 93 00 	lds	r11, 0x0093
     af6:	c0 90 94 00 	lds	r12, 0x0094
     afa:	d0 90 95 00 	lds	r13, 0x0095
     afe:	b2 e0       	ldi	r27, 0x02	; 2
     b00:	aa 0c       	add	r10, r10
     b02:	bb 1c       	adc	r11, r11
     b04:	cc 1c       	adc	r12, r12
     b06:	dd 1c       	adc	r13, r13
     b08:	ba 95       	dec	r27
     b0a:	d1 f7       	brne	.-12     	; 0xb00 <memoryStatistics+0xda>
     b0c:	66 24       	eor	r6, r6
     b0e:	77 24       	eor	r7, r7
     b10:	43 01       	movw	r8, r6
     b12:	22 24       	eor	r2, r2
     b14:	33 24       	eor	r3, r3
     b16:	21 01       	movw	r4, r2
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     b18:	e0 90 a5 02 	lds	r14, 0x02A5
     b1c:	f0 90 a6 02 	lds	r15, 0x02A6
     b20:	20 91 8c 00 	lds	r18, 0x008C
     b24:	30 91 8d 00 	lds	r19, 0x008D
      SD_readSingleBlock(sector);
     b28:	00 e0       	ldi	r16, 0x00	; 0
     b2a:	10 e0       	ldi	r17, 0x00	; 0
     b2c:	80 91 9c 02 	lds	r24, 0x029C
     b30:	90 91 9d 02 	lds	r25, 0x029D
     b34:	a0 91 9e 02 	lds	r26, 0x029E
     b38:	b0 91 9f 02 	lds	r27, 0x029F
     b3c:	e8 0e       	add	r14, r24
     b3e:	f9 1e       	adc	r15, r25
     b40:	0a 1f       	adc	r16, r26
     b42:	1b 1f       	adc	r17, r27
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	c6 01       	movw	r24, r12
     b4a:	b5 01       	movw	r22, r10
     b4c:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
     b50:	e2 0e       	add	r14, r18
     b52:	f3 1e       	adc	r15, r19
     b54:	04 1f       	adc	r16, r20
     b56:	15 1f       	adc	r17, r21
     b58:	c8 01       	movw	r24, r16
     b5a:	b7 01       	movw	r22, r14
     b5c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
     b60:	a2 01       	movw	r20, r4
     b62:	91 01       	movw	r18, r2
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     b68:	fb 01       	movw	r30, r22
     b6a:	e6 56       	subi	r30, 0x66	; 102
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	a2 81       	ldd	r26, Z+2	; 0x02
     b74:	b3 81       	ldd	r27, Z+3	; 0x03
     b76:	bf 70       	andi	r27, 0x0F	; 15
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	a1 05       	cpc	r26, r1
     b7c:	b1 05       	cpc	r27, r1
     b7e:	29 f4       	brne	.+10     	; 0xb8a <memoryStatistics+0x164>
            freeClusters++;;
     b80:	08 94       	sec
     b82:	61 1c       	adc	r6, r1
     b84:	71 1c       	adc	r7, r1
     b86:	81 1c       	adc	r8, r1
     b88:	91 1c       	adc	r9, r1
        
         totalClusterCount++;
     b8a:	2f 5f       	subi	r18, 0xFF	; 255
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
     b92:	80 91 8e 00 	lds	r24, 0x008E
     b96:	90 91 8f 00 	lds	r25, 0x008F
     b9a:	a0 91 90 00 	lds	r26, 0x0090
     b9e:	b0 91 91 00 	lds	r27, 0x0091
     ba2:	02 96       	adiw	r24, 0x02	; 2
     ba4:	a1 1d       	adc	r26, r1
     ba6:	b1 1d       	adc	r27, r1
     ba8:	28 17       	cp	r18, r24
     baa:	39 07       	cpc	r19, r25
     bac:	4a 07       	cpc	r20, r26
     bae:	5b 07       	cpc	r21, r27
     bb0:	c1 f0       	breq	.+48     	; 0xbe2 <memoryStatistics+0x1bc>
     bb2:	c9 01       	movw	r24, r18
     bb4:	82 19       	sub	r24, r2
     bb6:	93 09       	sbc	r25, r3
     bb8:	6c 5f       	subi	r22, 0xFC	; 252
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     bbc:	02 e0       	ldi	r16, 0x02	; 2
     bbe:	60 30       	cpi	r22, 0x00	; 0
     bc0:	70 07       	cpc	r23, r16
     bc2:	91 f6       	brne	.-92     	; 0xb68 <memoryStatistics+0x142>
     bc4:	e1 2c       	mov	r14, r1
     bc6:	a2 e0       	ldi	r26, 0x02	; 2
     bc8:	fa 2e       	mov	r15, r26
     bca:	01 2d       	mov	r16, r1
     bcc:	11 2d       	mov	r17, r1
     bce:	ae 0c       	add	r10, r14
     bd0:	bf 1c       	adc	r11, r15
     bd2:	c0 1e       	adc	r12, r16
     bd4:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
     bd6:	80 38       	cpi	r24, 0x80	; 128
     bd8:	91 05       	cpc	r25, r1
     bda:	18 f0       	brcs	.+6      	; 0xbe2 <memoryStatistics+0x1bc>
     bdc:	19 01       	movw	r2, r18
     bde:	2a 01       	movw	r4, r20
     be0:	9b cf       	rjmp	.-202    	; 0xb18 <memoryStatistics+0xf2>
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
     be2:	80 91 ac 02 	lds	r24, 0x02AC
     be6:	88 23       	and	r24, r24
     be8:	31 f4       	brne	.+12     	; 0xbf6 <memoryStatistics+0x1d0>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	a4 01       	movw	r20, r8
     bf0:	93 01       	movw	r18, r6
     bf2:	0e 94 2b 04 	call	0x856	; 0x856 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 ac 02 	sts	0x02AC, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
     bfc:	20 91 9a 02 	lds	r18, 0x029A
     c00:	30 91 9b 02 	lds	r19, 0x029B
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	c4 01       	movw	r24, r8
     c0a:	b3 01       	movw	r22, r6
     c0c:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
     c10:	5b 01       	movw	r10, r22
     c12:	6c 01       	movw	r12, r24
     c14:	fa e0       	ldi	r31, 0x0A	; 10
     c16:	d6 94       	lsr	r13
     c18:	c7 94       	ror	r12
     c1a:	b7 94       	ror	r11
     c1c:	a7 94       	ror	r10
     c1e:	fa 95       	dec	r31
     c20:	d1 f7       	brne	.-12     	; 0xc16 <memoryStatistics+0x1f0>
freeMemory *= bytesPerSector ;
     c22:	e0 90 8c 00 	lds	r14, 0x008C
     c26:	f0 90 8d 00 	lds	r15, 0x008D
TX_NEWLINE;
     c2a:	8d e0       	ldi	r24, 0x0D	; 13
     c2c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
     c30:	8a e0       	ldi	r24, 0x0A	; 10
     c32:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
     c36:	84 e5       	ldi	r24, 0x54	; 84
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
displayMemory (HIGH, freeMemory);
     c3e:	00 e0       	ldi	r16, 0x00	; 0
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	c6 01       	movw	r24, r12
     c44:	b5 01       	movw	r22, r10
     c46:	a8 01       	movw	r20, r16
     c48:	97 01       	movw	r18, r14
     c4a:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
     c4e:	ab 01       	movw	r20, r22
     c50:	bc 01       	movw	r22, r24
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 b2 02 	call	0x564	; 0x564 <displayMemory>
TX_NEWLINE; 
     c58:	8d e0       	ldi	r24, 0x0D	; 13
     c5a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
     c5e:	8a e0       	ldi	r24, 0x0A	; 10
     c60:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
}
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	af 90       	pop	r10
     c74:	9f 90       	pop	r9
     c76:	8f 90       	pop	r8
     c78:	7f 90       	pop	r7
     c7a:	6f 90       	pop	r6
     c7c:	5f 90       	pop	r5
     c7e:	4f 90       	pop	r4
     c80:	3f 90       	pop	r3
     c82:	2f 90       	pop	r2
     c84:	08 95       	ret

00000c86 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     c86:	6f 92       	push	r6
     c88:	7f 92       	push	r7
     c8a:	8f 92       	push	r8
     c8c:	9f 92       	push	r9
     c8e:	af 92       	push	r10
     c90:	bf 92       	push	r11
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     c9e:	10 92 9c 02 	sts	0x029C, r1
     ca2:	10 92 9d 02 	sts	0x029D, r1
     ca6:	10 92 9e 02 	sts	0x029E, r1
     caa:	10 92 9f 02 	sts	0x029F, r1

SD_readSingleBlock(0);
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     cba:	80 91 9a 00 	lds	r24, 0x009A
     cbe:	89 3e       	cpi	r24, 0xE9	; 233
     cc0:	19 f1       	breq	.+70     	; 0xd08 <getBootSectorData+0x82>
     cc2:	8b 3e       	cpi	r24, 0xEB	; 235
     cc4:	09 f1       	breq	.+66     	; 0xd08 <getBootSectorData+0x82>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     cc6:	80 91 98 02 	lds	r24, 0x0298
     cca:	90 91 99 02 	lds	r25, 0x0299
     cce:	85 55       	subi	r24, 0x55	; 85
     cd0:	9a 4a       	sbci	r25, 0xAA	; 170
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <getBootSectorData+0x50>
     cd4:	b0 c0       	rjmp	.+352    	; 0xe36 <getBootSectorData+0x1b0>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     cd6:	60 91 60 02 	lds	r22, 0x0260
     cda:	70 91 61 02 	lds	r23, 0x0261
     cde:	80 91 62 02 	lds	r24, 0x0262
     ce2:	90 91 63 02 	lds	r25, 0x0263
     ce6:	60 93 9c 02 	sts	0x029C, r22
     cea:	70 93 9d 02 	sts	0x029D, r23
     cee:	80 93 9e 02 	sts	0x029E, r24
     cf2:	90 93 9f 02 	sts	0x029F, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     cf6:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     cfa:	80 91 9a 00 	lds	r24, 0x009A
     cfe:	89 3e       	cpi	r24, 0xE9	; 233
     d00:	19 f0       	breq	.+6      	; 0xd08 <getBootSectorData+0x82>
     d02:	8b 3e       	cpi	r24, 0xEB	; 235
     d04:	09 f0       	breq	.+2      	; 0xd08 <getBootSectorData+0x82>
     d06:	97 c0       	rjmp	.+302    	; 0xe36 <getBootSectorData+0x1b0>
}

bytesPerSector = bpb->bytesPerSector;
     d08:	80 91 a5 00 	lds	r24, 0x00A5
     d0c:	90 91 a6 00 	lds	r25, 0x00A6
     d10:	90 93 8d 00 	sts	0x008D, r25
     d14:	80 93 8c 00 	sts	0x008C, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     d18:	80 91 a7 00 	lds	r24, 0x00A7
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	90 93 9b 02 	sts	0x029B, r25
     d22:	80 93 9a 02 	sts	0x029A, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     d26:	a0 90 a8 00 	lds	r10, 0x00A8
     d2a:	b0 90 a9 00 	lds	r11, 0x00A9
     d2e:	b0 92 a6 02 	sts	0x02A6, r11
     d32:	a0 92 a5 02 	sts	0x02A5, r10
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     d36:	80 91 c6 00 	lds	r24, 0x00C6
     d3a:	90 91 c7 00 	lds	r25, 0x00C7
     d3e:	a0 91 c8 00 	lds	r26, 0x00C8
     d42:	b0 91 c9 00 	lds	r27, 0x00C9
     d46:	80 93 92 00 	sts	0x0092, r24
     d4a:	90 93 93 00 	sts	0x0093, r25
     d4e:	a0 93 94 00 	sts	0x0094, r26
     d52:	b0 93 95 00 	sts	0x0095, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     d56:	e0 90 a5 02 	lds	r14, 0x02A5
     d5a:	f0 90 a6 02 	lds	r15, 0x02A6
     d5e:	60 91 aa 00 	lds	r22, 0x00AA
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	20 91 be 00 	lds	r18, 0x00BE
     d6c:	30 91 bf 00 	lds	r19, 0x00BF
     d70:	40 91 c0 00 	lds	r20, 0x00C0
     d74:	50 91 c1 00 	lds	r21, 0x00C1
     d78:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
     d7c:	3b 01       	movw	r6, r22
     d7e:	4c 01       	movw	r8, r24
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	80 91 b6 00 	lds	r24, 0x00B6
     d88:	90 91 b7 00 	lds	r25, 0x00B7
     d8c:	a0 91 b8 00 	lds	r26, 0x00B8
     d90:	b0 91 b9 00 	lds	r27, 0x00B9
     d94:	e8 0e       	add	r14, r24
     d96:	f9 1e       	adc	r15, r25
     d98:	0a 1f       	adc	r16, r26
     d9a:	1b 1f       	adc	r17, r27
     d9c:	e6 0c       	add	r14, r6
     d9e:	f7 1c       	adc	r15, r7
     da0:	08 1d       	adc	r16, r8
     da2:	19 1d       	adc	r17, r9
     da4:	e0 92 84 00 	sts	0x0084, r14
     da8:	f0 92 85 00 	sts	0x0085, r15
     dac:	00 93 86 00 	sts	0x0086, r16
     db0:	10 93 87 00 	sts	0x0087, r17

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     db4:	20 91 9a 02 	lds	r18, 0x029A
     db8:	30 91 9b 02 	lds	r19, 0x029B
     dbc:	cc 24       	eor	r12, r12
     dbe:	dd 24       	eor	r13, r13
     dc0:	60 91 ba 00 	lds	r22, 0x00BA
     dc4:	70 91 bb 00 	lds	r23, 0x00BB
     dc8:	80 91 bc 00 	lds	r24, 0x00BC
     dcc:	90 91 bd 00 	lds	r25, 0x00BD
     dd0:	6a 19       	sub	r22, r10
     dd2:	7b 09       	sbc	r23, r11
     dd4:	8c 09       	sbc	r24, r12
     dd6:	9d 09       	sbc	r25, r13
     dd8:	66 19       	sub	r22, r6
     dda:	77 09       	sbc	r23, r7
     ddc:	88 09       	sbc	r24, r8
     dde:	99 09       	sbc	r25, r9
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
     de8:	c9 01       	movw	r24, r18
     dea:	da 01       	movw	r26, r20
     dec:	80 93 8e 00 	sts	0x008E, r24
     df0:	90 93 8f 00 	sts	0x008F, r25
     df4:	a0 93 90 00 	sts	0x0090, r26
     df8:	b0 93 91 00 	sts	0x0091, r27
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	0e 94 2b 04 	call	0x856	; 0x856 <getSetFreeCluster>
     e0c:	20 91 8e 00 	lds	r18, 0x008E
     e10:	30 91 8f 00 	lds	r19, 0x008F
     e14:	40 91 90 00 	lds	r20, 0x0090
     e18:	50 91 91 00 	lds	r21, 0x0091
     e1c:	26 17       	cp	r18, r22
     e1e:	37 07       	cpc	r19, r23
     e20:	48 07       	cpc	r20, r24
     e22:	59 07       	cpc	r21, r25
     e24:	18 f4       	brcc	.+6      	; 0xe2c <getBootSectorData+0x1a6>
     freeClusterCountUpdated = 0;
     e26:	10 92 ac 02 	sts	0x02AC, r1
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <getBootSectorData+0x1ac>
else
	 freeClusterCountUpdated = 1;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 93 ac 02 	sts	0x02AC, r24
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <getBootSectorData+0x1b2>
     e36:	81 e0       	ldi	r24, 0x01	; 1
return 0;
}
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	bf 90       	pop	r11
     e46:	af 90       	pop	r10
     e48:	9f 90       	pop	r9
     e4a:	8f 90       	pop	r8
     e4c:	7f 90       	pop	r7
     e4e:	6f 90       	pop	r6
     e50:	08 95       	ret

00000e52 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     e52:	4f 92       	push	r4
     e54:	5f 92       	push	r5
     e56:	6f 92       	push	r6
     e58:	7f 92       	push	r7
     e5a:	8f 92       	push	r8
     e5c:	9f 92       	push	r9
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	5b 01       	movw	r10, r22
     e74:	6c 01       	movw	r12, r24
     e76:	84 2e       	mov	r8, r20
     e78:	28 01       	movw	r4, r16
     e7a:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     e7c:	80 91 a5 02 	lds	r24, 0x02A5
     e80:	90 91 a6 02 	lds	r25, 0x02A6
     e84:	02 e0       	ldi	r16, 0x02	; 2
     e86:	aa 0c       	add	r10, r10
     e88:	bb 1c       	adc	r11, r11
     e8a:	cc 1c       	adc	r12, r12
     e8c:	dd 1c       	adc	r13, r13
     e8e:	0a 95       	dec	r16
     e90:	d1 f7       	brne	.-12     	; 0xe86 <getSetNextCluster+0x34>
     e92:	20 91 8c 00 	lds	r18, 0x008C
     e96:	30 91 8d 00 	lds	r19, 0x008D
     e9a:	7c 01       	movw	r14, r24
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	80 91 9c 02 	lds	r24, 0x029C
     ea4:	90 91 9d 02 	lds	r25, 0x029D
     ea8:	a0 91 9e 02 	lds	r26, 0x029E
     eac:	b0 91 9f 02 	lds	r27, 0x029F
     eb0:	e8 0e       	add	r14, r24
     eb2:	f9 1e       	adc	r15, r25
     eb4:	0a 1f       	adc	r16, r26
     eb6:	1b 1f       	adc	r17, r27
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	c6 01       	movw	r24, r12
     ebe:	b5 01       	movw	r22, r10
     ec0:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
     ec4:	e2 0e       	add	r14, r18
     ec6:	f3 1e       	adc	r15, r19
     ec8:	04 1f       	adc	r16, r20
     eca:	15 1f       	adc	r17, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     ecc:	c0 91 8c 00 	lds	r28, 0x008C
     ed0:	d0 91 8d 00 	lds	r29, 0x008D
     ed4:	99 24       	eor	r9, r9

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     ed6:	c8 01       	movw	r24, r16
     ed8:	b7 01       	movw	r22, r14
     eda:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
     ede:	88 23       	and	r24, r24
     ee0:	21 f0       	breq	.+8      	; 0xeea <getSetNextCluster+0x98>
     ee2:	93 94       	inc	r9

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     ee4:	8a e0       	ldi	r24, 0x0A	; 10
     ee6:	98 16       	cp	r9, r24
     ee8:	b1 f7       	brne	.-20     	; 0xed6 <getSetNextCluster+0x84>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     eea:	9e 01       	movw	r18, r28
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	c6 01       	movw	r24, r12
     ef2:	b5 01       	movw	r22, r10
     ef4:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
     ef8:	fb 01       	movw	r30, r22
     efa:	e6 56       	subi	r30, 0x66	; 102
     efc:	ff 4f       	sbci	r31, 0xFF	; 255

if(get_set == GET)
     efe:	88 20       	and	r8, r8
     f00:	31 f4       	brne	.+12     	; 0xf0e <getSetNextCluster+0xbc>
  return ((*FATEntryValue) & 0x0fffffff);
     f02:	20 81       	ld	r18, Z
     f04:	31 81       	ldd	r19, Z+1	; 0x01
     f06:	42 81       	ldd	r20, Z+2	; 0x02
     f08:	53 81       	ldd	r21, Z+3	; 0x03
     f0a:	5f 70       	andi	r21, 0x0F	; 15
     f0c:	0c c0       	rjmp	.+24     	; 0xf26 <getSetNextCluster+0xd4>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     f0e:	40 82       	st	Z, r4
     f10:	51 82       	std	Z+1, r5	; 0x01
     f12:	62 82       	std	Z+2, r6	; 0x02
     f14:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     f16:	c8 01       	movw	r24, r16
     f18:	b7 01       	movw	r22, r14
     f1a:	0e 94 0d 12 	call	0x241a	; 0x241a <SD_writeSingleBlock>
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	50 e0       	ldi	r21, 0x00	; 0

return (0);
}
     f26:	b9 01       	movw	r22, r18
     f28:	ca 01       	movw	r24, r20
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	bf 90       	pop	r11
     f3c:	af 90       	pop	r10
     f3e:	9f 90       	pop	r9
     f40:	8f 90       	pop	r8
     f42:	7f 90       	pop	r7
     f44:	6f 90       	pop	r6
     f46:	5f 90       	pop	r5
     f48:	4f 90       	pop	r4
     f4a:	08 95       	ret

00000f4c <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     f4c:	2f 92       	push	r2
     f4e:	3f 92       	push	r3
     f50:	4f 92       	push	r4
     f52:	5f 92       	push	r5
     f54:	6f 92       	push	r6
     f56:	7f 92       	push	r7
     f58:	8f 92       	push	r8
     f5a:	9f 92       	push	r9
     f5c:	af 92       	push	r10
     f5e:	bf 92       	push	r11
     f60:	cf 92       	push	r12
     f62:	df 92       	push	r13
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	2a 97       	sbiw	r28, 0x0a	; 10
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	8d 83       	std	Y+5, r24	; 0x05
     f82:	7f 83       	std	Y+7, r23	; 0x07
     f84:	6e 83       	std	Y+6, r22	; 0x06
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
     f86:	a0 90 92 00 	lds	r10, 0x0092
     f8a:	b0 90 93 00 	lds	r11, 0x0093
     f8e:	c0 90 94 00 	lds	r12, 0x0094
     f92:	d0 90 95 00 	lds	r13, 0x0095
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     f96:	81 50       	subi	r24, 0x01	; 1
     f98:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     f9a:	20 91 9a 02 	lds	r18, 0x029A
     f9e:	30 91 9b 02 	lds	r19, 0x029B
     fa2:	e0 90 84 00 	lds	r14, 0x0084
     fa6:	f0 90 85 00 	lds	r15, 0x0085
     faa:	00 91 86 00 	lds	r16, 0x0086
     fae:	10 91 87 00 	lds	r17, 0x0087
     fb2:	c6 01       	movw	r24, r12
     fb4:	b5 01       	movw	r22, r10
     fb6:	62 50       	subi	r22, 0x02	; 2
     fb8:	70 40       	sbci	r23, 0x00	; 0
     fba:	80 40       	sbci	r24, 0x00	; 0
     fbc:	90 40       	sbci	r25, 0x00	; 0
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
     fc6:	1b 01       	movw	r2, r22
     fc8:	2c 01       	movw	r4, r24
     fca:	2e 0c       	add	r2, r14
     fcc:	3f 1c       	adc	r3, r15
     fce:	40 1e       	adc	r4, r16
     fd0:	51 1e       	adc	r5, r17
     fd2:	66 24       	eor	r6, r6
     fd4:	77 24       	eor	r7, r7
     fd6:	43 01       	movw	r8, r6
     fd8:	60 c1       	rjmp	.+704    	; 0x129a <findFiles+0x34e>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
     fda:	d4 01       	movw	r26, r8
     fdc:	c3 01       	movw	r24, r6
     fde:	82 0d       	add	r24, r2
     fe0:	93 1d       	adc	r25, r3
     fe2:	a4 1d       	adc	r26, r4
     fe4:	b5 1d       	adc	r27, r5
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	ab 83       	std	Y+3, r26	; 0x03
     fec:	bc 83       	std	Y+4, r27	; 0x04
   {
     SD_readSingleBlock (firstSector + sector);
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
     ff6:	40 e2       	ldi	r20, 0x20	; 32
     ff8:	e4 2e       	mov	r14, r20
     ffa:	f1 2c       	mov	r15, r1
     ffc:	3e c1       	rjmp	.+636    	; 0x127a <findFiles+0x32e>
	

     for(i=0; i<bytesPerSector; i+=32)
     ffe:	8a 01       	movw	r16, r20
    1000:	06 56       	subi	r16, 0x66	; 102
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1004:	f7 01       	movw	r30, r14
    1006:	e6 56       	subi	r30, 0x66	; 102
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	b0 97       	sbiw	r30, 0x20	; 32
    100c:	80 81       	ld	r24, Z
    100e:	b0 96       	adiw	r30, 0x20	; 32
    1010:	88 23       	and	r24, r24
    1012:	41 f4       	brne	.+16     	; 0x1024 <findFiles+0xd8>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	91 50       	subi	r25, 0x01	; 1
    1018:	92 30       	cpi	r25, 0x02	; 2
    101a:	08 f0       	brcs	.+2      	; 0x101e <findFiles+0xd2>
    101c:	68 c1       	rjmp	.+720    	; 0x12ee <findFiles+0x3a2>
		      transmitString_F(PSTR("File does not exist!"));
    101e:	8c ea       	ldi	r24, 0xAC	; 172
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	63 c1       	rjmp	.+710    	; 0x12ea <findFiles+0x39e>
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1024:	85 3e       	cpi	r24, 0xE5	; 229
    1026:	09 f4       	brne	.+2      	; 0x102a <findFiles+0xde>
    1028:	24 c1       	rjmp	.+584    	; 0x1272 <findFiles+0x326>
    102a:	75 97       	sbiw	r30, 0x15	; 21
    102c:	80 81       	ld	r24, Z
    102e:	8f 30       	cpi	r24, 0x0F	; 15
    1030:	09 f4       	brne	.+2      	; 0x1034 <findFiles+0xe8>
    1032:	1f c1       	rjmp	.+574    	; 0x1272 <findFiles+0x326>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1034:	a8 85       	ldd	r26, Y+8	; 0x08
    1036:	a2 30       	cpi	r26, 0x02	; 2
    1038:	08 f0       	brcs	.+2      	; 0x103c <findFiles+0xf0>
    103a:	d2 c0       	rjmp	.+420    	; 0x11e0 <findFiles+0x294>
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    1040:	c8 01       	movw	r24, r16
    1042:	82 0f       	add	r24, r18
    1044:	93 1f       	adc	r25, r19
    1046:	ae 81       	ldd	r26, Y+6	; 0x06
    1048:	bf 81       	ldd	r27, Y+7	; 0x07
    104a:	a2 0f       	add	r26, r18
    104c:	b3 1f       	adc	r27, r19
    104e:	fc 01       	movw	r30, r24
    1050:	90 81       	ld	r25, Z
    1052:	8c 91       	ld	r24, X
    1054:	98 17       	cp	r25, r24
    1056:	09 f0       	breq	.+2      	; 0x105a <findFiles+0x10e>
    1058:	0c c1       	rjmp	.+536    	; 0x1272 <findFiles+0x326>
    105a:	82 2f       	mov	r24, r18
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	2f 5f       	subi	r18, 0xFF	; 255
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1062:	2b 30       	cpi	r18, 0x0B	; 11
    1064:	31 05       	cpc	r19, r1
    1066:	61 f7       	brne	.-40     	; 0x1040 <findFiles+0xf4>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    1068:	8b 30       	cpi	r24, 0x0B	; 11
    106a:	09 f0       	breq	.+2      	; 0x106e <findFiles+0x122>
    106c:	02 c1       	rjmp	.+516    	; 0x1272 <findFiles+0x326>
			{
			  if(flag == GET_FILE)
    106e:	fd 81       	ldd	r31, Y+5	; 0x05
    1070:	f1 30       	cpi	r31, 0x01	; 1
    1072:	09 f0       	breq	.+2      	; 0x1076 <findFiles+0x12a>
    1074:	3f c0       	rjmp	.+126    	; 0x10f4 <findFiles+0x1a8>
              {
			    appendFileSector = firstSector + sector;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	ab 81       	ldd	r26, Y+3	; 0x03
    107c:	bc 81       	ldd	r27, Y+4	; 0x04
    107e:	80 93 ad 02 	sts	0x02AD, r24
    1082:	90 93 ae 02 	sts	0x02AE, r25
    1086:	a0 93 af 02 	sts	0x02AF, r26
    108a:	b0 93 b0 02 	sts	0x02B0, r27
				appendFileLocation = i;
    108e:	ca 01       	movw	r24, r20
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	80 93 80 00 	sts	0x0080, r24
    1098:	90 93 81 00 	sts	0x0081, r25
    109c:	a0 93 82 00 	sts	0x0082, r26
    10a0:	b0 93 83 00 	sts	0x0083, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    10a4:	d8 01       	movw	r26, r16
    10a6:	54 96       	adiw	r26, 0x14	; 20
    10a8:	8d 91       	ld	r24, X+
    10aa:	9c 91       	ld	r25, X
    10ac:	55 97       	sbiw	r26, 0x15	; 21
    10ae:	a0 e0       	ldi	r26, 0x00	; 0
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	dc 01       	movw	r26, r24
    10b4:	99 27       	eor	r25, r25
    10b6:	88 27       	eor	r24, r24
    10b8:	f8 01       	movw	r30, r16
    10ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    10bc:	33 8d       	ldd	r19, Z+27	; 0x1b
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	82 2b       	or	r24, r18
    10c4:	93 2b       	or	r25, r19
    10c6:	a4 2b       	or	r26, r20
    10c8:	b5 2b       	or	r27, r21
    10ca:	80 93 a7 02 	sts	0x02A7, r24
    10ce:	90 93 a8 02 	sts	0x02A8, r25
    10d2:	a0 93 a9 02 	sts	0x02A9, r26
    10d6:	b0 93 aa 02 	sts	0x02AA, r27
				fileSize = dir->fileSize;
    10da:	84 8d       	ldd	r24, Z+28	; 0x1c
    10dc:	95 8d       	ldd	r25, Z+29	; 0x1d
    10de:	a6 8d       	ldd	r26, Z+30	; 0x1e
    10e0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    10e2:	80 93 88 00 	sts	0x0088, r24
    10e6:	90 93 89 00 	sts	0x0089, r25
    10ea:	a0 93 8a 00 	sts	0x008A, r26
    10ee:	b0 93 8b 00 	sts	0x008B, r27
    10f2:	ff c0       	rjmp	.+510    	; 0x12f2 <findFiles+0x3a6>
			    return (dir);
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    10f4:	8d e0       	ldi	r24, 0x0D	; 13
    10f6:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    10fa:	8a e0       	ldi	r24, 0x0A	; 10
    10fc:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    1100:	81 ea       	ldi	r24, 0xA1	; 161
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
				 TX_NEWLINE;
    1108:	8d e0       	ldi	r24, 0x0D	; 13
    110a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    110e:	8a e0       	ldi	r24, 0x0A	; 10
    1110:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
				 TX_NEWLINE;
    1114:	8d e0       	ldi	r24, 0x0D	; 13
    1116:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    111a:	8a e0       	ldi	r24, 0x0A	; 10
    111c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1120:	d8 01       	movw	r26, r16
    1122:	54 96       	adiw	r26, 0x14	; 20
    1124:	8d 91       	ld	r24, X+
    1126:	9c 91       	ld	r25, X
    1128:	55 97       	sbiw	r26, 0x15	; 21
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	5c 01       	movw	r10, r24
    1130:	99 24       	eor	r9, r9
    1132:	88 24       	eor	r8, r8
    1134:	f8 01       	movw	r30, r16
    1136:	82 8d       	ldd	r24, Z+26	; 0x1a
    1138:	93 8d       	ldd	r25, Z+27	; 0x1b
    113a:	a0 e0       	ldi	r26, 0x00	; 0
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	88 2a       	or	r8, r24
    1140:	99 2a       	or	r9, r25
    1142:	aa 2a       	or	r10, r26
    1144:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    1146:	85 ee       	ldi	r24, 0xE5	; 229
    1148:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    114a:	69 81       	ldd	r22, Y+1	; 0x01
    114c:	7a 81       	ldd	r23, Y+2	; 0x02
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	0e 94 0d 12 	call	0x241a	; 0x241a <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1156:	d8 01       	movw	r26, r16
    1158:	5c 96       	adiw	r26, 0x1c	; 28
    115a:	4d 91       	ld	r20, X+
    115c:	5d 91       	ld	r21, X+
    115e:	6d 91       	ld	r22, X+
    1160:	7c 91       	ld	r23, X
    1162:	5f 97       	sbiw	r26, 0x1f	; 31
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	0e 94 b2 04 	call	0x964	; 0x964 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    116a:	82 e0       	ldi	r24, 0x02	; 2
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	0e 94 2b 04 	call	0x856	; 0x856 <getSetFreeCluster>
				 if(firstCluster < cluster)
    117a:	86 16       	cp	r8, r22
    117c:	97 06       	cpc	r9, r23
    117e:	a8 06       	cpc	r10, r24
    1180:	b9 06       	cpc	r11, r25
    1182:	30 f4       	brcc	.+12     	; 0x1190 <findFiles+0x244>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	a5 01       	movw	r20, r10
    118a:	94 01       	movw	r18, r8
    118c:	0e 94 2b 04 	call	0x856	; 0x856 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1190:	c5 01       	movw	r24, r10
    1192:	b4 01       	movw	r22, r8
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	00 e0       	ldi	r16, 0x00	; 0
    1198:	10 e0       	ldi	r17, 0x00	; 0
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
    11a2:	f6 2e       	mov	r15, r22
    11a4:	e7 2e       	mov	r14, r23
    11a6:	d8 2e       	mov	r13, r24
    11a8:	c9 2e       	mov	r12, r25
					getSetNextCluster (firstCluster, SET, 0);
    11aa:	c5 01       	movw	r24, r10
    11ac:	b4 01       	movw	r22, r8
    11ae:	41 e0       	ldi	r20, 0x01	; 1
    11b0:	00 e0       	ldi	r16, 0x00	; 0
    11b2:	10 e0       	ldi	r17, 0x00	; 0
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
    11bc:	8f 2d       	mov	r24, r15
    11be:	9e 2d       	mov	r25, r14
    11c0:	ad 2d       	mov	r26, r13
    11c2:	bc 2d       	mov	r27, r12
    11c4:	4c 01       	movw	r8, r24
    11c6:	5d 01       	movw	r10, r26
					if(nextCluster > 0x0ffffff6) 
    11c8:	b7 ef       	ldi	r27, 0xF7	; 247
    11ca:	8b 16       	cp	r8, r27
    11cc:	bf ef       	ldi	r27, 0xFF	; 255
    11ce:	9b 06       	cpc	r9, r27
    11d0:	bf ef       	ldi	r27, 0xFF	; 255
    11d2:	ab 06       	cpc	r10, r27
    11d4:	bf e0       	ldi	r27, 0x0F	; 15
    11d6:	bb 06       	cpc	r11, r27
    11d8:	d8 f2       	brcs	.-74     	; 0x1190 <findFiles+0x244>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    11da:	83 e9       	ldi	r24, 0x93	; 147
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	85 c0       	rjmp	.+266    	; 0x12ea <findFiles+0x39e>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    11e0:	8d e0       	ldi	r24, 0x0D	; 13
    11e2:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    11e6:	8a e0       	ldi	r24, 0x0A	; 10
    11e8:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    11ec:	1a 86       	std	Y+10, r1	; 0x0a
    11ee:	19 86       	std	Y+9, r1	; 0x09
    11f0:	0b c0       	rjmp	.+22     	; 0x1208 <findFiles+0x2bc>
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    11f2:	e9 85       	ldd	r30, Y+9	; 0x09
    11f4:	e7 30       	cpi	r30, 0x07	; 7
    11f6:	19 f4       	brne	.+6      	; 0x11fe <findFiles+0x2b2>
    11f8:	80 e2       	ldi	r24, 0x20	; 32
    11fa:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	9a 87       	std	Y+10, r25	; 0x0a
    1206:	89 87       	std	Y+9, r24	; 0x09
			   transmitByte (dir->name[j]);
    1208:	e9 85       	ldd	r30, Y+9	; 0x09
    120a:	fa 85       	ldd	r31, Y+10	; 0x0a
    120c:	e0 0f       	add	r30, r16
    120e:	f1 1f       	adc	r31, r17
    1210:	80 81       	ld	r24, Z
    1212:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    1216:	a9 85       	ldd	r26, Y+9	; 0x09
    1218:	ba 85       	ldd	r27, Y+10	; 0x0a
    121a:	1a 97       	sbiw	r26, 0x0a	; 10
    121c:	51 f7       	brne	.-44     	; 0x11f2 <findFiles+0x2a6>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    121e:	8f e8       	ldi	r24, 0x8F	; 143
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1226:	87 01       	movw	r16, r14
    1228:	06 56       	subi	r16, 0x66	; 102
    122a:	1f 4f       	sbci	r17, 0xFF	; 255
    122c:	05 51       	subi	r16, 0x15	; 21
    122e:	10 40       	sbci	r17, 0x00	; 0
    1230:	f8 01       	movw	r30, r16
    1232:	80 81       	ld	r24, Z
    1234:	0b 5e       	subi	r16, 0xEB	; 235
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	80 31       	cpi	r24, 0x10	; 16
    123a:	b9 f0       	breq	.+46     	; 0x126a <findFiles+0x31e>
    123c:	88 30       	cpi	r24, 0x08	; 8
    123e:	19 f4       	brne	.+6      	; 0x1246 <findFiles+0x2fa>
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1240:	8d e7       	ldi	r24, 0x7D	; 125
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	14 c0       	rjmp	.+40     	; 0x126e <findFiles+0x322>
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
			 {
			     transmitString_F (PSTR("FILE" ));
    1246:	8a e8       	ldi	r24, 0x8A	; 138
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
		         transmitString_F (PSTR("   "));
    124e:	86 e8       	ldi	r24, 0x86	; 134
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    1256:	f8 01       	movw	r30, r16
    1258:	34 97       	sbiw	r30, 0x04	; 4
    125a:	40 81       	ld	r20, Z
    125c:	51 81       	ldd	r21, Z+1	; 0x01
    125e:	62 81       	ldd	r22, Z+2	; 0x02
    1260:	73 81       	ldd	r23, Z+3	; 0x03
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 b2 02 	call	0x564	; 0x564 <displayMemory>
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <findFiles+0x326>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    126a:	82 e8       	ldi	r24, 0x82	; 130
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	e8 0e       	add	r14, r24
    1278:	f9 1e       	adc	r15, r25
    127a:	a7 01       	movw	r20, r14
    127c:	40 52       	subi	r20, 0x20	; 32
    127e:	50 40       	sbci	r21, 0x00	; 0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1280:	80 91 8c 00 	lds	r24, 0x008C
    1284:	90 91 8d 00 	lds	r25, 0x008D
    1288:	48 17       	cp	r20, r24
    128a:	59 07       	cpc	r21, r25
    128c:	08 f4       	brcc	.+2      	; 0x1290 <findFiles+0x344>
    128e:	b7 ce       	rjmp	.-658    	; 0xffe <findFiles+0xb2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1290:	08 94       	sec
    1292:	61 1c       	adc	r6, r1
    1294:	71 1c       	adc	r7, r1
    1296:	81 1c       	adc	r8, r1
    1298:	91 1c       	adc	r9, r1
    129a:	80 91 9a 02 	lds	r24, 0x029A
    129e:	90 91 9b 02 	lds	r25, 0x029B
    12a2:	a0 e0       	ldi	r26, 0x00	; 0
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	68 16       	cp	r6, r24
    12a8:	79 06       	cpc	r7, r25
    12aa:	8a 06       	cpc	r8, r26
    12ac:	9b 06       	cpc	r9, r27
    12ae:	08 f4       	brcc	.+2      	; 0x12b2 <findFiles+0x366>
    12b0:	94 ce       	rjmp	.-728    	; 0xfda <findFiles+0x8e>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    12b2:	c6 01       	movw	r24, r12
    12b4:	b5 01       	movw	r22, r10
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	00 e0       	ldi	r16, 0x00	; 0
    12ba:	10 e0       	ldi	r17, 0x00	; 0
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
    12c4:	5b 01       	movw	r10, r22
    12c6:	6c 01       	movw	r12, r24

   if(cluster > 0x0ffffff6)
    12c8:	97 ef       	ldi	r25, 0xF7	; 247
    12ca:	a9 16       	cp	r10, r25
    12cc:	9f ef       	ldi	r25, 0xFF	; 255
    12ce:	b9 06       	cpc	r11, r25
    12d0:	9f ef       	ldi	r25, 0xFF	; 255
    12d2:	c9 06       	cpc	r12, r25
    12d4:	9f e0       	ldi	r25, 0x0F	; 15
    12d6:	d9 06       	cpc	r13, r25
    12d8:	50 f4       	brcc	.+20     	; 0x12ee <findFiles+0x3a2>
   	 return 0;
   if(cluster == 0) 
    12da:	a1 14       	cp	r10, r1
    12dc:	b1 04       	cpc	r11, r1
    12de:	c1 04       	cpc	r12, r1
    12e0:	d1 04       	cpc	r13, r1
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <findFiles+0x39a>
    12e4:	5a ce       	rjmp	.-844    	; 0xf9a <findFiles+0x4e>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    12e6:	84 e6       	ldi	r24, 0x64	; 100
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    12ee:	00 e0       	ldi	r16, 0x00	; 0
    12f0:	10 e0       	ldi	r17, 0x00	; 0
 }
return 0;
}
    12f2:	c8 01       	movw	r24, r16
    12f4:	2a 96       	adiw	r28, 0x0a	; 10
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	ef 90       	pop	r14
    130c:	df 90       	pop	r13
    130e:	cf 90       	pop	r12
    1310:	bf 90       	pop	r11
    1312:	af 90       	pop	r10
    1314:	9f 90       	pop	r9
    1316:	8f 90       	pop	r8
    1318:	7f 90       	pop	r7
    131a:	6f 90       	pop	r6
    131c:	5f 90       	pop	r5
    131e:	4f 90       	pop	r4
    1320:	3f 90       	pop	r3
    1322:	2f 90       	pop	r2
    1324:	08 95       	ret

00001326 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    132c:	0e 94 19 03 	call	0x632	; 0x632 <convertFileName>
  if(error) return;
    1330:	88 23       	and	r24, r24
    1332:	21 f4       	brne	.+8      	; 0x133c <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	be 01       	movw	r22, r28
    1338:	0e 94 a6 07 	call	0xf4c	; 0xf4c <findFiles>
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    1342:	2f 92       	push	r2
    1344:	3f 92       	push	r3
    1346:	4f 92       	push	r4
    1348:	5f 92       	push	r5
    134a:	6f 92       	push	r6
    134c:	7f 92       	push	r7
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <readFile+0x26>
    1368:	00 d0       	rcall	.+0      	; 0x136a <readFile+0x28>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	e8 2e       	mov	r14, r24
    1370:	8b 01       	movw	r16, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    1372:	cb 01       	movw	r24, r22
    1374:	0e 94 19 03 	call	0x632	; 0x632 <convertFileName>
if(error) return 2;
    1378:	88 23       	and	r24, r24
    137a:	11 f0       	breq	.+4      	; 0x1380 <readFile+0x3e>
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	9b c0       	rjmp	.+310    	; 0x14b6 <readFile+0x174>

dir = findFiles (GET_FILE, fileName); //get the file location
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	b8 01       	movw	r22, r16
    1384:	0e 94 a6 07 	call	0xf4c	; 0xf4c <findFiles>
    1388:	9c 01       	movw	r18, r24
if(dir == 0) 
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	09 f4       	brne	.+2      	; 0x1390 <readFile+0x4e>
    138e:	92 c0       	rjmp	.+292    	; 0x14b4 <readFile+0x172>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	e8 16       	cp	r14, r24
    1394:	09 f4       	brne	.+2      	; 0x1398 <readFile+0x56>
    1396:	8f c0       	rjmp	.+286    	; 0x14b6 <readFile+0x174>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1398:	d9 01       	movw	r26, r18
    139a:	54 96       	adiw	r26, 0x14	; 20
    139c:	8d 91       	ld	r24, X+
    139e:	9c 91       	ld	r25, X
    13a0:	55 97       	sbiw	r26, 0x15	; 21
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	4c 01       	movw	r8, r24
    13a8:	77 24       	eor	r7, r7
    13aa:	66 24       	eor	r6, r6
    13ac:	f9 01       	movw	r30, r18
    13ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    13b0:	93 8d       	ldd	r25, Z+27	; 0x1b
    13b2:	a0 e0       	ldi	r26, 0x00	; 0
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	68 2a       	or	r6, r24
    13b8:	79 2a       	or	r7, r25
    13ba:	8a 2a       	or	r8, r26
    13bc:	9b 2a       	or	r9, r27

fileSize = dir->fileSize;
    13be:	d9 01       	movw	r26, r18
    13c0:	5c 96       	adiw	r26, 0x1c	; 28
    13c2:	8d 91       	ld	r24, X+
    13c4:	9d 91       	ld	r25, X+
    13c6:	0d 90       	ld	r0, X+
    13c8:	bc 91       	ld	r27, X
    13ca:	a0 2d       	mov	r26, r0
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	ab 83       	std	Y+3, r26	; 0x03
    13d2:	bc 83       	std	Y+4, r27	; 0x04

TX_NEWLINE;
    13d4:	8d e0       	ldi	r24, 0x0D	; 13
    13d6:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    13da:	8a e0       	ldi	r24, 0x0A	; 10
    13dc:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
TX_NEWLINE;
    13e0:	8d e0       	ldi	r24, 0x0D	; 13
    13e2:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    13e6:	8a e0       	ldi	r24, 0x0A	; 10
    13e8:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    13ec:	22 24       	eor	r2, r2
    13ee:	33 24       	eor	r3, r3
    13f0:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    13f2:	20 91 9a 02 	lds	r18, 0x029A
    13f6:	30 91 9b 02 	lds	r19, 0x029B
    13fa:	e0 90 84 00 	lds	r14, 0x0084
    13fe:	f0 90 85 00 	lds	r15, 0x0085
    1402:	00 91 86 00 	lds	r16, 0x0086
    1406:	10 91 87 00 	lds	r17, 0x0087
    140a:	c4 01       	movw	r24, r8
    140c:	b3 01       	movw	r22, r6
    140e:	62 50       	subi	r22, 0x02	; 2
    1410:	70 40       	sbci	r23, 0x00	; 0
    1412:	80 40       	sbci	r24, 0x00	; 0
    1414:	90 40       	sbci	r25, 0x00	; 0
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
    141e:	5b 01       	movw	r10, r22
    1420:	6c 01       	movw	r12, r24
    1422:	ae 0c       	add	r10, r14
    1424:	bf 1c       	adc	r11, r15
    1426:	c0 1e       	adc	r12, r16
    1428:	d1 1e       	adc	r13, r17
    142a:	ee 24       	eor	r14, r14
    142c:	25 c0       	rjmp	.+74     	; 0x1478 <readFile+0x136>
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    142e:	c6 01       	movw	r24, r12
    1430:	b5 01       	movw	r22, r10
    1432:	6e 0d       	add	r22, r14
    1434:	71 1d       	adc	r23, r1
    1436:	81 1d       	adc	r24, r1
    1438:	91 1d       	adc	r25, r1
    143a:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
    143e:	00 e0       	ldi	r16, 0x00	; 0
    1440:	10 e0       	ldi	r17, 0x00	; 0
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
    1442:	f8 01       	movw	r30, r16
    1444:	e6 56       	subi	r30, 0x66	; 102
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	ab 81       	ldd	r26, Y+3	; 0x03
    1454:	bc 81       	ldd	r27, Y+4	; 0x04
    1456:	28 16       	cp	r2, r24
    1458:	39 06       	cpc	r3, r25
    145a:	4a 06       	cpc	r4, r26
    145c:	5b 06       	cpc	r5, r27
    145e:	50 f5       	brcc	.+84     	; 0x14b4 <readFile+0x172>
    1460:	08 94       	sec
    1462:	21 1c       	adc	r2, r1
    1464:	31 1c       	adc	r3, r1
    1466:	41 1c       	adc	r4, r1
    1468:	51 1c       	adc	r5, r1

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    146a:	0f 5f       	subi	r16, 0xFF	; 255
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	00 30       	cpi	r16, 0x00	; 0
    1472:	19 07       	cpc	r17, r25
    1474:	31 f7       	brne	.-52     	; 0x1442 <readFile+0x100>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1476:	e3 94       	inc	r14
    1478:	20 91 9a 02 	lds	r18, 0x029A
    147c:	30 91 9b 02 	lds	r19, 0x029B
    1480:	8e 2d       	mov	r24, r14
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	82 17       	cp	r24, r18
    1486:	93 07       	cpc	r25, r19
    1488:	90 f2       	brcs	.-92     	; 0x142e <readFile+0xec>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    148a:	c4 01       	movw	r24, r8
    148c:	b3 01       	movw	r22, r6
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	00 e0       	ldi	r16, 0x00	; 0
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
    149c:	3b 01       	movw	r6, r22
    149e:	4c 01       	movw	r8, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    14a0:	61 15       	cp	r22, r1
    14a2:	71 05       	cpc	r23, r1
    14a4:	81 05       	cpc	r24, r1
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f0       	breq	.+2      	; 0x14ac <readFile+0x16a>
    14aa:	a3 cf       	rjmp	.-186    	; 0x13f2 <readFile+0xb0>
    14ac:	8b e4       	ldi	r24, 0x4B	; 75
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
}
return 0;
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	df 90       	pop	r13
    14cc:	cf 90       	pop	r12
    14ce:	bf 90       	pop	r11
    14d0:	af 90       	pop	r10
    14d2:	9f 90       	pop	r9
    14d4:	8f 90       	pop	r8
    14d6:	7f 90       	pop	r7
    14d8:	6f 90       	pop	r6
    14da:	5f 90       	pop	r5
    14dc:	4f 90       	pop	r4
    14de:	3f 90       	pop	r3
    14e0:	2f 90       	pop	r2
    14e2:	08 95       	ret

000014e4 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    14e4:	2f 92       	push	r2
    14e6:	3f 92       	push	r3
    14e8:	4f 92       	push	r4
    14ea:	5f 92       	push	r5
    14ec:	6f 92       	push	r6
    14ee:	7f 92       	push	r7
    14f0:	8f 92       	push	r8
    14f2:	9f 92       	push	r9
    14f4:	af 92       	push	r10
    14f6:	bf 92       	push	r11
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	27 97       	sbiw	r28, 0x07	; 7
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	9f 83       	std	Y+7, r25	; 0x07
    151a:	8e 83       	std	Y+6, r24	; 0x06
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	6e 81       	ldd	r22, Y+6	; 0x06
    1520:	7f 81       	ldd	r23, Y+7	; 0x07
    1522:	0e 94 a1 09 	call	0x1342	; 0x1342 <readFile>

if(j == 1) 
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	09 f0       	breq	.+2      	; 0x152c <writeFile+0x48>
    152a:	57 c0       	rjmp	.+174    	; 0x15da <writeFile+0xf6>
{
  transmitString_F(PSTR("  File already existing, appending data..")); 
    152c:	8e e0       	ldi	r24, 0x0E	; 14
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    1534:	60 90 a7 02 	lds	r6, 0x02A7
    1538:	70 90 a8 02 	lds	r7, 0x02A8
    153c:	80 90 a9 02 	lds	r8, 0x02A9
    1540:	90 90 aa 02 	lds	r9, 0x02AA
    1544:	aa 24       	eor	r10, r10
    1546:	bb 24       	eor	r11, r11
    1548:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    154a:	c4 01       	movw	r24, r8
    154c:	b3 01       	movw	r22, r6
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	00 e0       	ldi	r16, 0x00	; 0
    1552:	10 e0       	ldi	r17, 0x00	; 0
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
    if(nextCluster == EOF) break;
    155c:	6f 3f       	cpi	r22, 0xFF	; 255
    155e:	2f ef       	ldi	r18, 0xFF	; 255
    1560:	72 07       	cpc	r23, r18
    1562:	2f ef       	ldi	r18, 0xFF	; 255
    1564:	82 07       	cpc	r24, r18
    1566:	2f e0       	ldi	r18, 0x0F	; 15
    1568:	92 07       	cpc	r25, r18
    156a:	41 f0       	breq	.+16     	; 0x157c <writeFile+0x98>
	cluster = nextCluster;
	clusterCount++;
    156c:	08 94       	sec
    156e:	a1 1c       	adc	r10, r1
    1570:	b1 1c       	adc	r11, r1
    1572:	c1 1c       	adc	r12, r1
    1574:	d1 1c       	adc	r13, r1
    1576:	3b 01       	movw	r6, r22
    1578:	4c 01       	movw	r8, r24
    157a:	e7 cf       	rjmp	.-50     	; 0x154a <writeFile+0x66>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    157c:	20 91 9a 02 	lds	r18, 0x029A
    1580:	30 91 9b 02 	lds	r19, 0x029B
    1584:	60 91 8c 00 	lds	r22, 0x008C
    1588:	70 91 8d 00 	lds	r23, 0x008D
    158c:	e0 90 8c 00 	lds	r14, 0x008C
    1590:	f0 90 8d 00 	lds	r15, 0x008D
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
    15a0:	a6 01       	movw	r20, r12
    15a2:	95 01       	movw	r18, r10
    15a4:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
    15a8:	9b 01       	movw	r18, r22
    15aa:	ac 01       	movw	r20, r24
    15ac:	60 91 88 00 	lds	r22, 0x0088
    15b0:	70 91 89 00 	lds	r23, 0x0089
    15b4:	80 91 8a 00 	lds	r24, 0x008A
    15b8:	90 91 8b 00 	lds	r25, 0x008B
    15bc:	62 1b       	sub	r22, r18
    15be:	73 0b       	sbc	r23, r19
    15c0:	84 0b       	sbc	r24, r20
    15c2:	95 0b       	sbc	r25, r21
    15c4:	00 e0       	ldi	r16, 0x00	; 0
    15c6:	10 e0       	ldi	r17, 0x00	; 0
    15c8:	a8 01       	movw	r20, r16
    15ca:	97 01       	movw	r18, r14
    15cc:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
    15d0:	b2 2e       	mov	r11, r18
    15d2:	21 e0       	ldi	r18, 0x01	; 1
    15d4:	aa 24       	eor	r10, r10
    15d6:	a3 94       	inc	r10
    15d8:	58 c0       	rjmp	.+176    	; 0x168a <writeFile+0x1a6>
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <writeFile+0xfc>
    15de:	23 c3       	rjmp	.+1606   	; 0x1c26 <writeFile+0x742>
   return; //invalid file name
else
{
  TX_NEWLINE;
    15e0:	8d e0       	ldi	r24, 0x0D	; 13
    15e2:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    15e6:	8a e0       	ldi	r24, 0x0A	; 10
    15e8:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
  transmitString_F(PSTR(" Creating File.."));
    15ec:	8d ef       	ldi	r24, 0xFD	; 253
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	0e 94 2b 04 	call	0x856	; 0x856 <getSetFreeCluster>
    1604:	9b 01       	movw	r18, r22
    1606:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    1608:	80 91 8e 00 	lds	r24, 0x008E
    160c:	90 91 8f 00 	lds	r25, 0x008F
    1610:	a0 91 90 00 	lds	r26, 0x0090
    1614:	b0 91 91 00 	lds	r27, 0x0091
    1618:	82 17       	cp	r24, r18
    161a:	93 07       	cpc	r25, r19
    161c:	a4 07       	cpc	r26, r20
    161e:	b5 07       	cpc	r27, r21
    1620:	40 f4       	brcc	.+16     	; 0x1632 <writeFile+0x14e>
     cluster = rootCluster;
    1622:	20 91 92 00 	lds	r18, 0x0092
    1626:	30 91 93 00 	lds	r19, 0x0093
    162a:	40 91 94 00 	lds	r20, 0x0094
    162e:	50 91 95 00 	lds	r21, 0x0095

  cluster = searchNextFreeCluster(cluster);
    1632:	ca 01       	movw	r24, r20
    1634:	b9 01       	movw	r22, r18
    1636:	0e 94 a1 03 	call	0x742	; 0x742 <searchNextFreeCluster>
    163a:	3b 01       	movw	r6, r22
    163c:	4c 01       	movw	r8, r24
   if(cluster == 0)
    163e:	61 15       	cp	r22, r1
    1640:	71 05       	cpc	r23, r1
    1642:	81 05       	cpc	r24, r1
    1644:	91 05       	cpc	r25, r1
    1646:	49 f4       	brne	.+18     	; 0x165a <writeFile+0x176>
   {
      TX_NEWLINE;
    1648:	8d e0       	ldi	r24, 0x0D	; 13
    164a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    164e:	8a e0       	ldi	r24, 0x0A	; 10
    1650:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1654:	8b ee       	ldi	r24, 0xEB	; 235
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	e4 c2       	rjmp	.+1480   	; 0x1c22 <writeFile+0x73e>
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	0f ef       	ldi	r16, 0xFF	; 255
    165e:	1f ef       	ldi	r17, 0xFF	; 255
    1660:	2f ef       	ldi	r18, 0xFF	; 255
    1662:	3f e0       	ldi	r19, 0x0F	; 15
    1664:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    1668:	c4 01       	movw	r24, r8
    166a:	aa 27       	eor	r26, r26
    166c:	bb 27       	eor	r27, r27
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    1672:	7a 82       	std	Y+2, r7	; 0x02
    1674:	69 82       	std	Y+1, r6	; 0x01
  fileSize = 0;
    1676:	10 92 88 00 	sts	0x0088, r1
    167a:	10 92 89 00 	sts	0x0089, r1
    167e:	10 92 8a 00 	sts	0x008A, r1
    1682:	10 92 8b 00 	sts	0x008B, r1
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	aa 24       	eor	r10, r10
    168a:	1d 82       	std	Y+5, r1	; 0x05
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    168c:	2b 2c       	mov	r2, r11
    168e:	33 24       	eor	r3, r3
    1690:	44 24       	eor	r4, r4
    1692:	55 24       	eor	r5, r5
    1694:	c4 01       	movw	r24, r8
    1696:	b3 01       	movw	r22, r6
    1698:	62 50       	subi	r22, 0x02	; 2
    169a:	70 40       	sbci	r23, 0x00	; 0
    169c:	80 40       	sbci	r24, 0x00	; 0
    169e:	90 40       	sbci	r25, 0x00	; 0



while(1)
{
   if(start)
    16a0:	22 23       	and	r18, r18
    16a2:	e9 f1       	breq	.+122    	; 0x171e <writeFile+0x23a>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    16a4:	20 91 9a 02 	lds	r18, 0x029A
    16a8:	30 91 9b 02 	lds	r19, 0x029B
    16ac:	e0 90 84 00 	lds	r14, 0x0084
    16b0:	f0 90 85 00 	lds	r15, 0x0085
    16b4:	00 91 86 00 	lds	r16, 0x0086
    16b8:	10 91 87 00 	lds	r17, 0x0087
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    16bc:	e2 0c       	add	r14, r2
    16be:	f3 1c       	adc	r15, r3
    16c0:	04 1d       	adc	r16, r4
    16c2:	15 1d       	adc	r17, r5
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
    16cc:	e6 0e       	add	r14, r22
    16ce:	f7 1e       	adc	r15, r23
    16d0:	08 1f       	adc	r16, r24
    16d2:	19 1f       	adc	r17, r25
    16d4:	e0 92 96 00 	sts	0x0096, r14
    16d8:	f0 92 97 00 	sts	0x0097, r15
    16dc:	00 93 98 00 	sts	0x0098, r16
    16e0:	10 93 99 00 	sts	0x0099, r17
	  SD_readSingleBlock (startBlock);
    16e4:	60 91 96 00 	lds	r22, 0x0096
    16e8:	70 91 97 00 	lds	r23, 0x0097
    16ec:	80 91 98 00 	lds	r24, 0x0098
    16f0:	90 91 99 00 	lds	r25, 0x0099
    16f4:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    16f8:	20 91 8c 00 	lds	r18, 0x008C
    16fc:	30 91 8d 00 	lds	r19, 0x008D
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	60 91 88 00 	lds	r22, 0x0088
    1708:	70 91 89 00 	lds	r23, 0x0089
    170c:	80 91 8a 00 	lds	r24, 0x008A
    1710:	90 91 8b 00 	lds	r25, 0x008B
    1714:	0e 94 b1 13 	call	0x2762	; 0x2762 <__udivmodsi4>
    1718:	8b 01       	movw	r16, r22
    171a:	eb 2c       	mov	r14, r11
    171c:	1f c0       	rjmp	.+62     	; 0x175c <writeFile+0x278>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    171e:	20 91 9a 02 	lds	r18, 0x029A
    1722:	30 91 9b 02 	lds	r19, 0x029B
    1726:	e0 90 84 00 	lds	r14, 0x0084
    172a:	f0 90 85 00 	lds	r15, 0x0085
    172e:	00 91 86 00 	lds	r16, 0x0086
    1732:	10 91 87 00 	lds	r17, 0x0087
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
    173e:	e6 0e       	add	r14, r22
    1740:	f7 1e       	adc	r15, r23
    1742:	08 1f       	adc	r16, r24
    1744:	19 1f       	adc	r17, r25
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    1746:	e0 92 96 00 	sts	0x0096, r14
    174a:	f0 92 97 00 	sts	0x0097, r15
    174e:	00 93 98 00 	sts	0x0098, r16
    1752:	10 93 99 00 	sts	0x0099, r17
    1756:	ee 24       	eor	r14, r14
    1758:	00 e0       	ldi	r16, 0x00	; 0
    175a:	10 e0       	ldi	r17, 0x00	; 0
	  i=0;
	  j=0;
   }
   

   TX_NEWLINE;
    175c:	8d e0       	ldi	r24, 0x0D	; 13
    175e:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1762:	8a e0       	ldi	r24, 0x0A	; 10
    1764:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    1768:	81 ed       	ldi	r24, 0xD1	; 209
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	e9 f4       	brne	.+58     	; 0x17b0 <writeFile+0x2cc>
	 {
	 	transmitByte ('\n');
    1776:	8a e0       	ldi	r24, 0x0A	; 10
    1778:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    177c:	f8 01       	movw	r30, r16
    177e:	e6 56       	subi	r30, 0x66	; 102
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	8a e0       	ldi	r24, 0x0A	; 10
    1784:	80 83       	st	Z, r24
    1786:	0f 5f       	subi	r16, 0xFF	; 255
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
		fileSize++;
    178a:	80 91 88 00 	lds	r24, 0x0088
    178e:	90 91 89 00 	lds	r25, 0x0089
    1792:	a0 91 8a 00 	lds	r26, 0x008A
    1796:	b0 91 8b 00 	lds	r27, 0x008B
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	a1 1d       	adc	r26, r1
    179e:	b1 1d       	adc	r27, r1
    17a0:	80 93 88 00 	sts	0x0088, r24
    17a4:	90 93 89 00 	sts	0x0089, r25
    17a8:	a0 93 8a 00 	sts	0x008A, r26
    17ac:	b0 93 8b 00 	sts	0x008B, r27
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    17b0:	0e 94 2b 13 	call	0x2656	; 0x2656 <receiveByte>
    17b4:	f8 2e       	mov	r15, r24
	 if(data == 0x08)	//'Back Space' key pressed
    17b6:	98 e0       	ldi	r25, 0x08	; 8
    17b8:	89 17       	cp	r24, r25
    17ba:	d1 f4       	brne	.+52     	; 0x17f0 <writeFile+0x30c>
	 { 
	   if(i != 0)
    17bc:	01 15       	cp	r16, r1
    17be:	11 05       	cpc	r17, r1
    17c0:	b9 f3       	breq	.-18     	; 0x17b0 <writeFile+0x2cc>
	   { 
	     transmitByte(data);
    17c2:	88 e0       	ldi	r24, 0x08	; 8
    17c4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
		 transmitByte(' '); 
    17c8:	80 e2       	ldi	r24, 0x20	; 32
    17ca:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
	     transmitByte(data); 
    17ce:	88 e0       	ldi	r24, 0x08	; 8
    17d0:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
	     i--; 
    17d4:	01 50       	subi	r16, 0x01	; 1
    17d6:	10 40       	sbci	r17, 0x00	; 0
		 fileSize--;
    17d8:	80 91 88 00 	lds	r24, 0x0088
    17dc:	90 91 89 00 	lds	r25, 0x0089
    17e0:	a0 91 8a 00 	lds	r26, 0x008A
    17e4:	b0 91 8b 00 	lds	r27, 0x008B
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	a1 09       	sbc	r26, r1
    17ec:	b1 09       	sbc	r27, r1
    17ee:	d8 cf       	rjmp	.-80     	; 0x17a0 <writeFile+0x2bc>
	   } 
	   continue;     
	 }
	 transmitByte(data);
    17f0:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
     buffer[i++] = data;
    17f4:	f8 01       	movw	r30, r16
    17f6:	e6 56       	subi	r30, 0x66	; 102
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	f0 82       	st	Z, r15
    17fc:	0f 5f       	subi	r16, 0xFF	; 255
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
	 fileSize++;
    1800:	80 91 88 00 	lds	r24, 0x0088
    1804:	90 91 89 00 	lds	r25, 0x0089
    1808:	a0 91 8a 00 	lds	r26, 0x008A
    180c:	b0 91 8b 00 	lds	r27, 0x008B
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	a1 1d       	adc	r26, r1
    1814:	b1 1d       	adc	r27, r1
    1816:	80 93 88 00 	sts	0x0088, r24
    181a:	90 93 89 00 	sts	0x0089, r25
    181e:	a0 93 8a 00 	sts	0x008A, r26
    1822:	b0 93 8b 00 	sts	0x008B, r27
     if(data == '\r')  //'Carriege Return (CR)' character
    1826:	ad e0       	ldi	r26, 0x0D	; 13
    1828:	fa 16       	cp	r15, r26
    182a:	21 f5       	brne	.+72     	; 0x1874 <writeFile+0x390>
     {
        if(i == 512)
    182c:	b2 e0       	ldi	r27, 0x02	; 2
    182e:	00 30       	cpi	r16, 0x00	; 0
    1830:	1b 07       	cpc	r17, r27
    1832:	19 f4       	brne	.+6      	; 0x183a <writeFile+0x356>
    1834:	e1 e0       	ldi	r30, 0x01	; 1
    1836:	ed 83       	std	Y+5, r30	; 0x05
    1838:	24 c0       	rjmp	.+72     	; 0x1882 <writeFile+0x39e>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    183a:	8a e0       	ldi	r24, 0x0A	; 10
    183c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1840:	f8 01       	movw	r30, r16
    1842:	e6 56       	subi	r30, 0x66	; 102
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	8a e0       	ldi	r24, 0x0A	; 10
    1848:	80 83       	st	Z, r24
    184a:	0f 5f       	subi	r16, 0xFF	; 255
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
		   fileSize++;
    184e:	80 91 88 00 	lds	r24, 0x0088
    1852:	90 91 89 00 	lds	r25, 0x0089
    1856:	a0 91 8a 00 	lds	r26, 0x008A
    185a:	b0 91 8b 00 	lds	r27, 0x008B
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	a1 1d       	adc	r26, r1
    1862:	b1 1d       	adc	r27, r1
    1864:	80 93 88 00 	sts	0x0088, r24
    1868:	90 93 89 00 	sts	0x0089, r25
    186c:	a0 93 8a 00 	sts	0x008A, r26
    1870:	b0 93 8b 00 	sts	0x008B, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    1874:	f2 e0       	ldi	r31, 0x02	; 2
    1876:	00 30       	cpi	r16, 0x00	; 0
    1878:	1f 07       	cpc	r17, r31
    187a:	10 f4       	brcc	.+4      	; 0x1880 <writeFile+0x39c>
    187c:	1d 82       	std	Y+5, r1	; 0x05
    187e:	2a c0       	rjmp	.+84     	; 0x18d4 <writeFile+0x3f0>
    1880:	1d 82       	std	Y+5, r1	; 0x05
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    1882:	60 91 96 00 	lds	r22, 0x0096
    1886:	70 91 97 00 	lds	r23, 0x0097
    188a:	80 91 98 00 	lds	r24, 0x0098
    188e:	90 91 99 00 	lds	r25, 0x0099
    1892:	0e 94 0d 12 	call	0x241a	; 0x241a <SD_writeSingleBlock>
       j++;
    1896:	e3 94       	inc	r14
	   if(j == sectorPerCluster) {j = 0; break;}
    1898:	20 91 9a 02 	lds	r18, 0x029A
    189c:	30 91 9b 02 	lds	r19, 0x029B
    18a0:	8e 2d       	mov	r24, r14
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	82 17       	cp	r24, r18
    18a6:	93 07       	cpc	r25, r19
    18a8:	d1 f0       	breq	.+52     	; 0x18de <writeFile+0x3fa>
	   startBlock++; 
    18aa:	80 91 96 00 	lds	r24, 0x0096
    18ae:	90 91 97 00 	lds	r25, 0x0097
    18b2:	a0 91 98 00 	lds	r26, 0x0098
    18b6:	b0 91 99 00 	lds	r27, 0x0099
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	a1 1d       	adc	r26, r1
    18be:	b1 1d       	adc	r27, r1
    18c0:	80 93 96 00 	sts	0x0096, r24
    18c4:	90 93 97 00 	sts	0x0097, r25
    18c8:	a0 93 98 00 	sts	0x0098, r26
    18cc:	b0 93 99 00 	sts	0x0099, r27
    18d0:	00 e0       	ldi	r16, 0x00	; 0
    18d2:	10 e0       	ldi	r17, 0x00	; 0
     }
	}while (data != '~');
    18d4:	2e e7       	ldi	r18, 0x7E	; 126
    18d6:	f2 16       	cp	r15, r18
    18d8:	09 f0       	breq	.+2      	; 0x18dc <writeFile+0x3f8>
    18da:	4a cf       	rjmp	.-364    	; 0x1770 <writeFile+0x28c>
    18dc:	05 c0       	rjmp	.+10     	; 0x18e8 <writeFile+0x404>

   if(data == '~') 
    18de:	8e e7       	ldi	r24, 0x7E	; 126
    18e0:	f8 16       	cp	r15, r24
    18e2:	b9 f5       	brne	.+110    	; 0x1952 <writeFile+0x46e>
    18e4:	00 e0       	ldi	r16, 0x00	; 0
    18e6:	10 e0       	ldi	r17, 0x00	; 0
   {
      fileSize--;	//to remove the last entered '~' character
    18e8:	80 91 88 00 	lds	r24, 0x0088
    18ec:	90 91 89 00 	lds	r25, 0x0089
    18f0:	a0 91 8a 00 	lds	r26, 0x008A
    18f4:	b0 91 8b 00 	lds	r27, 0x008B
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	a1 09       	sbc	r26, r1
    18fc:	b1 09       	sbc	r27, r1
    18fe:	80 93 88 00 	sts	0x0088, r24
    1902:	90 93 89 00 	sts	0x0089, r25
    1906:	a0 93 8a 00 	sts	0x008A, r26
    190a:	b0 93 8b 00 	sts	0x008B, r27
	  i--;
    190e:	b8 01       	movw	r22, r16
    1910:	61 50       	subi	r22, 0x01	; 1
    1912:	70 40       	sbci	r23, 0x00	; 0
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <writeFile+0x43e>
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    1916:	fb 01       	movw	r30, r22
    1918:	e6 56       	subi	r30, 0x66	; 102
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    191e:	6f 5f       	subi	r22, 0xFF	; 255
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	60 30       	cpi	r22, 0x00	; 0
    1926:	79 07       	cpc	r23, r25
    1928:	b0 f3       	brcs	.-20     	; 0x1916 <writeFile+0x432>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    192a:	60 91 96 00 	lds	r22, 0x0096
    192e:	70 91 97 00 	lds	r23, 0x0097
    1932:	80 91 98 00 	lds	r24, 0x0098
    1936:	90 91 99 00 	lds	r25, 0x0099
    193a:	0e 94 0d 12 	call	0x241a	; 0x241a <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	a4 01       	movw	r20, r8
    1944:	93 01       	movw	r18, r6
    1946:	0e 94 2b 04 	call	0x856	; 0x856 <getSetFreeCluster>

if(appendFile)  //executes this loop if file is to be appended
    194a:	aa 20       	and	r10, r10
    194c:	09 f4       	brne	.+2      	; 0x1950 <writeFile+0x46c>
    194e:	6f c0       	rjmp	.+222    	; 0x1a2e <writeFile+0x54a>
    1950:	28 c0       	rjmp	.+80     	; 0x19a2 <writeFile+0x4be>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1952:	c4 01       	movw	r24, r8
    1954:	b3 01       	movw	r22, r6
    1956:	0e 94 a1 03 	call	0x742	; 0x742 <searchNextFreeCluster>
    195a:	6b 01       	movw	r12, r22
    195c:	7c 01       	movw	r14, r24

   if(cluster == 0)
    195e:	61 15       	cp	r22, r1
    1960:	71 05       	cpc	r23, r1
    1962:	81 05       	cpc	r24, r1
    1964:	91 05       	cpc	r25, r1
    1966:	49 f4       	brne	.+18     	; 0x197a <writeFile+0x496>
   {
      TX_NEWLINE;
    1968:	8d e0       	ldi	r24, 0x0D	; 13
    196a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    196e:	8a e0       	ldi	r24, 0x0A	; 10
    1970:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1974:	8f eb       	ldi	r24, 0xBF	; 191
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	54 c1       	rjmp	.+680    	; 0x1c22 <writeFile+0x73e>
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    197a:	c4 01       	movw	r24, r8
    197c:	b3 01       	movw	r22, r6
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	97 01       	movw	r18, r14
    1982:	86 01       	movw	r16, r12
    1984:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1988:	c7 01       	movw	r24, r14
    198a:	b6 01       	movw	r22, r12
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0f ef       	ldi	r16, 0xFF	; 255
    1990:	1f ef       	ldi	r17, 0xFF	; 255
    1992:	2f ef       	ldi	r18, 0xFF	; 255
    1994:	3f e0       	ldi	r19, 0x0F	; 15
    1996:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	36 01       	movw	r6, r12
    199e:	47 01       	movw	r8, r14
    19a0:	79 ce       	rjmp	.-782    	; 0x1694 <writeFile+0x1b0>

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
    19a2:	60 91 ad 02 	lds	r22, 0x02AD
    19a6:	70 91 ae 02 	lds	r23, 0x02AE
    19aa:	80 91 af 02 	lds	r24, 0x02AF
    19ae:	90 91 b0 02 	lds	r25, 0x02B0
    19b2:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    19b6:	e0 91 80 00 	lds	r30, 0x0080
    19ba:	f0 91 81 00 	lds	r31, 0x0081
    19be:	e6 56       	subi	r30, 0x66	; 102
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
  extraMemory = fileSize - dir->fileSize;
    19c2:	20 91 88 00 	lds	r18, 0x0088
    19c6:	30 91 89 00 	lds	r19, 0x0089
    19ca:	40 91 8a 00 	lds	r20, 0x008A
    19ce:	50 91 8b 00 	lds	r21, 0x008B
    19d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    19d4:	95 8d       	ldd	r25, Z+29	; 0x1d
    19d6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    19d8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    19da:	79 01       	movw	r14, r18
    19dc:	8a 01       	movw	r16, r20
    19de:	e8 1a       	sub	r14, r24
    19e0:	f9 0a       	sbc	r15, r25
    19e2:	0a 0b       	sbc	r16, r26
    19e4:	1b 0b       	sbc	r17, r27
  dir->fileSize = fileSize;
    19e6:	24 8f       	std	Z+28, r18	; 0x1c
    19e8:	35 8f       	std	Z+29, r19	; 0x1d
    19ea:	46 8f       	std	Z+30, r20	; 0x1e
    19ec:	57 8f       	std	Z+31, r21	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    19ee:	60 91 ad 02 	lds	r22, 0x02AD
    19f2:	70 91 ae 02 	lds	r23, 0x02AE
    19f6:	80 91 af 02 	lds	r24, 0x02AF
    19fa:	90 91 b0 02 	lds	r25, 0x02B0
    19fe:	0e 94 0d 12 	call	0x241a	; 0x241a <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	b8 01       	movw	r22, r16
    1a06:	a7 01       	movw	r20, r14
    1a08:	0e 94 b2 04 	call	0x964	; 0x964 <freeMemoryUpdate>

  
  TX_NEWLINE;
    1a0c:	8d e0       	ldi	r24, 0x0D	; 13
    1a0e:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1a12:	8a e0       	ldi	r24, 0x0A	; 10
    1a14:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
  transmitString_F(PSTR(" File appended!"));
    1a18:	8f ea       	ldi	r24, 0xAF	; 175
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
  TX_NEWLINE;
    1a20:	8d e0       	ldi	r24, 0x0D	; 13
    1a22:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1a26:	8a e0       	ldi	r24, 0x0A	; 10
    1a28:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1a2c:	fc c0       	rjmp	.+504    	; 0x1c26 <writeFile+0x742>
  return;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1a2e:	80 90 92 00 	lds	r8, 0x0092
    1a32:	90 90 93 00 	lds	r9, 0x0093
    1a36:	a0 90 94 00 	lds	r10, 0x0094
    1a3a:	b0 90 95 00 	lds	r11, 0x0095
    1a3e:	22 24       	eor	r2, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1a40:	20 91 9a 02 	lds	r18, 0x029A
    1a44:	30 91 9b 02 	lds	r19, 0x029B
    1a48:	e0 90 84 00 	lds	r14, 0x0084
    1a4c:	f0 90 85 00 	lds	r15, 0x0085
    1a50:	00 91 86 00 	lds	r16, 0x0086
    1a54:	10 91 87 00 	lds	r17, 0x0087
    1a58:	c5 01       	movw	r24, r10
    1a5a:	b4 01       	movw	r22, r8
    1a5c:	62 50       	subi	r22, 0x02	; 2
    1a5e:	70 40       	sbci	r23, 0x00	; 0
    1a60:	80 40       	sbci	r24, 0x00	; 0
    1a62:	90 40       	sbci	r25, 0x00	; 0
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsi3>
    1a6c:	2b 01       	movw	r4, r22
    1a6e:	3c 01       	movw	r6, r24
    1a70:	4e 0c       	add	r4, r14
    1a72:	5f 1c       	adc	r5, r15
    1a74:	60 1e       	adc	r6, r16
    1a76:	71 1e       	adc	r7, r17
    1a78:	33 24       	eor	r3, r3
    1a7a:	8a c0       	rjmp	.+276    	; 0x1b90 <writeFile+0x6ac>
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    1a7c:	73 01       	movw	r14, r6
    1a7e:	62 01       	movw	r12, r4
    1a80:	c3 0c       	add	r12, r3
    1a82:	d1 1c       	adc	r13, r1
    1a84:	e1 1c       	adc	r14, r1
    1a86:	f1 1c       	adc	r15, r1
    1a88:	c7 01       	movw	r24, r14
    1a8a:	b6 01       	movw	r22, r12
    1a8c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
    1a90:	00 e2       	ldi	r16, 0x20	; 32
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	72 c0       	rjmp	.+228    	; 0x1b7a <writeFile+0x696>
	

     for(i=0; i<bytesPerSector; i+=32)
    1a96:	af 01       	movw	r20, r30
    1a98:	46 56       	subi	r20, 0x66	; 102
    1a9a:	5f 4f       	sbci	r21, 0xFF	; 255
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1a9c:	22 20       	and	r2, r2
    1a9e:	19 f0       	breq	.+6      	; 0x1aa6 <writeFile+0x5c2>
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
    1aa0:	da 01       	movw	r26, r20
    1aa2:	1c 92       	st	X, r1
    1aa4:	c0 c0       	rjmp	.+384    	; 0x1c26 <writeFile+0x742>
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	e6 58       	subi	r30, 0x86	; 134
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	e0 81       	ld	r30, Z
    1aae:	ee 23       	and	r30, r30
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <writeFile+0x5d4>
    1ab2:	e5 3e       	cpi	r30, 0xE5	; 229
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <writeFile+0x5d4>
    1ab6:	5f c0       	rjmp	.+190    	; 0x1b76 <writeFile+0x692>
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    1abc:	ba 01       	movw	r22, r20
    1abe:	62 0f       	add	r22, r18
    1ac0:	73 1f       	adc	r23, r19
    1ac2:	ae 81       	ldd	r26, Y+6	; 0x06
    1ac4:	bf 81       	ldd	r27, Y+7	; 0x07
    1ac6:	a2 0f       	add	r26, r18
    1ac8:	b3 1f       	adc	r27, r19
    1aca:	8c 91       	ld	r24, X
    1acc:	fb 01       	movw	r30, r22
    1ace:	80 83       	st	Z, r24
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    1ad4:	2b 30       	cpi	r18, 0x0B	; 11
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	89 f7       	brne	.-30     	; 0x1abc <writeFile+0x5d8>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1ada:	f8 01       	movw	r30, r16
    1adc:	e6 56       	subi	r30, 0x66	; 102
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	75 97       	sbiw	r30, 0x15	; 21
    1ae2:	20 e2       	ldi	r18, 0x20	; 32
    1ae4:	21 93       	st	Z+, r18
		  dir->NTreserved = 0;			//always set to 0
    1ae6:	11 92       	st	Z+, r1
		  dir->timeTenth = 0;			//always set to 0
    1ae8:	11 92       	st	Z+, r1
		  dir->createTime = 0x9684;		//fixed time of creation
    1aea:	84 e8       	ldi	r24, 0x84	; 132
    1aec:	96 e9       	ldi	r25, 0x96	; 150
    1aee:	81 93       	st	Z+, r24
    1af0:	91 93       	st	Z+, r25
		  dir->createDate = 0x3a37;		//fixed date of creation
    1af2:	a7 e3       	ldi	r26, 0x37	; 55
    1af4:	ba e3       	ldi	r27, 0x3A	; 58
    1af6:	a1 93       	st	Z+, r26
    1af8:	b1 93       	st	Z+, r27
		  dir->lastAccessDate = 0x3a37;	//fixed date of last access
    1afa:	b1 83       	std	Z+1, r27	; 0x01
    1afc:	a0 83       	st	Z, r26
		  dir->writeTime = 0x9684;		//fixed time of last write
    1afe:	34 96       	adiw	r30, 0x04	; 4
    1b00:	81 93       	st	Z+, r24
    1b02:	91 93       	st	Z+, r25
		  dir->writeDate = 0x3a37;		//fixed date of last write
    1b04:	b1 83       	std	Z+1, r27	; 0x01
    1b06:	a0 83       	st	Z, r26
		  dir->firstClusterHI = firstClusterHigh;
    1b08:	34 97       	sbiw	r30, 0x04	; 4
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
		  dir->firstClusterLO = firstClusterLow;
    1b12:	36 96       	adiw	r30, 0x06	; 6
    1b14:	a9 81       	ldd	r26, Y+1	; 0x01
    1b16:	ba 81       	ldd	r27, Y+2	; 0x02
    1b18:	a1 93       	st	Z+, r26
    1b1a:	b1 93       	st	Z+, r27
		  dir->fileSize = fileSize;
    1b1c:	80 91 88 00 	lds	r24, 0x0088
    1b20:	90 91 89 00 	lds	r25, 0x0089
    1b24:	a0 91 8a 00 	lds	r26, 0x008A
    1b28:	b0 91 8b 00 	lds	r27, 0x008B
    1b2c:	80 83       	st	Z, r24
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	a2 83       	std	Z+2, r26	; 0x02
    1b32:	b3 83       	std	Z+3, r27	; 0x03

		  SD_writeSingleBlock (firstSector + sector);
    1b34:	c7 01       	movw	r24, r14
    1b36:	b6 01       	movw	r22, r12
    1b38:	0e 94 0d 12 	call	0x241a	; 0x241a <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    1b3c:	8d e0       	ldi	r24, 0x0D	; 13
    1b3e:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1b42:	8a e0       	ldi	r24, 0x0A	; 10
    1b44:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
		  TX_NEWLINE;
    1b48:	8d e0       	ldi	r24, 0x0D	; 13
    1b4a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1b4e:	8a e0       	ldi	r24, 0x0A	; 10
    1b50:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
		  transmitString_F(PSTR(" File Created!"));
    1b54:	80 ea       	ldi	r24, 0xA0	; 160
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1b5c:	40 91 88 00 	lds	r20, 0x0088
    1b60:	50 91 89 00 	lds	r21, 0x0089
    1b64:	60 91 8a 00 	lds	r22, 0x008A
    1b68:	70 91 8b 00 	lds	r23, 0x008B
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	0e 94 b2 04 	call	0x964	; 0x964 <freeMemoryUpdate>
    1b72:	22 24       	eor	r2, r2
    1b74:	23 94       	inc	r2
    1b76:	00 5e       	subi	r16, 0xE0	; 224
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1b7a:	80 91 8c 00 	lds	r24, 0x008C
    1b7e:	90 91 8d 00 	lds	r25, 0x008D
    1b82:	f8 01       	movw	r30, r16
    1b84:	b0 97       	sbiw	r30, 0x20	; 32
    1b86:	e8 17       	cp	r30, r24
    1b88:	f9 07       	cpc	r31, r25
    1b8a:	08 f4       	brcc	.+2      	; 0x1b8e <writeFile+0x6aa>
    1b8c:	84 cf       	rjmp	.-248    	; 0x1a96 <writeFile+0x5b2>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1b8e:	33 94       	inc	r3
    1b90:	20 91 9a 02 	lds	r18, 0x029A
    1b94:	30 91 9b 02 	lds	r19, 0x029B
    1b98:	83 2d       	mov	r24, r3
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	82 17       	cp	r24, r18
    1b9e:	93 07       	cpc	r25, r19
    1ba0:	08 f4       	brcc	.+2      	; 0x1ba4 <writeFile+0x6c0>
    1ba2:	6c cf       	rjmp	.-296    	; 0x1a7c <writeFile+0x598>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1ba4:	c5 01       	movw	r24, r10
    1ba6:	b4 01       	movw	r22, r8
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	00 e0       	ldi	r16, 0x00	; 0
    1bac:	10 e0       	ldi	r17, 0x00	; 0
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
    1bb6:	6b 01       	movw	r12, r22
    1bb8:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    1bba:	67 3f       	cpi	r22, 0xF7	; 247
    1bbc:	bf ef       	ldi	r27, 0xFF	; 255
    1bbe:	7b 07       	cpc	r23, r27
    1bc0:	bf ef       	ldi	r27, 0xFF	; 255
    1bc2:	8b 07       	cpc	r24, r27
    1bc4:	bf e0       	ldi	r27, 0x0F	; 15
    1bc6:	9b 07       	cpc	r25, r27
    1bc8:	10 f1       	brcs	.+68     	; 0x1c0e <writeFile+0x72a>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1bca:	6f 3f       	cpi	r22, 0xFF	; 255
    1bcc:	ef ef       	ldi	r30, 0xFF	; 255
    1bce:	7e 07       	cpc	r23, r30
    1bd0:	ef ef       	ldi	r30, 0xFF	; 255
    1bd2:	8e 07       	cpc	r24, r30
    1bd4:	ef e0       	ldi	r30, 0x0F	; 15
    1bd6:	9e 07       	cpc	r25, r30
    1bd8:	b9 f4       	brne	.+46     	; 0x1c08 <writeFile+0x724>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1bda:	c5 01       	movw	r24, r10
    1bdc:	b4 01       	movw	r22, r8
    1bde:	0e 94 a1 03 	call	0x742	; 0x742 <searchNextFreeCluster>
    1be2:	6b 01       	movw	r12, r22
    1be4:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1be6:	c5 01       	movw	r24, r10
    1be8:	b4 01       	movw	r22, r8
    1bea:	41 e0       	ldi	r20, 0x01	; 1
    1bec:	97 01       	movw	r18, r14
    1bee:	86 01       	movw	r16, r12
    1bf0:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1bf4:	c7 01       	movw	r24, r14
    1bf6:	b6 01       	movw	r22, r12
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0f ef       	ldi	r16, 0xFF	; 255
    1bfc:	1f ef       	ldi	r17, 0xFF	; 255
    1bfe:	2f ef       	ldi	r18, 0xFF	; 255
    1c00:	3f e0       	ldi	r19, 0x0F	; 15
    1c02:	0e 94 29 07 	call	0xe52	; 0xe52 <getSetNextCluster>
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <writeFile+0x72a>
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    1c08:	8b e8       	ldi	r24, 0x8B	; 139
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0a c0       	rjmp	.+20     	; 0x1c22 <writeFile+0x73e>
	    return;
    1c0e:	46 01       	movw	r8, r12
    1c10:	57 01       	movw	r10, r14
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1c12:	c1 14       	cp	r12, r1
    1c14:	d1 04       	cpc	r13, r1
    1c16:	e1 04       	cpc	r14, r1
    1c18:	f1 04       	cpc	r15, r1
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <writeFile+0x73a>
    1c1c:	11 cf       	rjmp	.-478    	; 0x1a40 <writeFile+0x55c>
    1c1e:	82 e7       	ldi	r24, 0x72	; 114
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
   
   prevCluster = cluster;
 }
 
 return;
}
    1c26:	27 96       	adiw	r28, 0x07	; 7
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	9f 90       	pop	r9
    1c48:	8f 90       	pop	r8
    1c4a:	7f 90       	pop	r7
    1c4c:	6f 90       	pop	r6
    1c4e:	5f 90       	pop	r5
    1c50:	4f 90       	pop	r4
    1c52:	3f 90       	pop	r3
    1c54:	2f 90       	pop	r2
    1c56:	08 95       	ret

00001c58 <port_init>:
#include "FAT32.h"


void port_init(void)
{
PORTA = 0x00;
    1c58:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    1c5a:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    1c5c:	8f ee       	ldi	r24, 0xEF	; 239
    1c5e:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    1c60:	8f eb       	ldi	r24, 0xBF	; 191
    1c62:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    1c64:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    1c66:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    1c68:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    1c6a:	8e ef       	ldi	r24, 0xFE	; 254
    1c6c:	81 bb       	out	0x11, r24	; 17
}
    1c6e:	08 95       	ret

00001c70 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
    1c70:	f8 94       	cli
#include "FAT32.h"


void port_init(void)
{
PORTA = 0x00;
    1c72:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    1c74:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    1c76:	8f ee       	ldi	r24, 0xEF	; 239
    1c78:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    1c7a:	8f eb       	ldi	r24, 0xBF	; 191
    1c7c:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    1c7e:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    1c80:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    1c82:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    1c84:	8e ef       	ldi	r24, 0xFE	; 254
    1c86:	81 bb       	out	0x11, r24	; 17
//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
 port_init();
 spi_init();
    1c88:	0e 94 12 13 	call	0x2624	; 0x2624 <spi_init>
 uart0_init();
    1c8c:	0e 94 21 13 	call	0x2642	; 0x2642 <uart0_init>

 MCUCR = 0x00;
    1c90:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
    1c92:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
    1c94:	19 be       	out	0x39, r1	; 57
 //all peripherals are now initialized
}
    1c96:	08 95       	ret

00001c98 <main>:

//*************************** MAIN *******************************//
int main(void)
{
    1c98:	af 92       	push	r10
    1c9a:	bf 92       	push	r11
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	2e 97       	sbiw	r28, 0x0e	; 14
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	88 ee       	ldi	r24, 0xE8	; 232
    1cbe:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc0:	28 ec       	ldi	r18, 0xC8	; 200
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	f9 01       	movw	r30, r18
    1cc6:	31 97       	sbiw	r30, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	d9 f7       	brne	.-10     	; 0x1cc4 <main+0x2c>
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    1cce:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <init_devices>

PORTD |= 0x04; //switching ON the LED (for testing purpose only)
    1cd2:	92 9a       	sbi	0x12, 2	; 18

TX_NEWLINE;
    1cd4:	8d e0       	ldi	r24, 0x0D	; 13
    1cd6:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1cda:	8a e0       	ldi	r24, 0x0A	; 10
    1cdc:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
TX_NEWLINE;
    1ce0:	8d e0       	ldi	r24, 0x0D	; 13
    1ce2:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1ce6:	8a e0       	ldi	r24, 0x0A	; 10
    1ce8:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F (PSTR("*********************************************"));
    1cec:	8e ea       	ldi	r24, 0xAE	; 174
    1cee:	94 e0       	ldi	r25, 0x04	; 4
    1cf0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1cf4:	8d e0       	ldi	r24, 0x0D	; 13
    1cf6:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1cfa:	8a e0       	ldi	r24, 0x0A	; 10
    1cfc:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
    1d00:	86 e8       	ldi	r24, 0x86	; 134
    1d02:	94 e0       	ldi	r25, 0x04	; 4
    1d04:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1d08:	8d e0       	ldi	r24, 0x0D	; 13
    1d0a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1d0e:	8a e0       	ldi	r24, 0x0A	; 10
    1d10:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F (PSTR("*********************************************"));
    1d14:	88 e5       	ldi	r24, 0x58	; 88
    1d16:	94 e0       	ldi	r25, 0x04	; 4
    1d18:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1d1c:	8d e0       	ldi	r24, 0x0D	; 13
    1d1e:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1d22:	8a e0       	ldi	r24, 0x0A	; 10
    1d24:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>

cardType = 0;
    1d28:	10 92 ab 02 	sts	0x02AB, r1
    1d2c:	00 e0       	ldi	r16, 0x00	; 0
    1d2e:	10 e0       	ldi	r17, 0x00	; 0

for (i=0; i<10; i++)
{
  error = SD_init();
    1d30:	0e 94 8c 12 	call	0x2518	; 0x2518 <SD_init>
  if(!error) break;
    1d34:	88 23       	and	r24, r24
    1d36:	99 f0       	breq	.+38     	; 0x1d5e <main+0xc6>
transmitString_F (PSTR("*********************************************"));
TX_NEWLINE;

cardType = 0;

for (i=0; i<10; i++)
    1d38:	0f 5f       	subi	r16, 0xFF	; 255
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	0a 30       	cpi	r16, 0x0A	; 10
    1d3e:	11 05       	cpc	r17, r1
    1d40:	b9 f7       	brne	.-18     	; 0x1d30 <main+0x98>
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	29 f4       	brne	.+10     	; 0x1d50 <main+0xb8>
    1d46:	81 e4       	ldi	r24, 0x41	; 65
    1d48:	94 e0       	ldi	r25, 0x04	; 4
    1d4a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    1d4e:	06 c0       	rjmp	.+12     	; 0x1d5c <main+0xc4>
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    1d50:	82 30       	cpi	r24, 0x02	; 2
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <main+0xc4>
    1d54:	84 e2       	ldi	r24, 0x24	; 36
    1d56:	94 e0       	ldi	r25, 0x04	; 4
    1d58:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    1d5c:	ff cf       	rjmp	.-2      	; 0x1d5c <main+0xc4>

  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
    1d5e:	80 91 ab 02 	lds	r24, 0x02AB
    1d62:	82 30       	cpi	r24, 0x02	; 2
    1d64:	39 f0       	breq	.+14     	; 0x1d74 <main+0xdc>
    1d66:	83 30       	cpi	r24, 0x03	; 3
    1d68:	41 f0       	breq	.+16     	; 0x1d7a <main+0xe2>
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	49 f4       	brne	.+18     	; 0x1d80 <main+0xe8>
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    1d6e:	89 ef       	ldi	r24, 0xF9	; 249
    1d70:	93 e0       	ldi	r25, 0x03	; 3
    1d72:	08 c0       	rjmp	.+16     	; 0x1d84 <main+0xec>
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    1d74:	8c ed       	ldi	r24, 0xDC	; 220
    1d76:	93 e0       	ldi	r25, 0x03	; 3
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <main+0xec>
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    1d7a:	81 eb       	ldi	r24, 0xB1	; 177
    1d7c:	93 e0       	ldi	r25, 0x03	; 3
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <main+0xec>
  		 break;
  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    1d80:	87 e9       	ldi	r24, 0x97	; 151
    1d82:	93 e0       	ldi	r25, 0x03	; 3
    1d84:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
  		 break; 
}


SPI_HIGH_SPEED;	//SCK - 4 MHz
    1d88:	80 e5       	ldi	r24, 0x50	; 80
    1d8a:	8d b9       	out	0x0d, r24	; 13
    1d8c:	70 9a       	sbi	0x0e, 0	; 14
    1d8e:	80 ed       	ldi	r24, 0xD0	; 208
    1d90:	97 e0       	ldi	r25, 0x07	; 7
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <main+0xfa>
_delay_ms(1);   //some delay


FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1d96:	0e 94 43 06 	call	0xc86	; 0xc86 <getBootSectorData>
if(error) 	
    1d9a:	88 23       	and	r24, r24
    1d9c:	19 f4       	brne	.+6      	; 0x1da4 <main+0x10c>
    1d9e:	ee 24       	eor	r14, r14
    1da0:	e3 94       	inc	r14
    1da2:	0b c0       	rjmp	.+22     	; 0x1dba <main+0x122>
{
  TX_NEWLINE;
    1da4:	8d e0       	ldi	r24, 0x0D	; 13
    1da6:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1daa:	8a e0       	ldi	r24, 0x0A	; 10
    1dac:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1db0:	86 e8       	ldi	r24, 0x86	; 134
    1db2:	93 e0       	ldi	r25, 0x03	; 3
    1db4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    1db8:	ee 24       	eor	r14, r14

case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
    1dba:	6e 01       	movw	r12, r28
    1dbc:	08 94       	sec
    1dbe:	c1 1c       	adc	r12, r1
    1dc0:	d1 1c       	adc	r13, r1
          for(i=0; i<13; i++)
    1dc2:	ee e0       	ldi	r30, 0x0E	; 14
    1dc4:	ae 2e       	mov	r10, r30
    1dc6:	b1 2c       	mov	r11, r1
    1dc8:	ac 0e       	add	r10, r28
    1dca:	bd 1e       	adc	r11, r29
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    1dcc:	8d e0       	ldi	r24, 0x0D	; 13
    1dce:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1dd2:	8a e0       	ldi	r24, 0x0A	; 10
    1dd4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("Press any key..."));
    1dd8:	85 e7       	ldi	r24, 0x75	; 117
    1dda:	93 e0       	ldi	r25, 0x03	; 3
    1ddc:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1de0:	8d e0       	ldi	r24, 0x0D	; 13
    1de2:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1de6:	8a e0       	ldi	r24, 0x0A	; 10
    1de8:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
option = receiveByte();
    1dec:	0e 94 2b 13 	call	0x2656	; 0x2656 <receiveByte>
TX_NEWLINE;
    1df0:	8d e0       	ldi	r24, 0x0D	; 13
    1df2:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1df6:	8a e0       	ldi	r24, 0x0A	; 10
    1df8:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("> 0 : Erase Blocks"));
    1dfc:	82 e6       	ldi	r24, 0x62	; 98
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1e04:	8d e0       	ldi	r24, 0x0D	; 13
    1e06:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1e0a:	8a e0       	ldi	r24, 0x0A	; 10
    1e0c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("> 1 : Write single Block"));
    1e10:	89 e4       	ldi	r24, 0x49	; 73
    1e12:	93 e0       	ldi	r25, 0x03	; 3
    1e14:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1e18:	8d e0       	ldi	r24, 0x0D	; 13
    1e1a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1e1e:	8a e0       	ldi	r24, 0x0A	; 10
    1e20:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("> 2 : Read single Block"));
    1e24:	81 e3       	ldi	r24, 0x31	; 49
    1e26:	93 e0       	ldi	r25, 0x03	; 3
    1e28:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
transmitString_F(PSTR("> 4 : Read multiple Blocks"));
#endif


TX_NEWLINE;
    1e2c:	8d e0       	ldi	r24, 0x0D	; 13
    1e2e:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1e32:	8a e0       	ldi	r24, 0x0A	; 10
    1e34:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("> 5 : Get file list"));
    1e38:	8d e1       	ldi	r24, 0x1D	; 29
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1e40:	8d e0       	ldi	r24, 0x0D	; 13
    1e42:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1e46:	8a e0       	ldi	r24, 0x0A	; 10
    1e48:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("> 6 : Read File"));
    1e4c:	8d e0       	ldi	r24, 0x0D	; 13
    1e4e:	93 e0       	ldi	r25, 0x03	; 3
    1e50:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1e54:	8d e0       	ldi	r24, 0x0D	; 13
    1e56:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1e5a:	8a e0       	ldi	r24, 0x0A	; 10
    1e5c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("> 7 : Write File"));
    1e60:	8c ef       	ldi	r24, 0xFC	; 252
    1e62:	92 e0       	ldi	r25, 0x02	; 2
    1e64:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1e68:	8d e0       	ldi	r24, 0x0D	; 13
    1e6a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1e6e:	8a e0       	ldi	r24, 0x0A	; 10
    1e70:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("> 8 : Delete File"));
    1e74:	8a ee       	ldi	r24, 0xEA	; 234
    1e76:	92 e0       	ldi	r25, 0x02	; 2
    1e78:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
TX_NEWLINE;
    1e7c:	8d e0       	ldi	r24, 0x0D	; 13
    1e7e:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1e82:	8a e0       	ldi	r24, 0x0A	; 10
    1e84:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("> 9 : Read SD Memory Capacity (Total/Free)"));
    1e88:	8f eb       	ldi	r24, 0xBF	; 191
    1e8a:	92 e0       	ldi	r25, 0x02	; 2
    1e8c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>

TX_NEWLINE;
    1e90:	8d e0       	ldi	r24, 0x0D	; 13
    1e92:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1e96:	8a e0       	ldi	r24, 0x0A	; 10
    1e98:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
TX_NEWLINE;
    1e9c:	8d e0       	ldi	r24, 0x0D	; 13
    1e9e:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1ea2:	8a e0       	ldi	r24, 0x0A	; 10
    1ea4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("> Select Option (0-9): "));
    1ea8:	87 ea       	ldi	r24, 0xA7	; 167
    1eaa:	92 e0       	ldi	r25, 0x02	; 2
    1eac:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>

/*WARNING: If option 0, 1 or 3 is selected, the card may not be detected by PC/Laptop again,
as it disturbs the FAT format, and you may have to format it again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    1eb0:	0e 94 2b 13 	call	0x2656	; 0x2656 <receiveByte>
    1eb4:	f8 2e       	mov	r15, r24
transmitByte(option);
    1eb6:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    1eba:	8f 2d       	mov	r24, r15
    1ebc:	85 53       	subi	r24, 0x35	; 53
    1ebe:	85 30       	cpi	r24, 0x05	; 5
    1ec0:	98 f4       	brcc	.+38     	; 0x1ee8 <main+0x250>
{
  if(!FAT32_active) 
    1ec2:	ee 20       	and	r14, r14
    1ec4:	89 f4       	brne	.+34     	; 0x1ee8 <main+0x250>
  {
    TX_NEWLINE;
    1ec6:	8d e0       	ldi	r24, 0x0D	; 13
    1ec8:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1ecc:	8a e0       	ldi	r24, 0x0A	; 10
    1ece:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    TX_NEWLINE;
    1ed2:	8d e0       	ldi	r24, 0x0D	; 13
    1ed4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1ed8:	8a e0       	ldi	r24, 0x0A	; 10
    1eda:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
	transmitString_F(PSTR("FAT32 options disabled!"));
    1ede:	8f e8       	ldi	r24, 0x8F	; 143
    1ee0:	92 e0       	ldi	r25, 0x02	; 2
    1ee2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    1ee6:	72 cf       	rjmp	.-284    	; 0x1dcc <main+0x134>
	continue;
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    1ee8:	8f 2d       	mov	r24, r15
    1eea:	80 53       	subi	r24, 0x30	; 48
    1eec:	85 30       	cpi	r24, 0x05	; 5
    1eee:	08 f0       	brcs	.+2      	; 0x1ef2 <main+0x25a>
    1ef0:	a2 c0       	rjmp	.+324    	; 0x2036 <main+0x39e>
{
TX_NEWLINE;
    1ef2:	8d e0       	ldi	r24, 0x0D	; 13
    1ef4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1ef8:	8a e0       	ldi	r24, 0x0A	; 10
    1efa:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
TX_NEWLINE;
    1efe:	8d e0       	ldi	r24, 0x0D	; 13
    1f00:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    1f04:	8a e0       	ldi	r24, 0x0A	; 10
    1f06:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    1f0a:	8b e6       	ldi	r24, 0x6B	; 107
    1f0c:	92 e0       	ldi	r25, 0x02	; 2
    1f0e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
data = receiveByte(); transmitByte(data);
    1f12:	0e 94 2b 13 	call	0x2656	; 0x2656 <receiveByte>
    1f16:	08 2f       	mov	r16, r24
    1f18:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
startBlock = (data & 0x0f) * 1000;
    1f1c:	10 e0       	ldi	r17, 0x00	; 0
    1f1e:	0f 70       	andi	r16, 0x0F	; 15
    1f20:	10 70       	andi	r17, 0x00	; 0
    1f22:	88 ee       	ldi	r24, 0xE8	; 232
    1f24:	93 e0       	ldi	r25, 0x03	; 3
    1f26:	9c 01       	movw	r18, r24
    1f28:	02 9f       	mul	r16, r18
    1f2a:	c0 01       	movw	r24, r0
    1f2c:	03 9f       	mul	r16, r19
    1f2e:	90 0d       	add	r25, r0
    1f30:	12 9f       	mul	r17, r18
    1f32:	90 0d       	add	r25, r0
    1f34:	11 24       	eor	r1, r1
    1f36:	aa 27       	eor	r26, r26
    1f38:	97 fd       	sbrc	r25, 7
    1f3a:	a0 95       	com	r26
    1f3c:	ba 2f       	mov	r27, r26
    1f3e:	80 93 96 00 	sts	0x0096, r24
    1f42:	90 93 97 00 	sts	0x0097, r25
    1f46:	a0 93 98 00 	sts	0x0098, r26
    1f4a:	b0 93 99 00 	sts	0x0099, r27
data = receiveByte(); transmitByte(data);
    1f4e:	0e 94 2b 13 	call	0x2656	; 0x2656 <receiveByte>
    1f52:	08 2f       	mov	r16, r24
    1f54:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
startBlock += (data & 0x0f) * 100;
    1f58:	20 91 96 00 	lds	r18, 0x0096
    1f5c:	30 91 97 00 	lds	r19, 0x0097
    1f60:	40 91 98 00 	lds	r20, 0x0098
    1f64:	50 91 99 00 	lds	r21, 0x0099
    1f68:	10 e0       	ldi	r17, 0x00	; 0
    1f6a:	0f 70       	andi	r16, 0x0F	; 15
    1f6c:	10 70       	andi	r17, 0x00	; 0
    1f6e:	84 e6       	ldi	r24, 0x64	; 100
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	bc 01       	movw	r22, r24
    1f74:	06 9f       	mul	r16, r22
    1f76:	c0 01       	movw	r24, r0
    1f78:	07 9f       	mul	r16, r23
    1f7a:	90 0d       	add	r25, r0
    1f7c:	16 9f       	mul	r17, r22
    1f7e:	90 0d       	add	r25, r0
    1f80:	11 24       	eor	r1, r1
    1f82:	aa 27       	eor	r26, r26
    1f84:	97 fd       	sbrc	r25, 7
    1f86:	a0 95       	com	r26
    1f88:	ba 2f       	mov	r27, r26
    1f8a:	82 0f       	add	r24, r18
    1f8c:	93 1f       	adc	r25, r19
    1f8e:	a4 1f       	adc	r26, r20
    1f90:	b5 1f       	adc	r27, r21
    1f92:	80 93 96 00 	sts	0x0096, r24
    1f96:	90 93 97 00 	sts	0x0097, r25
    1f9a:	a0 93 98 00 	sts	0x0098, r26
    1f9e:	b0 93 99 00 	sts	0x0099, r27
data = receiveByte(); transmitByte(data);
    1fa2:	0e 94 2b 13 	call	0x2656	; 0x2656 <receiveByte>
    1fa6:	08 2f       	mov	r16, r24
    1fa8:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
startBlock += (data & 0x0f) * 10;
    1fac:	20 91 96 00 	lds	r18, 0x0096
    1fb0:	30 91 97 00 	lds	r19, 0x0097
    1fb4:	40 91 98 00 	lds	r20, 0x0098
    1fb8:	50 91 99 00 	lds	r21, 0x0099
    1fbc:	10 e0       	ldi	r17, 0x00	; 0
    1fbe:	0f 70       	andi	r16, 0x0F	; 15
    1fc0:	10 70       	andi	r17, 0x00	; 0
    1fc2:	c8 01       	movw	r24, r16
    1fc4:	73 e0       	ldi	r23, 0x03	; 3
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	7a 95       	dec	r23
    1fcc:	e1 f7       	brne	.-8      	; 0x1fc6 <main+0x32e>
    1fce:	00 0f       	add	r16, r16
    1fd0:	11 1f       	adc	r17, r17
    1fd2:	80 0f       	add	r24, r16
    1fd4:	91 1f       	adc	r25, r17
    1fd6:	aa 27       	eor	r26, r26
    1fd8:	97 fd       	sbrc	r25, 7
    1fda:	a0 95       	com	r26
    1fdc:	ba 2f       	mov	r27, r26
    1fde:	82 0f       	add	r24, r18
    1fe0:	93 1f       	adc	r25, r19
    1fe2:	a4 1f       	adc	r26, r20
    1fe4:	b5 1f       	adc	r27, r21
    1fe6:	80 93 96 00 	sts	0x0096, r24
    1fea:	90 93 97 00 	sts	0x0097, r25
    1fee:	a0 93 98 00 	sts	0x0098, r26
    1ff2:	b0 93 99 00 	sts	0x0099, r27
data = receiveByte(); transmitByte(data);
    1ff6:	0e 94 2b 13 	call	0x2656	; 0x2656 <receiveByte>
    1ffa:	18 2f       	mov	r17, r24
    1ffc:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
startBlock += (data & 0x0f);
    2000:	80 91 96 00 	lds	r24, 0x0096
    2004:	90 91 97 00 	lds	r25, 0x0097
    2008:	a0 91 98 00 	lds	r26, 0x0098
    200c:	b0 91 99 00 	lds	r27, 0x0099
    2010:	1f 70       	andi	r17, 0x0F	; 15
    2012:	81 0f       	add	r24, r17
    2014:	91 1d       	adc	r25, r1
    2016:	a1 1d       	adc	r26, r1
    2018:	b1 1d       	adc	r27, r1
    201a:	80 93 96 00 	sts	0x0096, r24
    201e:	90 93 97 00 	sts	0x0097, r25
    2022:	a0 93 98 00 	sts	0x0098, r26
    2026:	b0 93 99 00 	sts	0x0099, r27
TX_NEWLINE;
    202a:	8d e0       	ldi	r24, 0x0D	; 13
    202c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    2030:	8a e0       	ldi	r24, 0x0A	; 10
    2032:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
}

totalBlocks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 e0       	ldi	r26, 0x00	; 0
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	80 93 a1 02 	sts	0x02A1, r24
    2042:	90 93 a2 02 	sts	0x02A2, r25
    2046:	a0 93 a3 02 	sts	0x02A3, r26
    204a:	b0 93 a4 02 	sts	0x02A4, r27
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    204e:	75 e3       	ldi	r23, 0x35	; 53
    2050:	f7 16       	cp	r15, r23
    2052:	09 f4       	brne	.+2      	; 0x2056 <main+0x3be>
    2054:	ba c0       	rjmp	.+372    	; 0x21ca <main+0x532>
    2056:	7f 15       	cp	r23, r15
    2058:	60 f0       	brcs	.+24     	; 0x2072 <main+0x3da>
    205a:	81 e3       	ldi	r24, 0x31	; 49
    205c:	f8 16       	cp	r15, r24
    205e:	99 f1       	breq	.+102    	; 0x20c6 <main+0x42e>
    2060:	22 e3       	ldi	r18, 0x32	; 50
    2062:	f2 16       	cp	r15, r18
    2064:	09 f4       	brne	.+2      	; 0x2068 <main+0x3d0>
    2066:	7b c0       	rjmp	.+246    	; 0x215e <main+0x4c6>
    2068:	30 e3       	ldi	r19, 0x30	; 48
    206a:	f3 16       	cp	r15, r19
    206c:	09 f0       	breq	.+2      	; 0x2070 <main+0x3d8>
    206e:	19 c1       	rjmp	.+562    	; 0x22a2 <main+0x60a>
    2070:	09 c0       	rjmp	.+18     	; 0x2084 <main+0x3ec>
    2072:	68 e3       	ldi	r22, 0x38	; 56
    2074:	6f 15       	cp	r22, r15
    2076:	08 f0       	brcs	.+2      	; 0x207a <main+0x3e2>
    2078:	b4 c0       	rjmp	.+360    	; 0x21e2 <main+0x54a>
    207a:	79 e3       	ldi	r23, 0x39	; 57
    207c:	f7 16       	cp	r15, r23
    207e:	09 f0       	breq	.+2      	; 0x2082 <main+0x3ea>
    2080:	10 c1       	rjmp	.+544    	; 0x22a2 <main+0x60a>
    2082:	0c c1       	rjmp	.+536    	; 0x229c <main+0x604>
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    2084:	60 91 96 00 	lds	r22, 0x0096
    2088:	70 91 97 00 	lds	r23, 0x0097
    208c:	80 91 98 00 	lds	r24, 0x0098
    2090:	90 91 99 00 	lds	r25, 0x0099
    2094:	20 91 a1 02 	lds	r18, 0x02A1
    2098:	30 91 a2 02 	lds	r19, 0x02A2
    209c:	40 91 a3 02 	lds	r20, 0x02A3
    20a0:	50 91 a4 02 	lds	r21, 0x02A4
    20a4:	0e 94 da 11 	call	0x23b4	; 0x23b4 <SD_erase>
    20a8:	18 2f       	mov	r17, r24
          TX_NEWLINE;
    20aa:	8d e0       	ldi	r24, 0x0D	; 13
    20ac:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    20b0:	8a e0       	ldi	r24, 0x0A	; 10
    20b2:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
          if(error)
    20b6:	11 23       	and	r17, r17
    20b8:	19 f0       	breq	.+6      	; 0x20c0 <main+0x428>
              transmitString_F(PSTR("Erase failed.."));
    20ba:	8c e5       	ldi	r24, 0x5C	; 92
    20bc:	92 e0       	ldi	r25, 0x02	; 2
    20be:	49 c0       	rjmp	.+146    	; 0x2152 <main+0x4ba>
          else
              transmitString_F(PSTR("Erased!"));
    20c0:	84 e5       	ldi	r24, 0x54	; 84
    20c2:	92 e0       	ldi	r25, 0x02	; 2
    20c4:	46 c0       	rjmp	.+140    	; 0x2152 <main+0x4ba>
          break;

case '1': TX_NEWLINE;
    20c6:	8d e0       	ldi	r24, 0x0D	; 13
    20c8:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    20cc:	8a e0       	ldi	r24, 0x0A	; 10
    20ce:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    20d2:	8a e3       	ldi	r24, 0x3A	; 58
    20d4:	92 e0       	ldi	r25, 0x02	; 2
    20d6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    20da:	00 e0       	ldi	r16, 0x00	; 0
    20dc:	10 e0       	ldi	r17, 0x00	; 0
          i=0;
            do
            {
                data = receiveByte();
    20de:	0e 94 2b 13 	call	0x2656	; 0x2656 <receiveByte>
    20e2:	f8 2e       	mov	r15, r24
                transmitByte(data);
    20e4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
                buffer[i++] = data;
    20e8:	f8 01       	movw	r30, r16
    20ea:	e6 56       	subi	r30, 0x66	; 102
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	f0 82       	st	Z, r15
    20f0:	0f 5f       	subi	r16, 0xFF	; 255
    20f2:	1f 4f       	sbci	r17, 0xFF	; 255
                if(data == 0x0d)
    20f4:	8d e0       	ldi	r24, 0x0D	; 13
    20f6:	f8 16       	cp	r15, r24
    20f8:	51 f4       	brne	.+20     	; 0x210e <main+0x476>
                {
                    transmitByte(0x0a);
    20fa:	8a e0       	ldi	r24, 0x0A	; 10
    20fc:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
                    buffer[i++] = 0x0a;
    2100:	f8 01       	movw	r30, r16
    2102:	e6 56       	subi	r30, 0x66	; 102
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	8a e0       	ldi	r24, 0x0A	; 10
    2108:	80 83       	st	Z, r24
    210a:	0f 5f       	subi	r16, 0xFF	; 255
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
                }
                if(i == 512) break;
    210e:	22 e0       	ldi	r18, 0x02	; 2
    2110:	00 30       	cpi	r16, 0x00	; 0
    2112:	12 07       	cpc	r17, r18
    2114:	19 f0       	breq	.+6      	; 0x211c <main+0x484>
            }while (data != '~');
    2116:	3e e7       	ldi	r19, 0x7E	; 126
    2118:	f3 16       	cp	r15, r19
    211a:	09 f7       	brne	.-62     	; 0x20de <main+0x446>

            error = SD_writeSingleBlock (startBlock);
    211c:	60 91 96 00 	lds	r22, 0x0096
    2120:	70 91 97 00 	lds	r23, 0x0097
    2124:	80 91 98 00 	lds	r24, 0x0098
    2128:	90 91 99 00 	lds	r25, 0x0099
    212c:	0e 94 0d 12 	call	0x241a	; 0x241a <SD_writeSingleBlock>
    2130:	18 2f       	mov	r17, r24
            TX_NEWLINE;
    2132:	8d e0       	ldi	r24, 0x0D	; 13
    2134:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    2138:	8a e0       	ldi	r24, 0x0A	; 10
    213a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
            TX_NEWLINE;
    213e:	8d e0       	ldi	r24, 0x0D	; 13
    2140:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    2144:	8a e0       	ldi	r24, 0x0A	; 10
    2146:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
            if(error)
    214a:	11 23       	and	r17, r17
    214c:	29 f0       	breq	.+10     	; 0x2158 <main+0x4c0>
                transmitString_F(PSTR("Write failed.."));
    214e:	8b e2       	ldi	r24, 0x2B	; 43
    2150:	92 e0       	ldi	r25, 0x02	; 2
    2152:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    2156:	bb c0       	rjmp	.+374    	; 0x22ce <main+0x636>
            else
                transmitString_F(PSTR("Write successful!"));
    2158:	89 e1       	ldi	r24, 0x19	; 25
    215a:	92 e0       	ldi	r25, 0x02	; 2
    215c:	fa cf       	rjmp	.-12     	; 0x2152 <main+0x4ba>
            break;

case '2': error = SD_readSingleBlock (startBlock);
    215e:	60 91 96 00 	lds	r22, 0x0096
    2162:	70 91 97 00 	lds	r23, 0x0097
    2166:	80 91 98 00 	lds	r24, 0x0098
    216a:	90 91 99 00 	lds	r25, 0x0099
    216e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <SD_readSingleBlock>
    2172:	18 2f       	mov	r17, r24
          TX_NEWLINE;
    2174:	8d e0       	ldi	r24, 0x0D	; 13
    2176:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    217a:	8a e0       	ldi	r24, 0x0A	; 10
    217c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
          if(error)
    2180:	11 23       	and	r17, r17
    2182:	19 f0       	breq	.+6      	; 0x218a <main+0x4f2>
            transmitString_F(PSTR("Read failed.."));
    2184:	8b e0       	ldi	r24, 0x0B	; 11
    2186:	92 e0       	ldi	r25, 0x02	; 2
    2188:	e4 cf       	rjmp	.-56     	; 0x2152 <main+0x4ba>
    218a:	00 e0       	ldi	r16, 0x00	; 0
    218c:	10 e0       	ldi	r17, 0x00	; 0
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    218e:	f8 01       	movw	r30, r16
    2190:	e6 56       	subi	r30, 0x66	; 102
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	80 81       	ld	r24, Z
    2196:	8e 37       	cpi	r24, 0x7E	; 126
    2198:	49 f0       	breq	.+18     	; 0x21ac <main+0x514>
                transmitByte(buffer[i]);
    219a:	80 81       	ld	r24, Z
    219c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    21a0:	0f 5f       	subi	r16, 0xFF	; 255
    21a2:	1f 4f       	sbci	r17, 0xFF	; 255
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	00 30       	cpi	r16, 0x00	; 0
    21a8:	16 07       	cpc	r17, r22
    21aa:	89 f7       	brne	.-30     	; 0x218e <main+0x4f6>
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    21ac:	8d e0       	ldi	r24, 0x0D	; 13
    21ae:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    21b2:	8a e0       	ldi	r24, 0x0A	; 10
    21b4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
            TX_NEWLINE;
    21b8:	8d e0       	ldi	r24, 0x0D	; 13
    21ba:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    21be:	8a e0       	ldi	r24, 0x0A	; 10
    21c0:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    21c4:	8a ef       	ldi	r24, 0xFA	; 250
    21c6:	91 e0       	ldi	r25, 0x01	; 1
    21c8:	c4 cf       	rjmp	.-120    	; 0x2152 <main+0x4ba>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    21ca:	8d e0       	ldi	r24, 0x0D	; 13
    21cc:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    21d0:	8a e0       	ldi	r24, 0x0A	; 10
    21d2:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
  		  findFiles(GET_LIST,0);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <findFiles>
    21e0:	76 c0       	rjmp	.+236    	; 0x22ce <main+0x636>
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    21e2:	8d e0       	ldi	r24, 0x0D	; 13
    21e4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    21e8:	8a e0       	ldi	r24, 0x0A	; 10
    21ea:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
		  TX_NEWLINE;
    21ee:	8d e0       	ldi	r24, 0x0D	; 13
    21f0:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    21f4:	8a e0       	ldi	r24, 0x0A	; 10
    21f6:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
          transmitString_F(PSTR("Enter file name: "));
    21fa:	88 ee       	ldi	r24, 0xE8	; 232
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
    2202:	f6 01       	movw	r30, r12
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    2204:	11 92       	st	Z+, r1
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    2206:	ea 15       	cp	r30, r10
    2208:	fb 05       	cpc	r31, r11
    220a:	e1 f7       	brne	.-8      	; 0x2204 <main+0x56c>
    220c:	00 e0       	ldi	r16, 0x00	; 0
    220e:	10 e0       	ldi	r17, 0x00	; 0
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    2210:	0e 94 2b 13 	call	0x2656	; 0x2656 <receiveByte>
    2214:	98 2f       	mov	r25, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    2216:	8d 30       	cpi	r24, 0x0D	; 13
    2218:	29 f1       	breq	.+74     	; 0x2264 <main+0x5cc>
			if(data == 0x08)	//'Back Space' key pressed
    221a:	88 30       	cpi	r24, 0x08	; 8
    221c:	79 f4       	brne	.+30     	; 0x223c <main+0x5a4>
	 		{ 
	   			if(i != 0)
    221e:	01 15       	cp	r16, r1
    2220:	11 05       	cpc	r17, r1
    2222:	b1 f3       	breq	.-20     	; 0x2210 <main+0x578>
	   			{ 
	     			transmitByte(data);
    2224:	88 e0       	ldi	r24, 0x08	; 8
    2226:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
					transmitByte(' '); 
    222a:	80 e2       	ldi	r24, 0x20	; 32
    222c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
	     			transmitByte(data); 
    2230:	88 e0       	ldi	r24, 0x08	; 8
    2232:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
	     			i--; 
    2236:	01 50       	subi	r16, 0x01	; 1
    2238:	10 40       	sbci	r17, 0x00	; 0
    223a:	ea cf       	rjmp	.-44     	; 0x2210 <main+0x578>
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    223c:	80 52       	subi	r24, 0x20	; 32
    223e:	8f 35       	cpi	r24, 0x5F	; 95
    2240:	38 f7       	brcc	.-50     	; 0x2210 <main+0x578>
			transmitByte(data);
    2242:	89 2f       	mov	r24, r25
    2244:	9e 87       	std	Y+14, r25	; 0x0e
    2246:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
            fileName[i++] = data;
    224a:	f6 01       	movw	r30, r12
    224c:	e0 0f       	add	r30, r16
    224e:	f1 1f       	adc	r31, r17
    2250:	9e 85       	ldd	r25, Y+14	; 0x0e
    2252:	90 83       	st	Z, r25
    2254:	0f 5f       	subi	r16, 0xFF	; 255
    2256:	1f 4f       	sbci	r17, 0xFF	; 255
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    2258:	0d 30       	cpi	r16, 0x0D	; 13
    225a:	11 05       	cpc	r17, r1
    225c:	c9 f6       	brne	.-78     	; 0x2210 <main+0x578>
    225e:	82 ed       	ldi	r24, 0xD2	; 210
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	77 cf       	rjmp	.-274    	; 0x2152 <main+0x4ba>
          }
          if(i>12) break;
    2264:	0d 30       	cpi	r16, 0x0D	; 13
    2266:	11 05       	cpc	r17, r1
    2268:	90 f5       	brcc	.+100    	; 0x22ce <main+0x636>
       
	      TX_NEWLINE;
    226a:	8d e0       	ldi	r24, 0x0D	; 13
    226c:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    2270:	8a e0       	ldi	r24, 0x0A	; 10
    2272:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
		  if(option == '6')
    2276:	76 e3       	ldi	r23, 0x36	; 54
    2278:	f7 16       	cp	r15, r23
    227a:	29 f4       	brne	.+10     	; 0x2286 <main+0x5ee>
		     readFile( READ, fileName);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	b6 01       	movw	r22, r12
    2280:	0e 94 a1 09 	call	0x1342	; 0x1342 <readFile>
    2284:	24 c0       	rjmp	.+72     	; 0x22ce <main+0x636>
		  if(option == '7')
    2286:	87 e3       	ldi	r24, 0x37	; 55
    2288:	f8 16       	cp	r15, r24
    228a:	21 f4       	brne	.+8      	; 0x2294 <main+0x5fc>
		  	 writeFile(fileName);
    228c:	c6 01       	movw	r24, r12
    228e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <writeFile>
    2292:	1d c0       	rjmp	.+58     	; 0x22ce <main+0x636>
 		  if(option == '8')
		     deleteFile(fileName);
    2294:	c6 01       	movw	r24, r12
    2296:	0e 94 93 09 	call	0x1326	; 0x1326 <deleteFile>
    229a:	19 c0       	rjmp	.+50     	; 0x22ce <main+0x636>
          break;

case '9': memoryStatistics();
    229c:	0e 94 13 05 	call	0xa26	; 0xa26 <memoryStatistics>
    22a0:	16 c0       	rjmp	.+44     	; 0x22ce <main+0x636>
          break;

default: TX_NEWLINE;
    22a2:	8d e0       	ldi	r24, 0x0D	; 13
    22a4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    22a8:	8a e0       	ldi	r24, 0x0A	; 10
    22aa:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
         TX_NEWLINE;
    22ae:	8d e0       	ldi	r24, 0x0D	; 13
    22b0:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    22b4:	8a e0       	ldi	r24, 0x0A	; 10
    22b6:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
         transmitString_F(PSTR(" Invalid option!"));
    22ba:	81 ec       	ldi	r24, 0xC1	; 193
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	0e 94 7e 13 	call	0x26fc	; 0x26fc <transmitString_F>
         TX_NEWLINE;
    22c2:	8d e0       	ldi	r24, 0x0D	; 13
    22c4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    22c8:	8a e0       	ldi	r24, 0x0A	; 10
    22ca:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
}

TX_NEWLINE;
    22ce:	8d e0       	ldi	r24, 0x0D	; 13
    22d0:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    22d4:	8a e0       	ldi	r24, 0x0A	; 10
    22d6:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    22da:	78 cd       	rjmp	.-1296   	; 0x1dcc <main+0x134>

000022dc <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    22dc:	df 92       	push	r13
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	d8 2e       	mov	r13, r24
    22e8:	7a 01       	movw	r14, r20
    22ea:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    22ec:	80 91 a0 02 	lds	r24, 0x02A0
    22f0:	88 23       	and	r24, r24
    22f2:	b9 f4       	brne	.+46     	; 0x2322 <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
    22f4:	8d 2d       	mov	r24, r13
    22f6:	81 51       	subi	r24, 0x11	; 17
    22f8:	82 30       	cpi	r24, 0x02	; 2
    22fa:	60 f0       	brcs	.+24     	; 0x2314 <SD_sendCommand+0x38>
    22fc:	88 e1       	ldi	r24, 0x18	; 24
    22fe:	d8 16       	cp	r13, r24
    2300:	49 f0       	breq	.+18     	; 0x2314 <SD_sendCommand+0x38>
    2302:	89 e1       	ldi	r24, 0x19	; 25
    2304:	d8 16       	cp	r13, r24
    2306:	31 f0       	breq	.+12     	; 0x2314 <SD_sendCommand+0x38>
    2308:	80 e2       	ldi	r24, 0x20	; 32
    230a:	d8 16       	cp	r13, r24
    230c:	19 f0       	breq	.+6      	; 0x2314 <SD_sendCommand+0x38>
    230e:	81 e2       	ldi	r24, 0x21	; 33
    2310:	d8 16       	cp	r13, r24
    2312:	39 f4       	brne	.+14     	; 0x2322 <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    2314:	39 e0       	ldi	r19, 0x09	; 9
    2316:	ee 0c       	add	r14, r14
    2318:	ff 1c       	adc	r15, r15
    231a:	00 1f       	adc	r16, r16
    231c:	11 1f       	adc	r17, r17
    231e:	3a 95       	dec	r19
    2320:	d1 f7       	brne	.-12     	; 0x2316 <SD_sendCommand+0x3a>
   }	   

SD_CS_ASSERT;
    2322:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    2324:	8d 2d       	mov	r24, r13
    2326:	80 64       	ori	r24, 0x40	; 64
    2328:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
SPI_transmit(arg>>24);
    232c:	81 2f       	mov	r24, r17
    232e:	99 27       	eor	r25, r25
    2330:	aa 27       	eor	r26, r26
    2332:	bb 27       	eor	r27, r27
    2334:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
SPI_transmit(arg>>16);
    2338:	c8 01       	movw	r24, r16
    233a:	aa 27       	eor	r26, r26
    233c:	bb 27       	eor	r27, r27
    233e:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
SPI_transmit(arg>>8);
    2342:	bb 27       	eor	r27, r27
    2344:	a1 2f       	mov	r26, r17
    2346:	90 2f       	mov	r25, r16
    2348:	8f 2d       	mov	r24, r15
    234a:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
SPI_transmit(arg);
    234e:	8e 2d       	mov	r24, r14
    2350:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    2354:	88 e0       	ldi	r24, 0x08	; 8
    2356:	d8 16       	cp	r13, r24
    2358:	11 f4       	brne	.+4      	; 0x235e <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    235a:	87 e8       	ldi	r24, 0x87	; 135
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
    235e:	85 e9       	ldi	r24, 0x95	; 149
    2360:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    2364:	10 e0       	ldi	r17, 0x00	; 0
    2366:	02 c0       	rjmp	.+4      	; 0x236c <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
    2368:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    236a:	d1 f0       	breq	.+52     	; 0x23a0 <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    236c:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
    2370:	08 2f       	mov	r16, r24
    2372:	8f 3f       	cpi	r24, 0xFF	; 255
    2374:	c9 f3       	breq	.-14     	; 0x2368 <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    2376:	88 23       	and	r24, r24
    2378:	99 f4       	brne	.+38     	; 0x23a0 <SD_sendCommand+0xc4>
    237a:	8a e3       	ldi	r24, 0x3A	; 58
    237c:	d8 16       	cp	r13, r24
    237e:	81 f4       	brne	.+32     	; 0x23a0 <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    2380:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    2384:	86 ff       	sbrs	r24, 6
    2386:	04 c0       	rjmp	.+8      	; 0x2390 <SD_sendCommand+0xb4>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	80 93 a0 02 	sts	0x02A0, r24
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
    2390:	10 92 a0 02 	sts	0x02A0, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    2394:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    2398:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
  SPI_receive(); 
    239c:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
}

SPI_receive(); //extra 8 CLK
    23a0:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
SD_CS_DEASSERT;
    23a4:	c1 9a       	sbi	0x18, 1	; 24

return response; //return state
}
    23a6:	80 2f       	mov	r24, r16
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	ff 90       	pop	r15
    23ae:	ef 90       	pop	r14
    23b0:	df 90       	pop	r13
    23b2:	08 95       	ret

000023b4 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    23b4:	af 92       	push	r10
    23b6:	bf 92       	push	r11
    23b8:	cf 92       	push	r12
    23ba:	df 92       	push	r13
    23bc:	ef 92       	push	r14
    23be:	ff 92       	push	r15
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	7b 01       	movw	r14, r22
    23c6:	8c 01       	movw	r16, r24
    23c8:	59 01       	movw	r10, r18
    23ca:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    23cc:	80 e2       	ldi	r24, 0x20	; 32
    23ce:	b8 01       	movw	r22, r16
    23d0:	a7 01       	movw	r20, r14
    23d2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    23d6:	88 23       	and	r24, r24
    23d8:	b9 f4       	brne	.+46     	; 0x2408 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    23da:	08 94       	sec
    23dc:	e1 08       	sbc	r14, r1
    23de:	f1 08       	sbc	r15, r1
    23e0:	01 09       	sbc	r16, r1
    23e2:	11 09       	sbc	r17, r1
    23e4:	ea 0c       	add	r14, r10
    23e6:	fb 1c       	adc	r15, r11
    23e8:	0c 1d       	adc	r16, r12
    23ea:	1d 1d       	adc	r17, r13
    23ec:	81 e2       	ldi	r24, 0x21	; 33
    23ee:	b8 01       	movw	r22, r16
    23f0:	a7 01       	movw	r20, r14
    23f2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>
if(response != 0x00)
    23f6:	88 23       	and	r24, r24
    23f8:	39 f4       	brne	.+14     	; 0x2408 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    23fa:	86 e2       	ldi	r24, 0x26	; 38
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	bf 90       	pop	r11
    2416:	af 90       	pop	r10
    2418:	08 95       	ret

0000241a <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	ab 01       	movw	r20, r22
    2420:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    2422:	88 e1       	ldi	r24, 0x18	; 24
    2424:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2428:	88 23       	and	r24, r24
    242a:	11 f0       	breq	.+4      	; 0x2430 <SD_writeSingleBlock+0x16>
    242c:	98 2f       	mov	r25, r24
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
    2430:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2432:	8e ef       	ldi	r24, 0xFE	; 254
    2434:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
    2438:	c0 e0       	ldi	r28, 0x00	; 0
    243a:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
    243c:	fe 01       	movw	r30, r28
    243e:	e6 56       	subi	r30, 0x66	; 102
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    2448:	21 96       	adiw	r28, 0x01	; 1
    244a:	82 e0       	ldi	r24, 0x02	; 2
    244c:	c0 30       	cpi	r28, 0x00	; 0
    244e:	d8 07       	cpc	r29, r24
    2450:	a9 f7       	brne	.-22     	; 0x243c <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    2452:	8f ef       	ldi	r24, 0xFF	; 255
    2454:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
SPI_transmit(0xff);
    2458:	8f ef       	ldi	r24, 0xFF	; 255
    245a:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>

response = SPI_receive();
    245e:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
    2462:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2464:	8f 71       	andi	r24, 0x1F	; 31
    2466:	85 30       	cpi	r24, 0x05	; 5
    2468:	41 f0       	breq	.+16     	; 0x247a <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    246a:	c1 9a       	sbi	0x18, 1	; 24
    246c:	20 c0       	rjmp	.+64     	; 0x24ae <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    246e:	8f ef       	ldi	r24, 0xFF	; 255
    2470:	cf 3f       	cpi	r28, 0xFF	; 255
    2472:	d8 07       	cpc	r29, r24
    2474:	91 f0       	breq	.+36     	; 0x249a <SD_writeSingleBlock+0x80>
    2476:	21 96       	adiw	r28, 0x01	; 1
    2478:	02 c0       	rjmp	.+4      	; 0x247e <SD_writeSingleBlock+0x64>
    247a:	c0 e0       	ldi	r28, 0x00	; 0
    247c:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    247e:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
    2482:	88 23       	and	r24, r24
    2484:	a1 f3       	breq	.-24     	; 0x246e <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    2486:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    2488:	8f ef       	ldi	r24, 0xFF	; 255
    248a:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    248e:	c1 98       	cbi	0x18, 1	; 24
    2490:	08 c0       	rjmp	.+16     	; 0x24a2 <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2492:	8f ef       	ldi	r24, 0xFF	; 255
    2494:	cf 3f       	cpi	r28, 0xFF	; 255
    2496:	d8 07       	cpc	r29, r24
    2498:	19 f4       	brne	.+6      	; 0x24a0 <SD_writeSingleBlock+0x86>
    249a:	c1 9a       	sbi	0x18, 1	; 24
    249c:	91 e0       	ldi	r25, 0x01	; 1
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <SD_writeSingleBlock+0x94>
    24a0:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    24a2:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
    24a6:	88 23       	and	r24, r24
    24a8:	a1 f3       	breq	.-24     	; 0x2492 <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    24aa:	c1 9a       	sbi	0x18, 1	; 24
    24ac:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
    24ae:	89 2f       	mov	r24, r25
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	08 95       	ret

000024b6 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	ab 01       	movw	r20, r22
    24be:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    24c0:	81 e1       	ldi	r24, 0x11	; 17
    24c2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>
    24c6:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    24c8:	88 23       	and	r24, r24
    24ca:	09 f5       	brne	.+66     	; 0x250e <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
    24cc:	c1 98       	cbi	0x18, 1	; 24
    24ce:	c0 e0       	ldi	r28, 0x00	; 0
    24d0:	d0 e0       	ldi	r29, 0x00	; 0
    24d2:	05 c0       	rjmp	.+10     	; 0x24de <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    24d4:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    24d6:	19 f4       	brne	.+6      	; 0x24de <SD_readSingleBlock+0x28>
    24d8:	c1 9a       	sbi	0x18, 1	; 24
    24da:	11 e0       	ldi	r17, 0x01	; 1
    24dc:	18 c0       	rjmp	.+48     	; 0x250e <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    24de:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
    24e2:	8e 3f       	cpi	r24, 0xFE	; 254
    24e4:	b9 f7       	brne	.-18     	; 0x24d4 <SD_readSingleBlock+0x1e>
    24e6:	c0 e0       	ldi	r28, 0x00	; 0
    24e8:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    24ea:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
    24ee:	fe 01       	movw	r30, r28
    24f0:	e6 56       	subi	r30, 0x66	; 102
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    24f6:	21 96       	adiw	r28, 0x01	; 1
    24f8:	82 e0       	ldi	r24, 0x02	; 2
    24fa:	c0 30       	cpi	r28, 0x00	; 0
    24fc:	d8 07       	cpc	r29, r24
    24fe:	a9 f7       	brne	.-22     	; 0x24ea <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    2500:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
SPI_receive();
    2504:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    2508:	0e 94 1b 13 	call	0x2636	; 0x2636 <SPI_receive>
SD_CS_DEASSERT;
    250c:	c1 9a       	sbi	0x18, 1	; 24

return 0;
}
    250e:	81 2f       	mov	r24, r17
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	08 95       	ret

00002518 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    2518:	1f 93       	push	r17
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    2520:	8f ef       	ldi	r24, 0xFF	; 255
    2522:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    2526:	1f 5f       	subi	r17, 0xFF	; 255
    2528:	1a 30       	cpi	r17, 0x0A	; 10
    252a:	d1 f7       	brne	.-12     	; 0x2520 <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    252c:	c1 98       	cbi	0x18, 1	; 24
    252e:	c0 e0       	ldi	r28, 0x00	; 0
    2530:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>
   retry++;
    2540:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0x20) 
    2542:	c1 32       	cpi	r28, 0x21	; 33
    2544:	d1 05       	cpc	r29, r1
    2546:	11 f4       	brne	.+4      	; 0x254c <SD_init+0x34>
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	68 c0       	rjmp	.+208    	; 0x261c <SD_init+0x104>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	89 f7       	brne	.-30     	; 0x2532 <SD_init+0x1a>

SD_CS_DEASSERT;
    2550:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit (0xff);
    2552:	8f ef       	ldi	r24, 0xFF	; 255
    2554:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
SPI_transmit (0xff);
    2558:	8f ef       	ldi	r24, 0xFF	; 255
    255a:	0e 94 16 13 	call	0x262c	; 0x262c <SPI_transmit>
    255e:	c0 e0       	ldi	r28, 0x00	; 0
    2560:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    2562:	88 e0       	ldi	r24, 0x08	; 8
    2564:	4a ea       	ldi	r20, 0xAA	; 170
    2566:	51 e0       	ldi	r21, 0x01	; 1
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>
retry++;
    2570:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    2572:	cf 3f       	cpi	r28, 0xFF	; 255
    2574:	d1 05       	cpc	r29, r1
    2576:	59 f4       	brne	.+22     	; 0x258e <SD_init+0x76>
   {
	  TX_NEWLINE;
    2578:	8d e0       	ldi	r24, 0x0D	; 13
    257a:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    257e:	8a e0       	ldi	r24, 0x0A	; 10
    2580:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	80 93 ab 02 	sts	0x02AB, r24
    258a:	11 e0       	ldi	r17, 0x01	; 1
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <SD_init+0x7c>
	  break;
   } //time out

}while(response != 0x01);
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	41 f7       	brne	.-48     	; 0x2562 <SD_init+0x4a>
    2592:	12 e0       	ldi	r17, 0x02	; 2
    2594:	c0 e0       	ldi	r28, 0x00	; 0
    2596:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    2598:	87 e3       	ldi	r24, 0x37	; 55
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    25a6:	89 e2       	ldi	r24, 0x29	; 41
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	50 e0       	ldi	r21, 0x00	; 0
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	70 e4       	ldi	r23, 0x40	; 64
    25b0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>

retry++;
    25b4:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    25b6:	cf 3f       	cpi	r28, 0xFF	; 255
    25b8:	d1 05       	cpc	r29, r1
    25ba:	41 f4       	brne	.+16     	; 0x25cc <SD_init+0xb4>
   {
      TX_NEWLINE;
    25bc:	8d e0       	ldi	r24, 0x0D	; 13
    25be:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    25c2:	8a e0       	ldi	r24, 0x0A	; 10
    25c4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	28 c0       	rjmp	.+80     	; 0x261c <SD_init+0x104>
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
    25cc:	88 23       	and	r24, r24
    25ce:	21 f7       	brne	.-56     	; 0x2598 <SD_init+0x80>


retry = 0;
SDHC_flag = 0;
    25d0:	10 92 a0 02 	sts	0x02A0, r1

if (SD_version == 2)
    25d4:	12 30       	cpi	r17, 0x02	; 2
    25d6:	11 f5       	brne	.+68     	; 0x261c <SD_init+0x104>
    25d8:	c0 e0       	ldi	r28, 0x00	; 0
    25da:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    25dc:	8a e3       	ldi	r24, 0x3A	; 58
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SD_sendCommand>
	 retry++;
    25ea:	21 96       	adiw	r28, 0x01	; 1
	 if(retry>0xfe) 
    25ec:	cf 3f       	cpi	r28, 0xFF	; 255
    25ee:	d1 05       	cpc	r29, r1
    25f0:	49 f4       	brne	.+18     	; 0x2604 <SD_init+0xec>
     {
       TX_NEWLINE;
    25f2:	8d e0       	ldi	r24, 0x0D	; 13
    25f4:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
    25f8:	8a e0       	ldi	r24, 0x0A	; 10
    25fa:	0e 94 30 13 	call	0x2660	; 0x2660 <transmitByte>
	   cardType = 0;
    25fe:	10 92 ab 02 	sts	0x02AB, r1
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <SD_init+0xf0>
	   break;
     } //time out

   }while(response != 0x00);
    2604:	88 23       	and	r24, r24
    2606:	51 f7       	brne	.-44     	; 0x25dc <SD_init+0xc4>

   if(SDHC_flag == 1) cardType = 2;
    2608:	80 91 a0 02 	lds	r24, 0x02A0
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	11 f4       	brne	.+4      	; 0x2614 <SD_init+0xfc>
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	01 c0       	rjmp	.+2      	; 0x2616 <SD_init+0xfe>
   else cardType = 3;
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	80 93 ab 02 	sts	0x02AB, r24
    261a:	80 e0       	ldi	r24, 0x00	; 0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	1f 91       	pop	r17
    2622:	08 95       	ret

00002624 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    2624:	82 e5       	ldi	r24, 0x52	; 82
    2626:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
    2628:	1e b8       	out	0x0e, r1	; 14
}
    262a:	08 95       	ret

0000262c <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    262c:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    262e:	77 9b       	sbis	0x0e, 7	; 14
    2630:	fe cf       	rjmp	.-4      	; 0x262e <SPI_transmit+0x2>
data = SPDR;
    2632:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    2634:	08 95       	ret

00002636 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    2636:	8f ef       	ldi	r24, 0xFF	; 255
    2638:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    263a:	77 9b       	sbis	0x0e, 7	; 14
    263c:	fe cf       	rjmp	.-4      	; 0x263a <SPI_receive+0x4>
data = SPDR;
    263e:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    2640:	08 95       	ret

00002642 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
    2642:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
    2644:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
    2646:	86 e8       	ldi	r24, 0x86	; 134
    2648:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x19; //set baud rate lo
    264a:	89 e1       	ldi	r24, 0x19	; 25
    264c:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
    264e:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
    2650:	88 e1       	ldi	r24, 0x18	; 24
    2652:	8a b9       	out	0x0a, r24	; 10
}
    2654:	08 95       	ret

00002656 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
    2656:	5f 9b       	sbis	0x0b, 7	; 11
    2658:	fe cf       	rjmp	.-4      	; 0x2656 <receiveByte>
	
	status = UCSRA;
    265a:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
    265c:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
    265e:	08 95       	ret

00002660 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2660:	5d 9b       	sbis	0x0b, 5	; 11
    2662:	fe cf       	rjmp	.-4      	; 0x2660 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2664:	8c b9       	out	0x0c, r24	; 12
}
    2666:	08 95       	ret

00002668 <transmitHex>:
//Function to transmit hex format data
//first argument indicates type: CHAR, INT or LONG
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	2b 97       	sbiw	r28, 0x0b	; 11
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	11 f4       	brne	.+4      	; 0x2684 <transmitHex+0x1c>
    2680:	94 e0       	ldi	r25, 0x04	; 4
    2682:	05 c0       	rjmp	.+10     	; 0x268e <transmitHex+0x26>
if (dataType == LONG) count = 8;
    2684:	82 30       	cpi	r24, 0x02	; 2
    2686:	11 f4       	brne	.+4      	; 0x268c <transmitHex+0x24>
    2688:	98 e0       	ldi	r25, 0x08	; 8
    268a:	01 c0       	rjmp	.+2      	; 0x268e <transmitHex+0x26>
    268c:	92 e0       	ldi	r25, 0x02	; 2
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";
    268e:	de 01       	movw	r26, r28
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	e4 e7       	ldi	r30, 0x74	; 116
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	8b e0       	ldi	r24, 0x0B	; 11
    2698:	01 90       	ld	r0, Z+
    269a:	0d 92       	st	X+, r0
    269c:	81 50       	subi	r24, 0x01	; 1
    269e:	e1 f7       	brne	.-8      	; 0x2698 <transmitHex+0x30>
    26a0:	9e 01       	movw	r18, r28
    26a2:	2e 5f       	subi	r18, 0xFE	; 254
    26a4:	3f 4f       	sbci	r19, 0xFF	; 255
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
{
  temp = data % 16;
    26a6:	84 2f       	mov	r24, r20
    26a8:	8f 70       	andi	r24, 0x0F	; 15
    26aa:	e9 2f       	mov	r30, r25
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
    26ae:	8a 30       	cpi	r24, 0x0A	; 10
    26b0:	20 f4       	brcc	.+8      	; 0x26ba <transmitHex+0x52>
    26b2:	e2 0f       	add	r30, r18
    26b4:	f3 1f       	adc	r31, r19
    26b6:	80 5d       	subi	r24, 0xD0	; 208
    26b8:	03 c0       	rjmp	.+6      	; 0x26c0 <transmitHex+0x58>
  else dataString [i+1] = (temp - 10) + 0x41;
    26ba:	e2 0f       	add	r30, r18
    26bc:	f3 1f       	adc	r31, r19
    26be:	89 5c       	subi	r24, 0xC9	; 201
    26c0:	80 83       	st	Z, r24

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
    26c2:	91 50       	subi	r25, 0x01	; 1
    26c4:	19 f4       	brne	.+6      	; 0x26cc <transmitHex+0x64>
    26c6:	fe 01       	movw	r30, r28
    26c8:	31 96       	adiw	r30, 0x01	; 1
    26ca:	0c c0       	rjmp	.+24     	; 0x26e4 <transmitHex+0x7c>
{
  temp = data % 16;
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
  else dataString [i+1] = (temp - 10) + 0x41;

  data = data/16;
    26cc:	84 e0       	ldi	r24, 0x04	; 4
    26ce:	76 95       	lsr	r23
    26d0:	67 95       	ror	r22
    26d2:	57 95       	ror	r21
    26d4:	47 95       	ror	r20
    26d6:	8a 95       	dec	r24
    26d8:	d1 f7       	brne	.-12     	; 0x26ce <transmitHex+0x66>
    26da:	e5 cf       	rjmp	.-54     	; 0x26a6 <transmitHex+0x3e>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    26dc:	5d 9b       	sbis	0x0b, 5	; 11
    26de:	fe cf       	rjmp	.-4      	; 0x26dc <transmitHex+0x74>
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
   transmitByte(*string++);
    26e0:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    26e2:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    26e4:	80 81       	ld	r24, Z
    26e6:	88 23       	and	r24, r24
    26e8:	c9 f7       	brne	.-14     	; 0x26dc <transmitHex+0x74>

  data = data/16;
}

transmitString (dataString);
}
    26ea:	2b 96       	adiw	r28, 0x0b	; 11
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    26fc:	fc 01       	movw	r30, r24
    26fe:	04 c0       	rjmp	.+8      	; 0x2708 <transmitString_F+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2700:	5d 9b       	sbis	0x0b, 5	; 11
    2702:	fe cf       	rjmp	.-4      	; 0x2700 <transmitString_F+0x4>
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
   transmitByte(pgm_read_byte(&(*string++)));
    2704:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2706:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    2708:	84 91       	lpm	r24, Z+
    270a:	88 23       	and	r24, r24
    270c:	c9 f7       	brne	.-14     	; 0x2700 <transmitString_F+0x4>
   transmitByte(pgm_read_byte(&(*string++)));
}
    270e:	08 95       	ret

00002710 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    2710:	fc 01       	movw	r30, r24
    2712:	04 c0       	rjmp	.+8      	; 0x271c <transmitString+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2714:	5d 9b       	sbis	0x0b, 5	; 11
    2716:	fe cf       	rjmp	.-4      	; 0x2714 <transmitString+0x4>
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
   transmitByte(*string++);
    2718:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    271a:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    271c:	80 81       	ld	r24, Z
    271e:	88 23       	and	r24, r24
    2720:	c9 f7       	brne	.-14     	; 0x2714 <transmitString+0x4>
   transmitByte(*string++);
}
    2722:	08 95       	ret

00002724 <__mulsi3>:
    2724:	62 9f       	mul	r22, r18
    2726:	d0 01       	movw	r26, r0
    2728:	73 9f       	mul	r23, r19
    272a:	f0 01       	movw	r30, r0
    272c:	82 9f       	mul	r24, r18
    272e:	e0 0d       	add	r30, r0
    2730:	f1 1d       	adc	r31, r1
    2732:	64 9f       	mul	r22, r20
    2734:	e0 0d       	add	r30, r0
    2736:	f1 1d       	adc	r31, r1
    2738:	92 9f       	mul	r25, r18
    273a:	f0 0d       	add	r31, r0
    273c:	83 9f       	mul	r24, r19
    273e:	f0 0d       	add	r31, r0
    2740:	74 9f       	mul	r23, r20
    2742:	f0 0d       	add	r31, r0
    2744:	65 9f       	mul	r22, r21
    2746:	f0 0d       	add	r31, r0
    2748:	99 27       	eor	r25, r25
    274a:	72 9f       	mul	r23, r18
    274c:	b0 0d       	add	r27, r0
    274e:	e1 1d       	adc	r30, r1
    2750:	f9 1f       	adc	r31, r25
    2752:	63 9f       	mul	r22, r19
    2754:	b0 0d       	add	r27, r0
    2756:	e1 1d       	adc	r30, r1
    2758:	f9 1f       	adc	r31, r25
    275a:	bd 01       	movw	r22, r26
    275c:	cf 01       	movw	r24, r30
    275e:	11 24       	eor	r1, r1
    2760:	08 95       	ret

00002762 <__udivmodsi4>:
    2762:	a1 e2       	ldi	r26, 0x21	; 33
    2764:	1a 2e       	mov	r1, r26
    2766:	aa 1b       	sub	r26, r26
    2768:	bb 1b       	sub	r27, r27
    276a:	fd 01       	movw	r30, r26
    276c:	0d c0       	rjmp	.+26     	; 0x2788 <__udivmodsi4_ep>

0000276e <__udivmodsi4_loop>:
    276e:	aa 1f       	adc	r26, r26
    2770:	bb 1f       	adc	r27, r27
    2772:	ee 1f       	adc	r30, r30
    2774:	ff 1f       	adc	r31, r31
    2776:	a2 17       	cp	r26, r18
    2778:	b3 07       	cpc	r27, r19
    277a:	e4 07       	cpc	r30, r20
    277c:	f5 07       	cpc	r31, r21
    277e:	20 f0       	brcs	.+8      	; 0x2788 <__udivmodsi4_ep>
    2780:	a2 1b       	sub	r26, r18
    2782:	b3 0b       	sbc	r27, r19
    2784:	e4 0b       	sbc	r30, r20
    2786:	f5 0b       	sbc	r31, r21

00002788 <__udivmodsi4_ep>:
    2788:	66 1f       	adc	r22, r22
    278a:	77 1f       	adc	r23, r23
    278c:	88 1f       	adc	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	1a 94       	dec	r1
    2792:	69 f7       	brne	.-38     	; 0x276e <__udivmodsi4_loop>
    2794:	60 95       	com	r22
    2796:	70 95       	com	r23
    2798:	80 95       	com	r24
    279a:	90 95       	com	r25
    279c:	9b 01       	movw	r18, r22
    279e:	ac 01       	movw	r20, r24
    27a0:	bd 01       	movw	r22, r26
    27a2:	cf 01       	movw	r24, r30
    27a4:	08 95       	ret

000027a6 <_exit>:
    27a6:	f8 94       	cli

000027a8 <__stop_program>:
    27a8:	ff cf       	rjmp	.-2      	; 0x27a8 <__stop_program>
