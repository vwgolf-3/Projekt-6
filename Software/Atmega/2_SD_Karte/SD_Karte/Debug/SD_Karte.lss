
SD_Karte.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800200  00001992  00001a26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001992  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023d  00800266  00800266  00001a8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dfd  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014a1  00000000  00000000  00004ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001599  00000000  00000000  00005f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000804  00000000  00000000  000074fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a39  00000000  00000000  00007d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000256b  00000000  00000000  00008739  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000aca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__vector_21>
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e9       	ldi	r30, 0x92	; 146
      fc:	f9 e1       	ldi	r31, 0x19	; 25
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 36       	cpi	r26, 0x66	; 102
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	a6 e6       	ldi	r26, 0x66	; 102
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 3a       	cpi	r26, 0xA3	; 163
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <main>
     122:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <fat_writeSector>:
	 nextCluster = fat_getNextCluster(startCluster);
	 fat_setCluster(startCluster,0x00000000);  	
  }while(!((nextCluster>=0x0ffffff8&&fat.fatType==32)||(nextCluster>=0xfff8&&fat.fatType==16)));

  fat_writeSector(file.currentSectorNr);
}
     128:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <fat+0x4>
     12c:	4f e7       	ldi	r20, 0x7F	; 127
     12e:	52 e0       	ldi	r21, 0x02	; 2
     130:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <mmc_write_sector>
     134:	08 95       	ret

00000136 <fat_loadSector>:
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	00 91 8f 04 	lds	r16, 0x048F	; 0x80048f <file+0x6>
     14a:	10 91 90 04 	lds	r17, 0x0490	; 0x800490 <file+0x7>
     14e:	20 91 91 04 	lds	r18, 0x0491	; 0x800491 <file+0x8>
     152:	30 91 92 04 	lds	r19, 0x0492	; 0x800492 <file+0x9>
     156:	06 17       	cp	r16, r22
     158:	17 07       	cpc	r17, r23
     15a:	28 07       	cpc	r18, r24
     15c:	39 07       	cpc	r19, r25
     15e:	31 f1       	breq	.+76     	; 0x1ac <fat_loadSector+0x76>
     160:	6b 01       	movw	r12, r22
     162:	7c 01       	movw	r14, r24
     164:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <fat+0x4>
     168:	81 30       	cpi	r24, 0x01	; 1
     16a:	41 f4       	brne	.+16     	; 0x17c <fat_loadSector+0x46>
     16c:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <fat+0x4>
     170:	4f e7       	ldi	r20, 0x7F	; 127
     172:	52 e0       	ldi	r21, 0x02	; 2
     174:	c9 01       	movw	r24, r18
     176:	b8 01       	movw	r22, r16
     178:	0e 94 a4 0b 	call	0x1748	; 0x1748 <mmc_write_sector>
     17c:	c9 e8       	ldi	r28, 0x89	; 137
     17e:	d4 e0       	ldi	r29, 0x04	; 4
     180:	8e 81       	ldd	r24, Y+6	; 0x06
     182:	9f 81       	ldd	r25, Y+7	; 0x07
     184:	a8 85       	ldd	r26, Y+8	; 0x08
     186:	b9 85       	ldd	r27, Y+9	; 0x09
     188:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <fat>
     18c:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <fat+0x1>
     190:	a0 93 69 02 	sts	0x0269, r26	; 0x800269 <fat+0x2>
     194:	b0 93 6a 02 	sts	0x026A, r27	; 0x80026a <fat+0x3>
     198:	4f e7       	ldi	r20, 0x7F	; 127
     19a:	52 e0       	ldi	r21, 0x02	; 2
     19c:	c7 01       	movw	r24, r14
     19e:	b6 01       	movw	r22, r12
     1a0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <mmc_read_sector>
     1a4:	ce 82       	std	Y+6, r12	; 0x06
     1a6:	df 82       	std	Y+7, r13	; 0x07
     1a8:	e8 86       	std	Y+8, r14	; 0x08
     1aa:	f9 86       	std	Y+9, r15	; 0x09
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	08 95       	ret

000001c0 <fat_getFreeRowsOfCluster>:
     1c0:	cf 92       	push	r12
     1c2:	df 92       	push	r13
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
     1c8:	0f 93       	push	r16
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	6b 01       	movw	r12, r22
     1d2:	7c 01       	movw	r14, r24
     1d4:	c4 2f       	mov	r28, r20
     1d6:	d0 e0       	ldi	r29, 0x00	; 0
     1d8:	07 e6       	ldi	r16, 0x67	; 103
     1da:	12 e0       	ldi	r17, 0x02	; 2
     1dc:	c7 01       	movw	r24, r14
     1de:	b6 01       	movw	r22, r12
     1e0:	6d 0f       	add	r22, r29
     1e2:	71 1d       	adc	r23, r1
     1e4:	81 1d       	adc	r24, r1
     1e6:	91 1d       	adc	r25, r1
     1e8:	a6 df       	rcall	.-180    	; 0x136 <fat_loadSector>
     1ea:	30 91 66 02 	lds	r19, 0x0266	; 0x800266 <__data_end>
     1ee:	ef e7       	ldi	r30, 0x7F	; 127
     1f0:	f2 e0       	ldi	r31, 0x02	; 2
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	20 81       	ld	r18, Z
     1f8:	22 23       	and	r18, r18
     1fa:	11 f0       	breq	.+4      	; 0x200 <fat_getFreeRowsOfCluster+0x40>
     1fc:	25 3e       	cpi	r18, 0xE5	; 229
     1fe:	89 f4       	brne	.+34     	; 0x222 <fat_getFreeRowsOfCluster+0x62>
     200:	3f 5f       	subi	r19, 0xFF	; 255
     202:	3c 13       	cpse	r19, r28
     204:	0f c0       	rjmp	.+30     	; 0x224 <fat_getFreeRowsOfCluster+0x64>
     206:	96 95       	lsr	r25
     208:	87 95       	ror	r24
     20a:	92 95       	swap	r25
     20c:	82 95       	swap	r24
     20e:	8f 70       	andi	r24, 0x0F	; 15
     210:	89 27       	eor	r24, r25
     212:	9f 70       	andi	r25, 0x0F	; 15
     214:	89 27       	eor	r24, r25
     216:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <file+0x10>
     21a:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <__data_end>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0f c0       	rjmp	.+30     	; 0x240 <fat_getFreeRowsOfCluster+0x80>
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	80 96       	adiw	r24, 0x20	; 32
     226:	b0 96       	adiw	r30, 0x20	; 32
     228:	81 15       	cp	r24, r1
     22a:	22 e0       	ldi	r18, 0x02	; 2
     22c:	92 07       	cpc	r25, r18
     22e:	19 f7       	brne	.-58     	; 0x1f6 <fat_getFreeRowsOfCluster+0x36>
     230:	30 93 66 02 	sts	0x0266, r19	; 0x800266 <__data_end>
     234:	df 5f       	subi	r29, 0xFF	; 255
     236:	f8 01       	movw	r30, r16
     238:	85 89       	ldd	r24, Z+21	; 0x15
     23a:	d8 17       	cp	r29, r24
     23c:	78 f2       	brcs	.-98     	; 0x1dc <fat_getFreeRowsOfCluster+0x1c>
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	08 95       	ret

00000252 <fat_clustToSec>:
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	9b 01       	movw	r18, r22
     258:	ac 01       	movw	r20, r24
     25a:	22 50       	subi	r18, 0x02	; 2
     25c:	31 09       	sbc	r19, r1
     25e:	41 09       	sbc	r20, r1
     260:	51 09       	sbc	r21, r1
     262:	e7 e6       	ldi	r30, 0x67	; 103
     264:	f2 e0       	ldi	r31, 0x02	; 2
     266:	a5 89       	ldd	r26, Z+21	; 0x15
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__muluhisi3>
     26e:	05 85       	ldd	r16, Z+13	; 0x0d
     270:	16 85       	ldd	r17, Z+14	; 0x0e
     272:	27 85       	ldd	r18, Z+15	; 0x0f
     274:	30 89       	ldd	r19, Z+16	; 0x10
     276:	60 0f       	add	r22, r16
     278:	71 1f       	adc	r23, r17
     27a:	82 1f       	adc	r24, r18
     27c:	93 1f       	adc	r25, r19
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	08 95       	ret

00000284 <fat_secToClust>:
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	e7 e6       	ldi	r30, 0x67	; 103
     28a:	f2 e0       	ldi	r31, 0x02	; 2
     28c:	05 85       	ldd	r16, Z+13	; 0x0d
     28e:	16 85       	ldd	r17, Z+14	; 0x0e
     290:	27 85       	ldd	r18, Z+15	; 0x0f
     292:	30 89       	ldd	r19, Z+16	; 0x10
     294:	60 1b       	sub	r22, r16
     296:	71 0b       	sbc	r23, r17
     298:	82 0b       	sbc	r24, r18
     29a:	93 0b       	sbc	r25, r19
     29c:	25 89       	ldd	r18, Z+21	; 0x15
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	0e 94 47 0c 	call	0x188e	; 0x188e <__udivmodsi4>
     2a8:	ca 01       	movw	r24, r20
     2aa:	b9 01       	movw	r22, r18
     2ac:	6e 5f       	subi	r22, 0xFE	; 254
     2ae:	7f 4f       	sbci	r23, 0xFF	; 255
     2b0:	8f 4f       	sbci	r24, 0xFF	; 255
     2b2:	9f 4f       	sbci	r25, 0xFF	; 255
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	08 95       	ret

000002ba <fat_loadRowOfSector>:
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	e9 e8       	ldi	r30, 0x89	; 137
     2c0:	f4 e0       	ldi	r31, 0x04	; 4
     2c2:	dc 01       	movw	r26, r24
     2c4:	ad 56       	subi	r26, 0x6D	; 109
     2c6:	bd 4f       	sbci	r27, 0xFD	; 253
     2c8:	4d 91       	ld	r20, X+
     2ca:	5c 91       	ld	r21, X
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	ba 01       	movw	r22, r20
     2d2:	55 27       	eor	r21, r21
     2d4:	44 27       	eor	r20, r20
     2d6:	dc 01       	movw	r26, r24
     2d8:	a7 56       	subi	r26, 0x67	; 103
     2da:	bd 4f       	sbci	r27, 0xFD	; 253
     2dc:	0d 91       	ld	r16, X+
     2de:	1c 91       	ld	r17, X
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 2b       	or	r20, r16
     2e6:	51 2b       	or	r21, r17
     2e8:	62 2b       	or	r22, r18
     2ea:	73 2b       	or	r23, r19
     2ec:	41 8b       	std	Z+17, r20	; 0x11
     2ee:	52 8b       	std	Z+18, r21	; 0x12
     2f0:	63 8b       	std	Z+19, r22	; 0x13
     2f2:	74 8b       	std	Z+20, r23	; 0x14
     2f4:	dc 01       	movw	r26, r24
     2f6:	a5 56       	subi	r26, 0x65	; 101
     2f8:	bd 4f       	sbci	r27, 0xFD	; 253
     2fa:	8d 91       	ld	r24, X+
     2fc:	9d 91       	ld	r25, X+
     2fe:	0d 90       	ld	r0, X+
     300:	bc 91       	ld	r27, X
     302:	a0 2d       	mov	r26, r0
     304:	82 87       	std	Z+10, r24	; 0x0a
     306:	93 87       	std	Z+11, r25	; 0x0b
     308:	a4 87       	std	Z+12, r26	; 0x0c
     30a:	b5 87       	std	Z+13, r27	; 0x0d
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	08 95       	ret

00000312 <fat_loadFileDataFromCluster>:
     312:	2f 92       	push	r2
     314:	3f 92       	push	r3
     316:	4f 92       	push	r4
     318:	5f 92       	push	r5
     31a:	6f 92       	push	r6
     31c:	7f 92       	push	r7
     31e:	8f 92       	push	r8
     320:	9f 92       	push	r9
     322:	af 92       	push	r10
     324:	bf 92       	push	r11
     326:	cf 92       	push	r12
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	2b 01       	movw	r4, r22
     338:	3c 01       	movw	r6, r24
     33a:	6a 01       	movw	r12, r20
     33c:	21 2c       	mov	r2, r1
     33e:	4f e7       	ldi	r20, 0x7F	; 127
     340:	52 e0       	ldi	r21, 0x02	; 2
     342:	53 01       	movw	r10, r6
     344:	42 01       	movw	r8, r4
     346:	82 0c       	add	r8, r2
     348:	91 1c       	adc	r9, r1
     34a:	a1 1c       	adc	r10, r1
     34c:	b1 1c       	adc	r11, r1
     34e:	c5 01       	movw	r24, r10
     350:	b4 01       	movw	r22, r8
     352:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <mmc_read_sector>
     356:	80 92 8f 04 	sts	0x048F, r8	; 0x80048f <file+0x6>
     35a:	90 92 90 04 	sts	0x0490, r9	; 0x800490 <file+0x7>
     35e:	a0 92 91 04 	sts	0x0491, r10	; 0x800491 <file+0x8>
     362:	b0 92 92 04 	sts	0x0492, r11	; 0x800492 <file+0x9>
     366:	cf e7       	ldi	r28, 0x7F	; 127
     368:	d2 e0       	ldi	r29, 0x02	; 2
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	10 e0       	ldi	r17, 0x00	; 0
     36e:	88 81       	ld	r24, Y
     370:	88 23       	and	r24, r24
     372:	09 f4       	brne	.+2      	; 0x376 <fat_loadFileDataFromCluster+0x64>
     374:	5a c0       	rjmp	.+180    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     376:	9b 85       	ldd	r25, Y+11	; 0x0b
     378:	90 31       	cpi	r25, 0x10	; 16
     37a:	19 f0       	breq	.+6      	; 0x382 <fat_loadFileDataFromCluster+0x70>
     37c:	90 32       	cpi	r25, 0x20	; 32
     37e:	09 f0       	breq	.+2      	; 0x382 <fat_loadFileDataFromCluster+0x70>
     380:	45 c0       	rjmp	.+138    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     382:	85 3e       	cpi	r24, 0xE5	; 229
     384:	09 f4       	brne	.+2      	; 0x388 <fat_loadFileDataFromCluster+0x76>
     386:	42 c0       	rjmp	.+132    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     388:	31 2c       	mov	r3, r1
     38a:	91 2c       	mov	r9, r1
     38c:	c8 01       	movw	r24, r16
     38e:	89 59       	subi	r24, 0x99	; 153
     390:	9d 4f       	sbci	r25, 0xFD	; 253
     392:	7c 01       	movw	r14, r24
     394:	f7 01       	movw	r30, r14
     396:	e9 0d       	add	r30, r9
     398:	f1 1d       	adc	r31, r1
     39a:	80 8c       	ldd	r8, Z+24	; 0x18
     39c:	90 e2       	ldi	r25, 0x20	; 32
     39e:	89 12       	cpse	r8, r25
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <fat_loadFileDataFromCluster+0x94>
     3a2:	93 94       	inc	r9
     3a4:	15 c0       	rjmp	.+42     	; 0x3d0 <fat_loadFileDataFromCluster+0xbe>
     3a6:	f6 01       	movw	r30, r12
     3a8:	e3 0d       	add	r30, r3
     3aa:	f1 1d       	adc	r31, r1
     3ac:	80 81       	ld	r24, Z
     3ae:	8e 32       	cpi	r24, 0x2E	; 46
     3b0:	29 f4       	brne	.+10     	; 0x3bc <fat_loadFileDataFromCluster+0xaa>
     3b2:	87 e0       	ldi	r24, 0x07	; 7
     3b4:	89 15       	cp	r24, r9
     3b6:	78 f4       	brcc	.+30     	; 0x3d6 <fat_loadFileDataFromCluster+0xc4>
     3b8:	33 94       	inc	r3
     3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <fat_loadFileDataFromCluster+0xbe>
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 82 0c 	call	0x1904	; 0x1904 <toupper>
     3c2:	28 2d       	mov	r18, r8
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	28 17       	cp	r18, r24
     3c8:	39 07       	cpc	r19, r25
     3ca:	29 f4       	brne	.+10     	; 0x3d6 <fat_loadFileDataFromCluster+0xc4>
     3cc:	33 94       	inc	r3
     3ce:	93 94       	inc	r9
     3d0:	9a e0       	ldi	r25, 0x0A	; 10
     3d2:	99 15       	cp	r25, r9
     3d4:	f8 f6       	brcc	.-66     	; 0x394 <fat_loadFileDataFromCluster+0x82>
     3d6:	8b e0       	ldi	r24, 0x0B	; 11
     3d8:	98 12       	cpse	r9, r24
     3da:	18 c0       	rjmp	.+48     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3dc:	c9 e8       	ldi	r28, 0x89	; 137
     3de:	d4 e0       	ldi	r29, 0x04	; 4
     3e0:	c8 01       	movw	r24, r16
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	92 95       	swap	r25
     3e8:	82 95       	swap	r24
     3ea:	8f 70       	andi	r24, 0x0F	; 15
     3ec:	89 27       	eor	r24, r25
     3ee:	9f 70       	andi	r25, 0x0F	; 15
     3f0:	89 27       	eor	r24, r25
     3f2:	88 8b       	std	Y+16, r24	; 0x10
     3f4:	c8 01       	movw	r24, r16
     3f6:	61 df       	rcall	.-318    	; 0x2ba <fat_loadRowOfSector>
     3f8:	8e 81       	ldd	r24, Y+6	; 0x06
     3fa:	9f 81       	ldd	r25, Y+7	; 0x07
     3fc:	a8 85       	ldd	r26, Y+8	; 0x08
     3fe:	b9 85       	ldd	r27, Y+9	; 0x09
     400:	8d 8b       	std	Y+21, r24	; 0x15
     402:	9e 8b       	std	Y+22, r25	; 0x16
     404:	af 8b       	std	Y+23, r26	; 0x17
     406:	b8 8f       	std	Y+24, r27	; 0x18
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0f c0       	rjmp	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     40c:	00 5e       	subi	r16, 0xE0	; 224
     40e:	1f 4f       	sbci	r17, 0xFF	; 255
     410:	a0 96       	adiw	r28, 0x20	; 32
     412:	01 15       	cp	r16, r1
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	19 07       	cpc	r17, r25
     418:	09 f0       	breq	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	a9 cf       	rjmp	.-174    	; 0x36e <fat_loadFileDataFromCluster+0x5c>
     41c:	23 94       	inc	r2
     41e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <fat+0x15>
     422:	28 16       	cp	r2, r24
     424:	08 f4       	brcc	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	8b cf       	rjmp	.-234    	; 0x33e <fat_loadFileDataFromCluster+0x2c>
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	7f 90       	pop	r7
     444:	6f 90       	pop	r6
     446:	5f 90       	pop	r5
     448:	4f 90       	pop	r4
     44a:	3f 90       	pop	r3
     44c:	2f 90       	pop	r2
     44e:	08 95       	ret

00000450 <fat_makeSfnDataEntry>:
     450:	2f 92       	push	r2
     452:	3f 92       	push	r3
     454:	5f 92       	push	r5
     456:	6f 92       	push	r6
     458:	7f 92       	push	r7
     45a:	8f 92       	push	r8
     45c:	9f 92       	push	r9
     45e:	af 92       	push	r10
     460:	bf 92       	push	r11
     462:	cf 92       	push	r12
     464:	df 92       	push	r13
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <fat_makeSfnDataEntry+0x24>
     474:	1f 92       	push	r1
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	9c 83       	std	Y+4, r25	; 0x04
     47c:	8b 83       	std	Y+3, r24	; 0x03
     47e:	56 2e       	mov	r5, r22
     480:	49 01       	movw	r8, r18
     482:	5a 01       	movw	r10, r20
     484:	67 01       	movw	r12, r14
     486:	78 01       	movw	r14, r16
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <fat+0x4>
     48e:	00 91 99 04 	lds	r16, 0x0499	; 0x800499 <file+0x10>
     492:	80 e2       	ldi	r24, 0x20	; 32
     494:	08 9f       	mul	r16, r24
     496:	80 01       	movw	r16, r0
     498:	11 24       	eor	r1, r1
     49a:	f8 01       	movw	r30, r16
     49c:	e1 58       	subi	r30, 0x81	; 129
     49e:	fd 4f       	sbci	r31, 0xFD	; 253
     4a0:	fa 83       	std	Y+2, r31	; 0x02
     4a2:	e9 83       	std	Y+1, r30	; 0x01
     4a4:	cf 01       	movw	r24, r30
     4a6:	45 96       	adiw	r24, 0x15	; 21
     4a8:	11 92       	st	Z+, r1
     4aa:	8e 17       	cp	r24, r30
     4ac:	9f 07       	cpc	r25, r31
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <fat_makeSfnDataEntry+0x58>
     4b0:	69 80       	ldd	r6, Y+1	; 0x01
     4b2:	7a 80       	ldd	r7, Y+2	; 0x02
     4b4:	31 2c       	mov	r3, r1
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	68 94       	set
     4ba:	22 24       	eor	r2, r2
     4bc:	25 f8       	bld	r2, 5
     4be:	f3 01       	movw	r30, r6
     4c0:	20 82       	st	Z, r2
     4c2:	18 30       	cpi	r17, 0x08	; 8
     4c4:	70 f5       	brcc	.+92     	; 0x522 <fat_makeSfnDataEntry+0xd2>
     4c6:	eb 81       	ldd	r30, Y+3	; 0x03
     4c8:	fc 81       	ldd	r31, Y+4	; 0x04
     4ca:	e3 0d       	add	r30, r3
     4cc:	f1 1d       	adc	r31, r1
     4ce:	80 81       	ld	r24, Z
     4d0:	8e 32       	cpi	r24, 0x2E	; 46
     4d2:	51 f1       	breq	.+84     	; 0x528 <fat_makeSfnDataEntry+0xd8>
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 82 0c 	call	0x1904	; 0x1904 <toupper>
     4da:	f3 01       	movw	r30, r6
     4dc:	80 83       	st	Z, r24
     4de:	33 94       	inc	r3
     4e0:	23 c0       	rjmp	.+70     	; 0x528 <fat_makeSfnDataEntry+0xd8>
     4e2:	33 94       	inc	r3
     4e4:	eb 81       	ldd	r30, Y+3	; 0x03
     4e6:	fc 81       	ldd	r31, Y+4	; 0x04
     4e8:	e3 0d       	add	r30, r3
     4ea:	f1 1d       	adc	r31, r1
     4ec:	80 81       	ld	r24, Z
     4ee:	88 23       	and	r24, r24
     4f0:	31 f0       	breq	.+12     	; 0x4fe <fat_makeSfnDataEntry+0xae>
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 82 0c 	call	0x1904	; 0x1904 <toupper>
     4f8:	f3 01       	movw	r30, r6
     4fa:	80 83       	st	Z, r24
     4fc:	33 94       	inc	r3
     4fe:	ff ef       	ldi	r31, 0xFF	; 255
     500:	6f 1a       	sub	r6, r31
     502:	7f 0a       	sbc	r7, r31
     504:	1f 5f       	subi	r17, 0xFF	; 255
     506:	1b 30       	cpi	r17, 0x0B	; 11
     508:	d1 f6       	brne	.-76     	; 0x4be <fat_makeSfnDataEntry+0x6e>
     50a:	e9 81       	ldd	r30, Y+1	; 0x01
     50c:	fa 81       	ldd	r31, Y+2	; 0x02
     50e:	53 86       	std	Z+11, r5	; 0x0b
     510:	b5 8a       	std	Z+21, r11	; 0x15
     512:	a4 8a       	std	Z+20, r10	; 0x14
     514:	93 8e       	std	Z+27, r9	; 0x1b
     516:	82 8e       	std	Z+26, r8	; 0x1a
     518:	c4 8e       	std	Z+28, r12	; 0x1c
     51a:	d5 8e       	std	Z+29, r13	; 0x1d
     51c:	e6 8e       	std	Z+30, r14	; 0x1e
     51e:	f7 8e       	std	Z+31, r15	; 0x1f
     520:	06 c0       	rjmp	.+12     	; 0x52e <fat_makeSfnDataEntry+0xde>
     522:	18 30       	cpi	r17, 0x08	; 8
     524:	f9 f6       	brne	.-66     	; 0x4e4 <fat_makeSfnDataEntry+0x94>
     526:	dd cf       	rjmp	.-70     	; 0x4e2 <fat_makeSfnDataEntry+0x92>
     528:	18 30       	cpi	r17, 0x08	; 8
     52a:	49 f7       	brne	.-46     	; 0x4fe <fat_makeSfnDataEntry+0xae>
     52c:	da cf       	rjmp	.-76     	; 0x4e2 <fat_makeSfnDataEntry+0x92>
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	df 90       	pop	r13
     544:	cf 90       	pop	r12
     546:	bf 90       	pop	r11
     548:	af 90       	pop	r10
     54a:	9f 90       	pop	r9
     54c:	8f 90       	pop	r8
     54e:	7f 90       	pop	r7
     550:	6f 90       	pop	r6
     552:	5f 90       	pop	r5
     554:	3f 90       	pop	r3
     556:	2f 90       	pop	r2
     558:	08 95       	ret

0000055a <fat_getNextCluster>:
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <fat+0x16>
     56a:	20 31       	cpi	r18, 0x10	; 16
     56c:	81 f5       	brne	.+96     	; 0x5ce <fat_getNextCluster+0x74>
     56e:	6b 01       	movw	r12, r22
     570:	7c 01       	movw	r14, r24
     572:	cc 0c       	add	r12, r12
     574:	dd 1c       	adc	r13, r13
     576:	ee 1c       	adc	r14, r14
     578:	ff 1c       	adc	r15, r15
     57a:	b7 01       	movw	r22, r14
     57c:	a6 01       	movw	r20, r12
     57e:	03 2e       	mov	r0, r19
     580:	39 e0       	ldi	r19, 0x09	; 9
     582:	76 95       	lsr	r23
     584:	67 95       	ror	r22
     586:	57 95       	ror	r21
     588:	47 95       	ror	r20
     58a:	3a 95       	dec	r19
     58c:	d1 f7       	brne	.-12     	; 0x582 <fat_getNextCluster+0x28>
     58e:	30 2d       	mov	r19, r0
     590:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <fat+0x11>
     594:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <fat+0x12>
     598:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <fat+0x13>
     59c:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <fat+0x14>
     5a0:	8a 01       	movw	r16, r20
     5a2:	9b 01       	movw	r18, r22
     5a4:	08 0f       	add	r16, r24
     5a6:	19 1f       	adc	r17, r25
     5a8:	2a 1f       	adc	r18, r26
     5aa:	3b 1f       	adc	r19, r27
     5ac:	c9 01       	movw	r24, r18
     5ae:	b8 01       	movw	r22, r16
     5b0:	c2 dd       	rcall	.-1148   	; 0x136 <fat_loadSector>
     5b2:	11 e0       	ldi	r17, 0x01	; 1
     5b4:	d1 22       	and	r13, r17
     5b6:	ee 24       	eor	r14, r14
     5b8:	ff 24       	eor	r15, r15
     5ba:	c6 01       	movw	r24, r12
     5bc:	48 96       	adiw	r24, 0x18	; 24
     5be:	fc 01       	movw	r30, r24
     5c0:	e9 59       	subi	r30, 0x99	; 153
     5c2:	fd 4f       	sbci	r31, 0xFD	; 253
     5c4:	60 81       	ld	r22, Z
     5c6:	71 81       	ldd	r23, Z+1	; 0x01
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	33 c0       	rjmp	.+102    	; 0x634 <fat_getNextCluster+0xda>
     5ce:	6b 01       	movw	r12, r22
     5d0:	7c 01       	movw	r14, r24
     5d2:	cc 0c       	add	r12, r12
     5d4:	dd 1c       	adc	r13, r13
     5d6:	ee 1c       	adc	r14, r14
     5d8:	ff 1c       	adc	r15, r15
     5da:	cc 0c       	add	r12, r12
     5dc:	dd 1c       	adc	r13, r13
     5de:	ee 1c       	adc	r14, r14
     5e0:	ff 1c       	adc	r15, r15
     5e2:	b7 01       	movw	r22, r14
     5e4:	a6 01       	movw	r20, r12
     5e6:	03 2e       	mov	r0, r19
     5e8:	39 e0       	ldi	r19, 0x09	; 9
     5ea:	76 95       	lsr	r23
     5ec:	67 95       	ror	r22
     5ee:	57 95       	ror	r21
     5f0:	47 95       	ror	r20
     5f2:	3a 95       	dec	r19
     5f4:	d1 f7       	brne	.-12     	; 0x5ea <fat_getNextCluster+0x90>
     5f6:	30 2d       	mov	r19, r0
     5f8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <fat+0x11>
     5fc:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <fat+0x12>
     600:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <fat+0x13>
     604:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <fat+0x14>
     608:	8a 01       	movw	r16, r20
     60a:	9b 01       	movw	r18, r22
     60c:	08 0f       	add	r16, r24
     60e:	19 1f       	adc	r17, r25
     610:	2a 1f       	adc	r18, r26
     612:	3b 1f       	adc	r19, r27
     614:	c9 01       	movw	r24, r18
     616:	b8 01       	movw	r22, r16
     618:	8e dd       	rcall	.-1252   	; 0x136 <fat_loadSector>
     61a:	11 e0       	ldi	r17, 0x01	; 1
     61c:	d1 22       	and	r13, r17
     61e:	ee 24       	eor	r14, r14
     620:	ff 24       	eor	r15, r15
     622:	c6 01       	movw	r24, r12
     624:	48 96       	adiw	r24, 0x18	; 24
     626:	fc 01       	movw	r30, r24
     628:	e9 59       	subi	r30, 0x99	; 153
     62a:	fd 4f       	sbci	r31, 0xFD	; 253
     62c:	60 81       	ld	r22, Z
     62e:	71 81       	ldd	r23, Z+1	; 0x01
     630:	82 81       	ldd	r24, Z+2	; 0x02
     632:	93 81       	ldd	r25, Z+3	; 0x03
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	ff 90       	pop	r15
     63a:	ef 90       	pop	r14
     63c:	df 90       	pop	r13
     63e:	cf 90       	pop	r12
     640:	08 95       	ret

00000642 <fat_loadFileDataFromDir>:
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	8c 01       	movw	r16, r24
     654:	c0 90 6c 02 	lds	r12, 0x026C	; 0x80026c <fat+0x5>
     658:	d0 90 6d 02 	lds	r13, 0x026D	; 0x80026d <fat+0x6>
     65c:	e0 90 6e 02 	lds	r14, 0x026E	; 0x80026e <fat+0x7>
     660:	f0 90 6f 02 	lds	r15, 0x026F	; 0x80026f <fat+0x8>
     664:	c1 14       	cp	r12, r1
     666:	d1 04       	cpc	r13, r1
     668:	e1 04       	cpc	r14, r1
     66a:	f1 04       	cpc	r15, r1
     66c:	21 f5       	brne	.+72     	; 0x6b6 <fat_loadFileDataFromDir+0x74>
     66e:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <fat+0x16>
     672:	80 31       	cpi	r24, 0x10	; 16
     674:	c1 f4       	brne	.+48     	; 0x6a6 <fat_loadFileDataFromDir+0x64>
     676:	f1 2c       	mov	r15, r1
     678:	c7 e6       	ldi	r28, 0x67	; 103
     67a:	d2 e0       	ldi	r29, 0x02	; 2
     67c:	89 85       	ldd	r24, Y+9	; 0x09
     67e:	9a 85       	ldd	r25, Y+10	; 0x0a
     680:	ab 85       	ldd	r26, Y+11	; 0x0b
     682:	bc 85       	ldd	r27, Y+12	; 0x0c
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	6f 0d       	add	r22, r15
     68a:	71 1d       	adc	r23, r1
     68c:	81 1d       	adc	r24, r1
     68e:	91 1d       	adc	r25, r1
     690:	a8 01       	movw	r20, r16
     692:	3f de       	rcall	.-898    	; 0x312 <fat_loadFileDataFromCluster>
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	b1 f1       	breq	.+108    	; 0x704 <fat_loadFileDataFromDir+0xc2>
     698:	8d 89       	ldd	r24, Y+21	; 0x15
     69a:	f8 0e       	add	r15, r24
     69c:	8f e1       	ldi	r24, 0x1F	; 31
     69e:	8f 15       	cp	r24, r15
     6a0:	68 f7       	brcc	.-38     	; 0x67c <fat_loadFileDataFromDir+0x3a>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	2f c0       	rjmp	.+94     	; 0x704 <fat_loadFileDataFromDir+0xc2>
     6a6:	c0 90 70 02 	lds	r12, 0x0270	; 0x800270 <fat+0x9>
     6aa:	d0 90 71 02 	lds	r13, 0x0271	; 0x800271 <fat+0xa>
     6ae:	e0 90 72 02 	lds	r14, 0x0272	; 0x800272 <fat+0xb>
     6b2:	f0 90 73 02 	lds	r15, 0x0273	; 0x800273 <fat+0xc>
     6b6:	c7 e6       	ldi	r28, 0x67	; 103
     6b8:	d2 e0       	ldi	r29, 0x02	; 2
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <fat_loadFileDataFromDir+0x92>
     6bc:	c7 01       	movw	r24, r14
     6be:	b6 01       	movw	r22, r12
     6c0:	c8 dd       	rcall	.-1136   	; 0x252 <fat_clustToSec>
     6c2:	a8 01       	movw	r20, r16
     6c4:	26 de       	rcall	.-948    	; 0x312 <fat_loadFileDataFromCluster>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	e9 f0       	breq	.+58     	; 0x704 <fat_loadFileDataFromDir+0xc2>
     6ca:	c7 01       	movw	r24, r14
     6cc:	b6 01       	movw	r22, r12
     6ce:	45 df       	rcall	.-374    	; 0x55a <fat_getNextCluster>
     6d0:	6b 01       	movw	r12, r22
     6d2:	7c 01       	movw	r14, r24
     6d4:	88 ef       	ldi	r24, 0xF8	; 248
     6d6:	c8 16       	cp	r12, r24
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	d8 06       	cpc	r13, r24
     6dc:	e8 06       	cpc	r14, r24
     6de:	8f e0       	ldi	r24, 0x0F	; 15
     6e0:	f8 06       	cpc	r15, r24
     6e2:	18 f0       	brcs	.+6      	; 0x6ea <fat_loadFileDataFromDir+0xa8>
     6e4:	8e 89       	ldd	r24, Y+22	; 0x16
     6e6:	80 32       	cpi	r24, 0x20	; 32
     6e8:	61 f0       	breq	.+24     	; 0x702 <fat_loadFileDataFromDir+0xc0>
     6ea:	88 ef       	ldi	r24, 0xF8	; 248
     6ec:	c8 16       	cp	r12, r24
     6ee:	8f ef       	ldi	r24, 0xFF	; 255
     6f0:	d8 06       	cpc	r13, r24
     6f2:	e1 04       	cpc	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	10 f3       	brcs	.-60     	; 0x6bc <fat_loadFileDataFromDir+0x7a>
     6f8:	8e 89       	ldd	r24, Y+22	; 0x16
     6fa:	80 31       	cpi	r24, 0x10	; 16
     6fc:	f9 f6       	brne	.-66     	; 0x6bc <fat_loadFileDataFromDir+0x7a>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	01 c0       	rjmp	.+2      	; 0x704 <fat_loadFileDataFromDir+0xc2>
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	08 95       	ret

00000716 <fat_getFatChainClustersInRow>:
     716:	2f 92       	push	r2
     718:	3f 92       	push	r3
     71a:	4f 92       	push	r4
     71c:	5f 92       	push	r5
     71e:	6f 92       	push	r6
     720:	7f 92       	push	r7
     722:	8f 92       	push	r8
     724:	9f 92       	push	r9
     726:	af 92       	push	r10
     728:	bf 92       	push	r11
     72a:	cf 92       	push	r12
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	1b 01       	movw	r2, r22
     73c:	2c 01       	movw	r4, r24
     73e:	89 dd       	rcall	.-1262   	; 0x252 <fat_clustToSec>
     740:	ef e7       	ldi	r30, 0x7F	; 127
     742:	f4 e0       	ldi	r31, 0x04	; 4
     744:	60 83       	st	Z, r22
     746:	71 83       	std	Z+1, r23	; 0x01
     748:	82 83       	std	Z+2, r24	; 0x02
     74a:	93 83       	std	Z+3, r25	; 0x03
     74c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <fat+0x15>
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	95 83       	std	Z+5, r25	; 0x05
     754:	84 83       	std	Z+4, r24	; 0x04
     756:	72 01       	movw	r14, r4
     758:	61 01       	movw	r12, r2
     75a:	c0 e0       	ldi	r28, 0x00	; 0
     75c:	d0 e0       	ldi	r29, 0x00	; 0
     75e:	8f 01       	movw	r16, r30
     760:	0f 2e       	mov	r0, r31
     762:	f7 e6       	ldi	r31, 0x67	; 103
     764:	6f 2e       	mov	r6, r31
     766:	f2 e0       	ldi	r31, 0x02	; 2
     768:	7f 2e       	mov	r7, r31
     76a:	f0 2d       	mov	r31, r0
     76c:	c7 01       	movw	r24, r14
     76e:	b6 01       	movw	r22, r12
     770:	f4 de       	rcall	.-536    	; 0x55a <fat_getNextCluster>
     772:	46 01       	movw	r8, r12
     774:	57 01       	movw	r10, r14
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	82 1a       	sub	r8, r18
     77a:	92 0a       	sbc	r9, r18
     77c:	a2 0a       	sbc	r10, r18
     77e:	b2 0a       	sbc	r11, r18
     780:	68 15       	cp	r22, r8
     782:	79 05       	cpc	r23, r9
     784:	8a 05       	cpc	r24, r10
     786:	9b 05       	cpc	r25, r11
     788:	a1 f4       	brne	.+40     	; 0x7b2 <fat_getFatChainClustersInRow+0x9c>
     78a:	f3 01       	movw	r30, r6
     78c:	25 89       	ldd	r18, Z+21	; 0x15
     78e:	f8 01       	movw	r30, r16
     790:	44 81       	ldd	r20, Z+4	; 0x04
     792:	55 81       	ldd	r21, Z+5	; 0x05
     794:	fa 01       	movw	r30, r20
     796:	e2 0f       	add	r30, r18
     798:	f1 1d       	adc	r31, r1
     79a:	9f 01       	movw	r18, r30
     79c:	f8 01       	movw	r30, r16
     79e:	35 83       	std	Z+5, r19	; 0x05
     7a0:	24 83       	std	Z+4, r18	; 0x04
     7a2:	21 96       	adiw	r28, 0x01	; 1
     7a4:	6b 01       	movw	r12, r22
     7a6:	7c 01       	movw	r14, r24
     7a8:	c1 15       	cp	r28, r1
     7aa:	f1 e0       	ldi	r31, 0x01	; 1
     7ac:	df 07       	cpc	r29, r31
     7ae:	f1 f6       	brne	.-68     	; 0x76c <fat_getFatChainClustersInRow+0x56>
     7b0:	09 c0       	rjmp	.+18     	; 0x7c4 <fat_getFatChainClustersInRow+0xae>
     7b2:	c0 92 85 04 	sts	0x0485, r12	; 0x800485 <chain+0x6>
     7b6:	d0 92 86 04 	sts	0x0486, r13	; 0x800486 <chain+0x7>
     7ba:	e0 92 87 04 	sts	0x0487, r14	; 0x800487 <chain+0x8>
     7be:	f0 92 88 04 	sts	0x0488, r15	; 0x800488 <chain+0x9>
     7c2:	0e c0       	rjmp	.+28     	; 0x7e0 <fat_getFatChainClustersInRow+0xca>
     7c4:	52 01       	movw	r10, r4
     7c6:	41 01       	movw	r8, r2
     7c8:	2f ef       	ldi	r18, 0xFF	; 255
     7ca:	92 1a       	sub	r9, r18
     7cc:	a2 0a       	sbc	r10, r18
     7ce:	b2 0a       	sbc	r11, r18
     7d0:	80 92 85 04 	sts	0x0485, r8	; 0x800485 <chain+0x6>
     7d4:	90 92 86 04 	sts	0x0486, r9	; 0x800486 <chain+0x7>
     7d8:	a0 92 87 04 	sts	0x0487, r10	; 0x800487 <chain+0x8>
     7dc:	b0 92 88 04 	sts	0x0488, r11	; 0x800488 <chain+0x9>
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	bf 90       	pop	r11
     7f2:	af 90       	pop	r10
     7f4:	9f 90       	pop	r9
     7f6:	8f 90       	pop	r8
     7f8:	7f 90       	pop	r7
     7fa:	6f 90       	pop	r6
     7fc:	5f 90       	pop	r5
     7fe:	4f 90       	pop	r4
     800:	3f 90       	pop	r3
     802:	2f 90       	pop	r2
     804:	08 95       	ret

00000806 <fat_getFreeClustersInRow>:
     806:	8f 92       	push	r8
     808:	9f 92       	push	r9
     80a:	af 92       	push	r10
     80c:	bf 92       	push	r11
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	4b 01       	movw	r8, r22
     820:	5c 01       	movw	r10, r24
     822:	05 c0       	rjmp	.+10     	; 0x82e <fat_getFreeClustersInRow+0x28>
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	88 1a       	sub	r8, r24
     828:	98 0a       	sbc	r9, r24
     82a:	a8 0a       	sbc	r10, r24
     82c:	b8 0a       	sbc	r11, r24
     82e:	c5 01       	movw	r24, r10
     830:	b4 01       	movw	r22, r8
     832:	93 de       	rcall	.-730    	; 0x55a <fat_getNextCluster>
     834:	67 2b       	or	r22, r23
     836:	68 2b       	or	r22, r24
     838:	69 2b       	or	r22, r25
     83a:	a1 f7       	brne	.-24     	; 0x824 <fat_getFreeClustersInRow+0x1e>
     83c:	c5 01       	movw	r24, r10
     83e:	b4 01       	movw	r22, r8
     840:	08 dd       	rcall	.-1520   	; 0x252 <fat_clustToSec>
     842:	ef e7       	ldi	r30, 0x7F	; 127
     844:	f4 e0       	ldi	r31, 0x04	; 4
     846:	60 83       	st	Z, r22
     848:	71 83       	std	Z+1, r23	; 0x01
     84a:	82 83       	std	Z+2, r24	; 0x02
     84c:	93 83       	std	Z+3, r25	; 0x03
     84e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <fat+0x15>
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	95 83       	std	Z+5, r25	; 0x05
     856:	84 83       	std	Z+4, r24	; 0x04
     858:	75 01       	movw	r14, r10
     85a:	64 01       	movw	r12, r8
     85c:	ef ef       	ldi	r30, 0xFF	; 255
     85e:	ce 1a       	sub	r12, r30
     860:	de 0a       	sbc	r13, r30
     862:	ee 0a       	sbc	r14, r30
     864:	fe 0a       	sbc	r15, r30
     866:	ff ef       	ldi	r31, 0xFF	; 255
     868:	9f 1a       	sub	r9, r31
     86a:	af 0a       	sbc	r10, r31
     86c:	bf 0a       	sbc	r11, r31
     86e:	cf e7       	ldi	r28, 0x7F	; 127
     870:	d4 e0       	ldi	r29, 0x04	; 4
     872:	07 e6       	ldi	r16, 0x67	; 103
     874:	12 e0       	ldi	r17, 0x02	; 2
     876:	c7 01       	movw	r24, r14
     878:	b6 01       	movw	r22, r12
     87a:	6f de       	rcall	.-802    	; 0x55a <fat_getNextCluster>
     87c:	67 2b       	or	r22, r23
     87e:	68 2b       	or	r22, r24
     880:	69 2b       	or	r22, r25
     882:	91 f4       	brne	.+36     	; 0x8a8 <fat_getFreeClustersInRow+0xa2>
     884:	f8 01       	movw	r30, r16
     886:	25 89       	ldd	r18, Z+21	; 0x15
     888:	8c 81       	ldd	r24, Y+4	; 0x04
     88a:	9d 81       	ldd	r25, Y+5	; 0x05
     88c:	82 0f       	add	r24, r18
     88e:	91 1d       	adc	r25, r1
     890:	9d 83       	std	Y+5, r25	; 0x05
     892:	8c 83       	std	Y+4, r24	; 0x04
     894:	ff ef       	ldi	r31, 0xFF	; 255
     896:	cf 1a       	sub	r12, r31
     898:	df 0a       	sbc	r13, r31
     89a:	ef 0a       	sbc	r14, r31
     89c:	ff 0a       	sbc	r15, r31
     89e:	c8 14       	cp	r12, r8
     8a0:	d9 04       	cpc	r13, r9
     8a2:	ea 04       	cpc	r14, r10
     8a4:	fb 04       	cpc	r15, r11
     8a6:	39 f7       	brne	.-50     	; 0x876 <fat_getFreeClustersInRow+0x70>
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	9f 90       	pop	r9
     8be:	8f 90       	pop	r8
     8c0:	08 95       	ret

000008c2 <fat_setCluster>:
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	49 01       	movw	r8, r18
     8d8:	5a 01       	movw	r10, r20
     8da:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <fat+0x16>
     8de:	20 31       	cpi	r18, 0x10	; 16
     8e0:	71 f5       	brne	.+92     	; 0x93e <fat_setCluster+0x7c>
     8e2:	6b 01       	movw	r12, r22
     8e4:	7c 01       	movw	r14, r24
     8e6:	cc 0c       	add	r12, r12
     8e8:	dd 1c       	adc	r13, r13
     8ea:	ee 1c       	adc	r14, r14
     8ec:	ff 1c       	adc	r15, r15
     8ee:	b7 01       	movw	r22, r14
     8f0:	a6 01       	movw	r20, r12
     8f2:	03 2e       	mov	r0, r19
     8f4:	39 e0       	ldi	r19, 0x09	; 9
     8f6:	76 95       	lsr	r23
     8f8:	67 95       	ror	r22
     8fa:	57 95       	ror	r21
     8fc:	47 95       	ror	r20
     8fe:	3a 95       	dec	r19
     900:	d1 f7       	brne	.-12     	; 0x8f6 <fat_setCluster+0x34>
     902:	30 2d       	mov	r19, r0
     904:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <fat+0x11>
     908:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <fat+0x12>
     90c:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <fat+0x13>
     910:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <fat+0x14>
     914:	8a 01       	movw	r16, r20
     916:	9b 01       	movw	r18, r22
     918:	08 0f       	add	r16, r24
     91a:	19 1f       	adc	r17, r25
     91c:	2a 1f       	adc	r18, r26
     91e:	3b 1f       	adc	r19, r27
     920:	c9 01       	movw	r24, r18
     922:	b8 01       	movw	r22, r16
     924:	08 dc       	rcall	.-2032   	; 0x136 <fat_loadSector>
     926:	11 e0       	ldi	r17, 0x01	; 1
     928:	d1 22       	and	r13, r17
     92a:	ee 24       	eor	r14, r14
     92c:	ff 24       	eor	r15, r15
     92e:	c6 01       	movw	r24, r12
     930:	48 96       	adiw	r24, 0x18	; 24
     932:	fc 01       	movw	r30, r24
     934:	e9 59       	subi	r30, 0x99	; 153
     936:	fd 4f       	sbci	r31, 0xFD	; 253
     938:	91 82       	std	Z+1, r9	; 0x01
     93a:	80 82       	st	Z, r8
     93c:	33 c0       	rjmp	.+102    	; 0x9a4 <fat_setCluster+0xe2>
     93e:	6b 01       	movw	r12, r22
     940:	7c 01       	movw	r14, r24
     942:	cc 0c       	add	r12, r12
     944:	dd 1c       	adc	r13, r13
     946:	ee 1c       	adc	r14, r14
     948:	ff 1c       	adc	r15, r15
     94a:	cc 0c       	add	r12, r12
     94c:	dd 1c       	adc	r13, r13
     94e:	ee 1c       	adc	r14, r14
     950:	ff 1c       	adc	r15, r15
     952:	b7 01       	movw	r22, r14
     954:	a6 01       	movw	r20, r12
     956:	03 2e       	mov	r0, r19
     958:	39 e0       	ldi	r19, 0x09	; 9
     95a:	76 95       	lsr	r23
     95c:	67 95       	ror	r22
     95e:	57 95       	ror	r21
     960:	47 95       	ror	r20
     962:	3a 95       	dec	r19
     964:	d1 f7       	brne	.-12     	; 0x95a <fat_setCluster+0x98>
     966:	30 2d       	mov	r19, r0
     968:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <fat+0x11>
     96c:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <fat+0x12>
     970:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <fat+0x13>
     974:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <fat+0x14>
     978:	8a 01       	movw	r16, r20
     97a:	9b 01       	movw	r18, r22
     97c:	08 0f       	add	r16, r24
     97e:	19 1f       	adc	r17, r25
     980:	2a 1f       	adc	r18, r26
     982:	3b 1f       	adc	r19, r27
     984:	c9 01       	movw	r24, r18
     986:	b8 01       	movw	r22, r16
     988:	d6 db       	rcall	.-2132   	; 0x136 <fat_loadSector>
     98a:	11 e0       	ldi	r17, 0x01	; 1
     98c:	d1 22       	and	r13, r17
     98e:	ee 24       	eor	r14, r14
     990:	ff 24       	eor	r15, r15
     992:	c6 01       	movw	r24, r12
     994:	48 96       	adiw	r24, 0x18	; 24
     996:	fc 01       	movw	r30, r24
     998:	e9 59       	subi	r30, 0x99	; 153
     99a:	fd 4f       	sbci	r31, 0xFD	; 253
     99c:	80 82       	st	Z, r8
     99e:	91 82       	std	Z+1, r9	; 0x01
     9a0:	a2 82       	std	Z+2, r10	; 0x02
     9a2:	b3 82       	std	Z+3, r11	; 0x03
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <fat+0x4>
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
     9b6:	bf 90       	pop	r11
     9b8:	af 90       	pop	r10
     9ba:	9f 90       	pop	r9
     9bc:	8f 90       	pop	r8
     9be:	08 95       	ret

000009c0 <fat_makeFileEntry>:
     9c0:	2f 92       	push	r2
     9c2:	3f 92       	push	r3
     9c4:	4f 92       	push	r4
     9c6:	5f 92       	push	r5
     9c8:	7f 92       	push	r7
     9ca:	8f 92       	push	r8
     9cc:	9f 92       	push	r9
     9ce:	af 92       	push	r10
     9d0:	bf 92       	push	r11
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	1f 92       	push	r1
     9e4:	1f 92       	push	r1
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	9a 83       	std	Y+2, r25	; 0x02
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	76 2e       	mov	r7, r22
     9f0:	c0 90 6c 02 	lds	r12, 0x026C	; 0x80026c <fat+0x5>
     9f4:	d0 90 6d 02 	lds	r13, 0x026D	; 0x80026d <fat+0x6>
     9f8:	e0 90 6e 02 	lds	r14, 0x026E	; 0x80026e <fat+0x7>
     9fc:	f0 90 6f 02 	lds	r15, 0x026F	; 0x80026f <fat+0x8>
     a00:	c1 14       	cp	r12, r1
     a02:	d1 04       	cpc	r13, r1
     a04:	e1 04       	cpc	r14, r1
     a06:	f1 04       	cpc	r15, r1
     a08:	49 f4       	brne	.+18     	; 0xa1c <fat_makeFileEntry+0x5c>
     a0a:	e7 e6       	ldi	r30, 0x67	; 103
     a0c:	f2 e0       	ldi	r31, 0x02	; 2
     a0e:	c1 84       	ldd	r12, Z+9	; 0x09
     a10:	d2 84       	ldd	r13, Z+10	; 0x0a
     a12:	e3 84       	ldd	r14, Z+11	; 0x0b
     a14:	f4 84       	ldd	r15, Z+12	; 0x0c
     a16:	86 89       	ldd	r24, Z+22	; 0x16
     a18:	80 31       	cpi	r24, 0x10	; 16
     a1a:	19 f0       	breq	.+6      	; 0xa22 <fat_makeFileEntry+0x62>
     a1c:	07 e6       	ldi	r16, 0x67	; 103
     a1e:	12 e0       	ldi	r17, 0x02	; 2
     a20:	17 c0       	rjmp	.+46     	; 0xa50 <fat_makeFileEntry+0x90>
     a22:	10 e0       	ldi	r17, 0x00	; 0
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	c7 01       	movw	r24, r14
     a28:	b6 01       	movw	r22, r12
     a2a:	61 0f       	add	r22, r17
     a2c:	71 1d       	adc	r23, r1
     a2e:	81 1d       	adc	r24, r1
     a30:	91 1d       	adc	r25, r1
     a32:	c6 db       	rcall	.-2164   	; 0x1c0 <fat_getFreeRowsOfCluster>
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	09 f4       	brne	.+2      	; 0xa3a <fat_makeFileEntry+0x7a>
     a38:	b5 c0       	rjmp	.+362    	; 0xba4 <fat_makeFileEntry+0x1e4>
     a3a:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <fat+0x15>
     a3e:	18 0f       	add	r17, r24
     a40:	10 32       	cpi	r17, 0x20	; 32
     a42:	80 f3       	brcs	.-32     	; 0xa24 <fat_makeFileEntry+0x64>
     a44:	af c0       	rjmp	.+350    	; 0xba4 <fat_makeFileEntry+0x1e4>
     a46:	6b 01       	movw	r12, r22
     a48:	7c 01       	movw	r14, r24
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <fat_makeFileEntry+0x90>
     a4c:	6b 01       	movw	r12, r22
     a4e:	7c 01       	movw	r14, r24
     a50:	c7 01       	movw	r24, r14
     a52:	b6 01       	movw	r22, r12
     a54:	fe db       	rcall	.-2052   	; 0x252 <fat_clustToSec>
     a56:	41 e0       	ldi	r20, 0x01	; 1
     a58:	b3 db       	rcall	.-2202   	; 0x1c0 <fat_getFreeRowsOfCluster>
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	09 f4       	brne	.+2      	; 0xa60 <fat_makeFileEntry+0xa0>
     a5e:	a2 c0       	rjmp	.+324    	; 0xba4 <fat_makeFileEntry+0x1e4>
     a60:	80 90 8f 04 	lds	r8, 0x048F	; 0x80048f <file+0x6>
     a64:	90 90 90 04 	lds	r9, 0x0490	; 0x800490 <file+0x7>
     a68:	a0 90 91 04 	lds	r10, 0x0491	; 0x800491 <file+0x8>
     a6c:	b0 90 92 04 	lds	r11, 0x0492	; 0x800492 <file+0x9>
     a70:	c7 01       	movw	r24, r14
     a72:	b6 01       	movw	r22, r12
     a74:	72 dd       	rcall	.-1308   	; 0x55a <fat_getNextCluster>
     a76:	68 3f       	cpi	r22, 0xF8	; 248
     a78:	2f ef       	ldi	r18, 0xFF	; 255
     a7a:	72 07       	cpc	r23, r18
     a7c:	82 07       	cpc	r24, r18
     a7e:	2f e0       	ldi	r18, 0x0F	; 15
     a80:	92 07       	cpc	r25, r18
     a82:	20 f0       	brcs	.+8      	; 0xa8c <fat_makeFileEntry+0xcc>
     a84:	f8 01       	movw	r30, r16
     a86:	26 89       	ldd	r18, Z+22	; 0x16
     a88:	20 32       	cpi	r18, 0x20	; 32
     a8a:	51 f0       	breq	.+20     	; 0xaa0 <fat_makeFileEntry+0xe0>
     a8c:	68 3f       	cpi	r22, 0xF8	; 248
     a8e:	ff ef       	ldi	r31, 0xFF	; 255
     a90:	7f 07       	cpc	r23, r31
     a92:	81 05       	cpc	r24, r1
     a94:	91 05       	cpc	r25, r1
     a96:	b8 f2       	brcs	.-82     	; 0xa46 <fat_makeFileEntry+0x86>
     a98:	f8 01       	movw	r30, r16
     a9a:	26 89       	ldd	r18, Z+22	; 0x16
     a9c:	20 31       	cpi	r18, 0x10	; 16
     a9e:	b1 f6       	brne	.-84     	; 0xa4c <fat_makeFileEntry+0x8c>
     aa0:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <chain>
     aa4:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <chain+0x1>
     aa8:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <chain+0x2>
     aac:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <chain+0x3>
     ab0:	e9 db       	rcall	.-2094   	; 0x284 <fat_secToClust>
     ab2:	1b 01       	movw	r2, r22
     ab4:	2c 01       	movw	r4, r24
     ab6:	9b 01       	movw	r18, r22
     ab8:	ac 01       	movw	r20, r24
     aba:	c7 01       	movw	r24, r14
     abc:	b6 01       	movw	r22, r12
     abe:	01 df       	rcall	.-510    	; 0x8c2 <fat_setCluster>
     ac0:	2f ef       	ldi	r18, 0xFF	; 255
     ac2:	3f ef       	ldi	r19, 0xFF	; 255
     ac4:	4f ef       	ldi	r20, 0xFF	; 255
     ac6:	5f e0       	ldi	r21, 0x0F	; 15
     ac8:	c2 01       	movw	r24, r4
     aca:	b1 01       	movw	r22, r2
     acc:	fa de       	rcall	.-524    	; 0x8c2 <fat_setCluster>
     ace:	60 91 8f 04 	lds	r22, 0x048F	; 0x80048f <file+0x6>
     ad2:	70 91 90 04 	lds	r23, 0x0490	; 0x800490 <file+0x7>
     ad6:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <file+0x8>
     ada:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <file+0x9>
     ade:	4f e7       	ldi	r20, 0x7F	; 127
     ae0:	52 e0       	ldi	r21, 0x02	; 2
     ae2:	32 d6       	rcall	.+3172   	; 0x1748 <mmc_write_sector>
     ae4:	ef e7       	ldi	r30, 0x7F	; 127
     ae6:	f4 e0       	ldi	r31, 0x04	; 4
     ae8:	8f e7       	ldi	r24, 0x7F	; 127
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	12 92       	st	-Z, r1
     aee:	e8 17       	cp	r30, r24
     af0:	f9 07       	cpc	r31, r25
     af2:	e1 f7       	brne	.-8      	; 0xaec <fat_makeFileEntry+0x12c>
     af4:	51 2c       	mov	r5, r1
     af6:	07 e6       	ldi	r16, 0x67	; 103
     af8:	12 e0       	ldi	r17, 0x02	; 2
     afa:	01 c0       	rjmp	.+2      	; 0xafe <fat_makeFileEntry+0x13e>
     afc:	59 2e       	mov	r5, r25
     afe:	ef e7       	ldi	r30, 0x7F	; 127
     b00:	f4 e0       	ldi	r31, 0x04	; 4
     b02:	80 81       	ld	r24, Z
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	a2 81       	ldd	r26, Z+2	; 0x02
     b08:	b3 81       	ldd	r27, Z+3	; 0x03
     b0a:	bc 01       	movw	r22, r24
     b0c:	cd 01       	movw	r24, r26
     b0e:	65 0d       	add	r22, r5
     b10:	71 1d       	adc	r23, r1
     b12:	81 1d       	adc	r24, r1
     b14:	91 1d       	adc	r25, r1
     b16:	08 db       	rcall	.-2544   	; 0x128 <fat_writeSector>
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	95 0d       	add	r25, r5
     b1c:	f8 01       	movw	r30, r16
     b1e:	85 89       	ldd	r24, Z+21	; 0x15
     b20:	58 16       	cp	r5, r24
     b22:	60 f3       	brcs	.-40     	; 0xafc <fat_makeFileEntry+0x13c>
     b24:	ef e7       	ldi	r30, 0x7F	; 127
     b26:	f4 e0       	ldi	r31, 0x04	; 4
     b28:	20 80       	ld	r2, Z
     b2a:	31 80       	ldd	r3, Z+1	; 0x01
     b2c:	42 80       	ldd	r4, Z+2	; 0x02
     b2e:	53 80       	ldd	r5, Z+3	; 0x03
     b30:	20 92 8f 04 	sts	0x048F, r2	; 0x80048f <file+0x6>
     b34:	30 92 90 04 	sts	0x0490, r3	; 0x800490 <file+0x7>
     b38:	40 92 91 04 	sts	0x0491, r4	; 0x800491 <file+0x8>
     b3c:	50 92 92 04 	sts	0x0492, r5	; 0x800492 <file+0x9>
     b40:	c5 01       	movw	r24, r10
     b42:	b4 01       	movw	r22, r8
     b44:	9f db       	rcall	.-2242   	; 0x284 <fat_secToClust>
     b46:	60 93 85 04 	sts	0x0485, r22	; 0x800485 <chain+0x6>
     b4a:	70 93 86 04 	sts	0x0486, r23	; 0x800486 <chain+0x7>
     b4e:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <chain+0x8>
     b52:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <chain+0x9>
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	c2 01       	movw	r24, r4
     b5a:	b1 01       	movw	r22, r2
     b5c:	31 db       	rcall	.-2462   	; 0x1c0 <fat_getFreeRowsOfCluster>
     b5e:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <chain+0x4>
     b62:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <chain+0x5>
     b66:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <fat+0x15>
     b6a:	24 2f       	mov	r18, r20
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	28 17       	cp	r18, r24
     b70:	39 07       	cpc	r19, r25
     b72:	a8 f4       	brcc	.+42     	; 0xb9e <fat_makeFileEntry+0x1de>
     b74:	ef e7       	ldi	r30, 0x7F	; 127
     b76:	f4 e0       	ldi	r31, 0x04	; 4
     b78:	c0 80       	ld	r12, Z
     b7a:	d1 80       	ldd	r13, Z+1	; 0x01
     b7c:	e2 80       	ldd	r14, Z+2	; 0x02
     b7e:	f3 80       	ldd	r15, Z+3	; 0x03
     b80:	46 01       	movw	r8, r12
     b82:	57 01       	movw	r10, r14
     b84:	84 0e       	add	r8, r20
     b86:	91 1c       	adc	r9, r1
     b88:	a1 1c       	adc	r10, r1
     b8a:	b1 1c       	adc	r11, r1
     b8c:	80 82       	st	Z, r8
     b8e:	91 82       	std	Z+1, r9	; 0x01
     b90:	a2 82       	std	Z+2, r10	; 0x02
     b92:	b3 82       	std	Z+3, r11	; 0x03
     b94:	82 1b       	sub	r24, r18
     b96:	93 0b       	sbc	r25, r19
     b98:	95 83       	std	Z+5, r25	; 0x05
     b9a:	84 83       	std	Z+4, r24	; 0x04
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <fat_makeFileEntry+0x1e4>
     b9e:	c7 01       	movw	r24, r14
     ba0:	b6 01       	movw	r22, r12
     ba2:	31 de       	rcall	.-926    	; 0x806 <fat_getFreeClustersInRow>
     ba4:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <file+0x6>
     ba8:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <file+0x7>
     bac:	a0 91 91 04 	lds	r26, 0x0491	; 0x800491 <file+0x8>
     bb0:	b0 91 92 04 	lds	r27, 0x0492	; 0x800492 <file+0x9>
     bb4:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <file+0x15>
     bb8:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <file+0x16>
     bbc:	a0 93 a0 04 	sts	0x04A0, r26	; 0x8004a0 <file+0x17>
     bc0:	b0 93 a1 04 	sts	0x04A1, r27	; 0x8004a1 <file+0x18>
     bc4:	0f 2e       	mov	r0, r31
     bc6:	ff e7       	ldi	r31, 0x7F	; 127
     bc8:	cf 2e       	mov	r12, r31
     bca:	f4 e0       	ldi	r31, 0x04	; 4
     bcc:	df 2e       	mov	r13, r31
     bce:	f0 2d       	mov	r31, r0
     bd0:	f6 01       	movw	r30, r12
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	54 db       	rcall	.-2392   	; 0x284 <fat_secToClust>
     bdc:	9b 01       	movw	r18, r22
     bde:	ac 01       	movw	r20, r24
     be0:	60 93 9a 04 	sts	0x049A, r22	; 0x80049a <file+0x11>
     be4:	70 93 9b 04 	sts	0x049B, r23	; 0x80049b <file+0x12>
     be8:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <file+0x13>
     bec:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <file+0x14>
     bf0:	f6 01       	movw	r30, r12
     bf2:	66 83       	std	Z+6, r22	; 0x06
     bf4:	77 83       	std	Z+7, r23	; 0x07
     bf6:	80 87       	std	Z+8, r24	; 0x08
     bf8:	91 87       	std	Z+9, r25	; 0x09
     bfa:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <file+0xa>
     bfe:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <file+0xb>
     c02:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <file+0xc>
     c06:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <file+0xd>
     c0a:	e1 2c       	mov	r14, r1
     c0c:	f1 2c       	mov	r15, r1
     c0e:	87 01       	movw	r16, r14
     c10:	67 2d       	mov	r22, r7
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	1c dc       	rcall	.-1992   	; 0x450 <fat_makeSfnDataEntry>
     c18:	60 91 8f 04 	lds	r22, 0x048F	; 0x80048f <file+0x6>
     c1c:	70 91 90 04 	lds	r23, 0x0490	; 0x800490 <file+0x7>
     c20:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <file+0x8>
     c24:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <file+0x9>
     c28:	4f e7       	ldi	r20, 0x7F	; 127
     c2a:	52 e0       	ldi	r21, 0x02	; 2
     c2c:	8d d5       	rcall	.+2842   	; 0x1748 <mmc_write_sector>
     c2e:	f6 01       	movw	r30, r12
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	a2 81       	ldd	r26, Z+2	; 0x02
     c36:	b3 81       	ldd	r27, Z+3	; 0x03
     c38:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <file+0x6>
     c3c:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <file+0x7>
     c40:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <file+0x8>
     c44:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <file+0x9>
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	af 90       	pop	r10
     c60:	9f 90       	pop	r9
     c62:	8f 90       	pop	r8
     c64:	7f 90       	pop	r7
     c66:	5f 90       	pop	r5
     c68:	4f 90       	pop	r4
     c6a:	3f 90       	pop	r3
     c6c:	2f 90       	pop	r2
     c6e:	08 95       	ret

00000c70 <fat_setClusterChain>:
     c70:	4f 92       	push	r4
     c72:	5f 92       	push	r5
     c74:	6f 92       	push	r6
     c76:	7f 92       	push	r7
     c78:	8f 92       	push	r8
     c7a:	9f 92       	push	r9
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	6b 01       	movw	r12, r22
     c8a:	7c 01       	movw	r14, r24
     c8c:	29 01       	movw	r4, r18
     c8e:	3a 01       	movw	r6, r20
     c90:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <chain+0x6>
     c94:	70 91 86 04 	lds	r23, 0x0486	; 0x800486 <chain+0x7>
     c98:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <chain+0x8>
     c9c:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <chain+0x9>
     ca0:	a7 01       	movw	r20, r14
     ca2:	96 01       	movw	r18, r12
     ca4:	0e de       	rcall	.-996    	; 0x8c2 <fat_setCluster>
     ca6:	c4 14       	cp	r12, r4
     ca8:	d5 04       	cpc	r13, r5
     caa:	e6 04       	cpc	r14, r6
     cac:	f7 04       	cpc	r15, r7
     cae:	99 f0       	breq	.+38     	; 0xcd6 <fat_setClusterChain+0x66>
     cb0:	46 01       	movw	r8, r12
     cb2:	57 01       	movw	r10, r14
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	88 1a       	sub	r8, r24
     cb8:	98 0a       	sbc	r9, r24
     cba:	a8 0a       	sbc	r10, r24
     cbc:	b8 0a       	sbc	r11, r24
     cbe:	a5 01       	movw	r20, r10
     cc0:	94 01       	movw	r18, r8
     cc2:	c7 01       	movw	r24, r14
     cc4:	b6 01       	movw	r22, r12
     cc6:	fd dd       	rcall	.-1030   	; 0x8c2 <fat_setCluster>
     cc8:	75 01       	movw	r14, r10
     cca:	64 01       	movw	r12, r8
     ccc:	48 14       	cp	r4, r8
     cce:	59 04       	cpc	r5, r9
     cd0:	6a 04       	cpc	r6, r10
     cd2:	7b 04       	cpc	r7, r11
     cd4:	69 f7       	brne	.-38     	; 0xcb0 <fat_setClusterChain+0x40>
     cd6:	2f ef       	ldi	r18, 0xFF	; 255
     cd8:	3f ef       	ldi	r19, 0xFF	; 255
     cda:	4f ef       	ldi	r20, 0xFF	; 255
     cdc:	5f e0       	ldi	r21, 0x0F	; 15
     cde:	c3 01       	movw	r24, r6
     ce0:	b2 01       	movw	r22, r4
     ce2:	ef dd       	rcall	.-1058   	; 0x8c2 <fat_setCluster>
     ce4:	40 92 85 04 	sts	0x0485, r4	; 0x800485 <chain+0x6>
     ce8:	50 92 86 04 	sts	0x0486, r5	; 0x800486 <chain+0x7>
     cec:	60 92 87 04 	sts	0x0487, r6	; 0x800487 <chain+0x8>
     cf0:	70 92 88 04 	sts	0x0488, r7	; 0x800488 <chain+0x9>
     cf4:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <fat+0x4>
     cf8:	60 91 8f 04 	lds	r22, 0x048F	; 0x80048f <file+0x6>
     cfc:	70 91 90 04 	lds	r23, 0x0490	; 0x800490 <file+0x7>
     d00:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <file+0x8>
     d04:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <file+0x9>
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	52 e0       	ldi	r21, 0x02	; 2
     d0c:	1d d5       	rcall	.+2618   	; 0x1748 <mmc_write_sector>
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	9f 90       	pop	r9
     d1c:	8f 90       	pop	r8
     d1e:	7f 90       	pop	r7
     d20:	6f 90       	pop	r6
     d22:	5f 90       	pop	r5
     d24:	4f 90       	pop	r4
     d26:	08 95       	ret

00000d28 <fat_loadFatData>:
//***************************************************************************************************************
// Initialisiert die Fat(16/32) daten, wie: root directory sektor, daten sektor, fat sektor...
// siehe auch Fatgen103.pdf. ist NICHT auf performance optimiert!
// byte/sector, byte/cluster, anzahl der fats, sector/fat ... (halt alle wichtigen daten zum lesen ders datei systems!)
//*****************************************************************<**********************************************
uint8_t fat_loadFatData(void){
     d28:	8f 92       	push	r8
     d2a:	9f 92       	push	r9
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	cf 93       	push	r28
	uint32_t 	secOfFirstPartition;				// ist 1. sektor der 1. partition aus dem MBR
	#if (MMC_ENDIANNESS_LITTLE==TRUE)
		void *vsector;
	#endif

	if(TRUE==mmc_read_sector(0,fat.sector)){				//startsektor bestimmen
     d3a:	4f e7       	ldi	r20, 0x7F	; 127
     d3c:	52 e0       	ldi	r21, 0x02	; 2
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	cb 01       	movw	r24, r22
     d44:	42 d5       	rcall	.+2692   	; 0x17ca <mmc_read_sector>
     d46:	c8 2f       	mov	r28, r24
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <fat_loadFatData+0x26>
     d4c:	94 c0       	rjmp	.+296    	; 0xe76 <fat_loadFatData+0x14e>
		secOfFirstPartition = 0;
		if( fat.sector[457] == 0 ){		
     d4e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <fat+0x1e1>
     d52:	81 11       	cpse	r24, r1
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <fat_loadFatData+0x4a>
			#if (MMC_ENDIANNESS_LITTLE==TRUE)
				vsector =& fat.sector[454];
				secOfFirstPartition = *(uint32_t*)vsector;
     d56:	80 90 45 04 	lds	r8, 0x0445	; 0x800445 <fat+0x1de>
     d5a:	90 90 46 04 	lds	r9, 0x0446	; 0x800446 <fat+0x1df>
     d5e:	a0 90 47 04 	lds	r10, 0x0447	; 0x800447 <fat+0x1e0>
     d62:	b0 90 48 04 	lds	r11, 0x0448	; 0x800448 <fat+0x1e1>
				secOfFirstPartition |= fat.sector[455];
				secOfFirstPartition <<= 8;
	
				secOfFirstPartition |= fat.sector[454];
			#endif
			mmc_read_sector(secOfFirstPartition,fat.sector);		// ist kein superfloppy gewesen
     d66:	4f e7       	ldi	r20, 0x7F	; 127
     d68:	52 e0       	ldi	r21, 0x02	; 2
     d6a:	c5 01       	movw	r24, r10
     d6c:	b4 01       	movw	r22, r8
     d6e:	2d d5       	rcall	.+2650   	; 0x17ca <mmc_read_sector>
     d70:	03 c0       	rjmp	.+6      	; 0xd78 <fat_loadFatData+0x50>
	#if (MMC_ENDIANNESS_LITTLE==TRUE)
		void *vsector;
	#endif

	if(TRUE==mmc_read_sector(0,fat.sector)){				//startsektor bestimmen
		secOfFirstPartition = 0;
     d72:	81 2c       	mov	r8, r1
     d74:	91 2c       	mov	r9, r1
     d76:	54 01       	movw	r10, r8
				secOfFirstPartition |= fat.sector[454];
			#endif
			mmc_read_sector(secOfFirstPartition,fat.sector);		// ist kein superfloppy gewesen
		}
					
		fat.secPerClust=fat.sector[13];		// fat.secPerClust, 13 only (power of 2)
     d78:	e7 e6       	ldi	r30, 0x67	; 103
     d7a:	f2 e0       	ldi	r31, 0x02	; 2
     d7c:	85 a1       	ldd	r24, Z+37	; 0x25
     d7e:	85 8b       	std	Z+21, r24	; 0x15

		#if (MMC_ENDIANNESS_LITTLE==TRUE)
			vsector =& fat.sector[14];
			fat.fatSec=*(uint16_t*)vsector;
     d80:	c6 a0       	ldd	r12, Z+38	; 0x26
     d82:	d7 a0       	ldd	r13, Z+39	; 0x27
     d84:	e1 2c       	mov	r14, r1
     d86:	f1 2c       	mov	r15, r1
     d88:	c1 8a       	std	Z+17, r12	; 0x11
     d8a:	d2 8a       	std	Z+18, r13	; 0x12
     d8c:	e3 8a       	std	Z+19, r14	; 0x13
     d8e:	f4 8a       	std	Z+20, r15	; 0x14

			vsector=&fat.sector[17];
			rootEntCnt=*(uint16_t*)vsector;

			vsector=&fat.sector[22];
			fatSz16=*(uint16_t*)vsector;
     d90:	86 a5       	ldd	r24, Z+46	; 0x2e
     d92:	97 a5       	ldd	r25, Z+47	; 0x2f
			fatSz16 = fat.sector[23];
			fatSz16 <<= 8;
			fatSz16 |= fat.sector[22];
		#endif

		fat.rootDir	 = ( (rootEntCnt <<5) + 511 ) /512;	// ist 0 bei fat 32, sonst der root dir sektor
     d94:	41 a5       	ldd	r20, Z+41	; 0x29
     d96:	52 a5       	ldd	r21, Z+42	; 0x2a
     d98:	44 0f       	add	r20, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	42 95       	swap	r20
     d9e:	52 95       	swap	r21
     da0:	50 7f       	andi	r21, 0xF0	; 240
     da2:	54 27       	eor	r21, r20
     da4:	40 7f       	andi	r20, 0xF0	; 240
     da6:	54 27       	eor	r21, r20
     da8:	41 50       	subi	r20, 0x01	; 1
     daa:	5e 4f       	sbci	r21, 0xFE	; 254
     dac:	45 2f       	mov	r20, r21
     dae:	55 27       	eor	r21, r21
     db0:	46 95       	lsr	r20
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0

		if(fat.rootDir==0){									// FAT32 spezifisch (die pruefung so, ist nicht spezifikation konform !).
     db6:	41 15       	cp	r20, r1
     db8:	51 05       	cpc	r21, r1
     dba:	61 05       	cpc	r22, r1
     dbc:	71 05       	cpc	r23, r1
     dbe:	f1 f4       	brne	.+60     	; 0xdfc <fat_loadFatData+0xd4>
			#if (MMC_ENDIANNESS_LITTLE==TRUE)
				vsector=&fat.sector[36];
				fatSz32=*(uint32_t *)vsector;
     dc0:	24 ad       	ldd	r18, Z+60	; 0x3c
     dc2:	35 ad       	ldd	r19, Z+61	; 0x3d
     dc4:	46 ad       	ldd	r20, Z+62	; 0x3e
     dc6:	57 ad       	ldd	r21, Z+63	; 0x3f

				vsector=&fat.sector[44];
				fat.rootDir=*(uint32_t *)vsector;
     dc8:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <fat+0x44>
     dcc:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <fat+0x45>
     dd0:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <fat+0x46>
     dd4:	b0 91 ae 02 	lds	r27, 0x02AE	; 0x8002ae <fat+0x47>
     dd8:	81 87       	std	Z+9, r24	; 0x09
     dda:	92 87       	std	Z+10, r25	; 0x0a
     ddc:	a3 87       	std	Z+11, r26	; 0x0b
     dde:	b4 87       	std	Z+12, r27	; 0x0c
				fat.rootDir |= fat.sector[45];
				fat.rootDir <<= 8;
				fat.rootDir |= fat.sector[44];
			#endif

			fat.dataDirSec = fat.fatSec + (fatSz32 * fat.sector[16]);	// data sector (beginnt mit cluster 2)
     de0:	a0 a5       	ldd	r26, Z+40	; 0x28
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	76 d5       	rcall	.+2796   	; 0x18d2 <__muluhisi3>
     de6:	c6 0e       	add	r12, r22
     de8:	d7 1e       	adc	r13, r23
     dea:	e8 1e       	adc	r14, r24
     dec:	f9 1e       	adc	r15, r25
     dee:	c5 86       	std	Z+13, r12	; 0x0d
     df0:	d6 86       	std	Z+14, r13	; 0x0e
     df2:	e7 86       	std	Z+15, r14	; 0x0f
     df4:	f0 8a       	std	Z+16, r15	; 0x10
			fat.fatType=32;									// fat typ
     df6:	80 e2       	ldi	r24, 0x20	; 32
     df8:	86 8b       	std	Z+22, r24	; 0x16
     dfa:	1e c0       	rjmp	.+60     	; 0xe38 <fat_loadFatData+0x110>
			}

		else{												// FAT16	spezifisch
			fat.dataDirSec = fat.fatSec + (fatSz16 * fat.sector[16]) + fat.rootDir;		// data sektor (beginnt mit cluster 2)
     dfc:	e7 e6       	ldi	r30, 0x67	; 103
     dfe:	f2 e0       	ldi	r31, 0x02	; 2
     e00:	a0 a5       	ldd	r26, Z+40	; 0x28
     e02:	a8 9f       	mul	r26, r24
     e04:	90 01       	movw	r18, r0
     e06:	a9 9f       	mul	r26, r25
     e08:	30 0d       	add	r19, r0
     e0a:	11 24       	eor	r1, r1
     e0c:	c2 0e       	add	r12, r18
     e0e:	d3 1e       	adc	r13, r19
     e10:	e1 1c       	adc	r14, r1
     e12:	f1 1c       	adc	r15, r1
     e14:	4c 0d       	add	r20, r12
     e16:	5d 1d       	adc	r21, r13
     e18:	6e 1d       	adc	r22, r14
     e1a:	7f 1d       	adc	r23, r15
     e1c:	45 87       	std	Z+13, r20	; 0x0d
     e1e:	56 87       	std	Z+14, r21	; 0x0e
     e20:	67 87       	std	Z+15, r22	; 0x0f
     e22:	70 8b       	std	Z+16, r23	; 0x10
			fat.rootDir=fat.dataDirSec-fat.rootDir;			// root dir sektor, da nicht im datenbereich (cluster)
			fat.rootDir+=secOfFirstPartition;				// addiert den startsektor auf 	"
     e24:	c8 0c       	add	r12, r8
     e26:	d9 1c       	adc	r13, r9
     e28:	ea 1c       	adc	r14, r10
     e2a:	fb 1c       	adc	r15, r11
     e2c:	c1 86       	std	Z+9, r12	; 0x09
     e2e:	d2 86       	std	Z+10, r13	; 0x0a
     e30:	e3 86       	std	Z+11, r14	; 0x0b
     e32:	f4 86       	std	Z+12, r15	; 0x0c
			fat.fatType=16;									// fat typ
     e34:	80 e1       	ldi	r24, 0x10	; 16
     e36:	86 8b       	std	Z+22, r24	; 0x16
			}

		fat.fatSec+=secOfFirstPartition;					// addiert den startsektor auf
     e38:	e7 e6       	ldi	r30, 0x67	; 103
     e3a:	f2 e0       	ldi	r31, 0x02	; 2
     e3c:	81 89       	ldd	r24, Z+17	; 0x11
     e3e:	92 89       	ldd	r25, Z+18	; 0x12
     e40:	a3 89       	ldd	r26, Z+19	; 0x13
     e42:	b4 89       	ldd	r27, Z+20	; 0x14
     e44:	88 0d       	add	r24, r8
     e46:	99 1d       	adc	r25, r9
     e48:	aa 1d       	adc	r26, r10
     e4a:	bb 1d       	adc	r27, r11
     e4c:	81 8b       	std	Z+17, r24	; 0x11
     e4e:	92 8b       	std	Z+18, r25	; 0x12
     e50:	a3 8b       	std	Z+19, r26	; 0x13
     e52:	b4 8b       	std	Z+20, r27	; 0x14
		fat.dataDirSec+=secOfFirstPartition;				// addiert den startsektor auf (umrechnung von absolut auf real)
     e54:	85 85       	ldd	r24, Z+13	; 0x0d
     e56:	96 85       	ldd	r25, Z+14	; 0x0e
     e58:	a7 85       	ldd	r26, Z+15	; 0x0f
     e5a:	b0 89       	ldd	r27, Z+16	; 0x10
     e5c:	88 0e       	add	r8, r24
     e5e:	99 1e       	adc	r9, r25
     e60:	aa 1e       	adc	r10, r26
     e62:	bb 1e       	adc	r11, r27
     e64:	85 86       	std	Z+13, r8	; 0x0d
     e66:	96 86       	std	Z+14, r9	; 0x0e
     e68:	a7 86       	std	Z+15, r10	; 0x0f
     e6a:	b0 8a       	std	Z+16, r11	; 0x10
		fat.dir=0;											// dir auf '0'==root dir, sonst 1.Cluster des dir
     e6c:	15 82       	std	Z+5, r1	; 0x05
     e6e:	16 82       	std	Z+6, r1	; 0x06
     e70:	17 82       	std	Z+7, r1	; 0x07
     e72:	10 86       	std	Z+8, r1	; 0x08
		return TRUE;
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <fat_loadFatData+0x150>
		}

return FALSE;			// sector nicht gelesen, fat nicht initialisiert!!
     e76:	c0 e0       	ldi	r28, 0x00	; 0
}
     e78:	8c 2f       	mov	r24, r28
     e7a:	cf 91       	pop	r28
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	8f 90       	pop	r8
     e8c:	08 95       	ret

00000e8e <ffopen>:

	#endif

	// "." und ".." eintrag auf karte schreiben
	mmc_write_sector(chain.startSectors,fat.sector);
}
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
     e98:	16 2f       	mov	r17, r22
     e9a:	d3 db       	rcall	.-2138   	; 0x642 <fat_loadFileDataFromDir>
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	c1 f4       	brne	.+48     	; 0xed0 <ffopen+0x42>
     ea0:	12 37       	cpi	r17, 0x72	; 114
     ea2:	51 f5       	brne	.+84     	; 0xef8 <ffopen+0x6a>
     ea4:	09 e8       	ldi	r16, 0x89	; 137
     ea6:	14 e0       	ldi	r17, 0x04	; 4
     ea8:	f8 01       	movw	r30, r16
     eaa:	61 89       	ldd	r22, Z+17	; 0x11
     eac:	72 89       	ldd	r23, Z+18	; 0x12
     eae:	83 89       	ldd	r24, Z+19	; 0x13
     eb0:	94 89       	ldd	r25, Z+20	; 0x14
     eb2:	31 dc       	rcall	.-1950   	; 0x716 <fat_getFatChainClustersInRow>
     eb4:	f8 01       	movw	r30, r16
     eb6:	d7 87       	std	Z+15, r29	; 0x0f
     eb8:	c6 87       	std	Z+14, r28	; 0x0e
     eba:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <chain>
     ebe:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <chain+0x1>
     ec2:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <chain+0x2>
     ec6:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <chain+0x3>
     eca:	35 d9       	rcall	.-3478   	; 0x136 <fat_loadSector>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	19 c0       	rjmp	.+50     	; 0xf02 <ffopen+0x74>
     ed0:	81 11       	cpse	r24, r1
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <ffopen+0x6e>
     ed4:	13 36       	cpi	r17, 0x63	; 99
     ed6:	a1 f4       	brne	.+40     	; 0xf00 <ffopen+0x72>
     ed8:	d0 93 98 04 	sts	0x0498, r29	; 0x800498 <file+0xf>
     edc:	c0 93 97 04 	sts	0x0497, r28	; 0x800497 <file+0xe>
     ee0:	62 e0       	ldi	r22, 0x02	; 2
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	8e dc       	rcall	.-1764   	; 0x806 <fat_getFreeClustersInRow>
     eea:	60 e2       	ldi	r22, 0x20	; 32
     eec:	ce 01       	movw	r24, r28
     eee:	68 dd       	rcall	.-1328   	; 0x9c0 <fat_makeFileEntry>
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <fat+0x4>
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <ffopen+0x74>
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <ffopen+0x74>
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <ffopen+0x74>
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	08 95       	ret

00000f0c <fflushFileData>:
     f0c:	4f 92       	push	r4
     f0e:	5f 92       	push	r5
     f10:	6f 92       	push	r6
     f12:	7f 92       	push	r7
     f14:	8f 92       	push	r8
     f16:	9f 92       	push	r9
     f18:	af 92       	push	r10
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	a9 e8       	ldi	r26, 0x89	; 137
     f2e:	b4 e0       	ldi	r27, 0x04	; 4
     f30:	ed 91       	ld	r30, X+
     f32:	fc 91       	ld	r31, X
     f34:	11 97       	sbiw	r26, 0x01	; 1
     f36:	12 96       	adiw	r26, 0x02	; 2
     f38:	cd 90       	ld	r12, X+
     f3a:	dd 90       	ld	r13, X+
     f3c:	ed 90       	ld	r14, X+
     f3e:	fc 90       	ld	r15, X
     f40:	15 97       	sbiw	r26, 0x05	; 5
     f42:	ce 0e       	add	r12, r30
     f44:	df 1e       	adc	r13, r31
     f46:	e1 1c       	adc	r14, r1
     f48:	f1 1c       	adc	r15, r1
     f4a:	1a 96       	adiw	r26, 0x0a	; 10
     f4c:	8d 91       	ld	r24, X+
     f4e:	9d 91       	ld	r25, X+
     f50:	0d 90       	ld	r0, X+
     f52:	bc 91       	ld	r27, X
     f54:	a0 2d       	mov	r26, r0
     f56:	8c 15       	cp	r24, r12
     f58:	9d 05       	cpc	r25, r13
     f5a:	ae 05       	cpc	r26, r14
     f5c:	bf 05       	cpc	r27, r15
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <fflushFileData+0x56>
     f60:	5a c0       	rjmp	.+180    	; 0x1016 <fflushFileData+0x10a>
     f62:	80 90 8f 04 	lds	r8, 0x048F	; 0x80048f <file+0x6>
     f66:	90 90 90 04 	lds	r9, 0x0490	; 0x800490 <file+0x7>
     f6a:	a0 90 91 04 	lds	r10, 0x0491	; 0x800491 <file+0x8>
     f6e:	b0 90 92 04 	lds	r11, 0x0492	; 0x800492 <file+0x9>
     f72:	30 97       	sbiw	r30, 0x00	; 0
     f74:	09 f0       	breq	.+2      	; 0xf78 <fflushFileData+0x6c>
     f76:	59 c0       	rjmp	.+178    	; 0x102a <fflushFileData+0x11e>
     f78:	62 c0       	rjmp	.+196    	; 0x103e <fflushFileData+0x132>
     f7a:	11 92       	st	Z+, r1
     f7c:	e8 17       	cp	r30, r24
     f7e:	f9 07       	cpc	r31, r25
     f80:	e1 f7       	brne	.-8      	; 0xf7a <fflushFileData+0x6e>
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <fat+0x4>
     f88:	10 c0       	rjmp	.+32     	; 0xfaa <fflushFileData+0x9e>
     f8a:	7c d9       	rcall	.-3336   	; 0x284 <fat_secToClust>
     f8c:	2b 01       	movw	r4, r22
     f8e:	3c 01       	movw	r6, r24
     f90:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <chain>
     f94:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <chain+0x1>
     f98:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <chain+0x2>
     f9c:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <chain+0x3>
     fa0:	71 d9       	rcall	.-3358   	; 0x284 <fat_secToClust>
     fa2:	a3 01       	movw	r20, r6
     fa4:	92 01       	movw	r18, r4
     fa6:	64 de       	rcall	.-824    	; 0xc70 <fat_setClusterChain>
     fa8:	11 c0       	rjmp	.+34     	; 0xfcc <fflushFileData+0xc0>
     faa:	c5 01       	movw	r24, r10
     fac:	b4 01       	movw	r22, r8
     fae:	6a d9       	rcall	.-3372   	; 0x284 <fat_secToClust>
     fb0:	2b 01       	movw	r4, r22
     fb2:	3c 01       	movw	r6, r24
     fb4:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <chain>
     fb8:	70 91 80 04 	lds	r23, 0x0480	; 0x800480 <chain+0x1>
     fbc:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <chain+0x2>
     fc0:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <chain+0x3>
     fc4:	5f d9       	rcall	.-3394   	; 0x284 <fat_secToClust>
     fc6:	a3 01       	movw	r20, r6
     fc8:	92 01       	movw	r18, r4
     fca:	52 de       	rcall	.-860    	; 0xc70 <fat_setClusterChain>
     fcc:	c9 e8       	ldi	r28, 0x89	; 137
     fce:	d4 e0       	ldi	r29, 0x04	; 4
     fd0:	6d 89       	ldd	r22, Y+21	; 0x15
     fd2:	7e 89       	ldd	r23, Y+22	; 0x16
     fd4:	8f 89       	ldd	r24, Y+23	; 0x17
     fd6:	98 8d       	ldd	r25, Y+24	; 0x18
     fd8:	ae d8       	rcall	.-3748   	; 0x136 <fat_loadSector>
     fda:	e8 89       	ldd	r30, Y+16	; 0x10
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	e8 9f       	mul	r30, r24
     fe0:	f0 01       	movw	r30, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	e5 56       	subi	r30, 0x65	; 101
     fe6:	fd 4f       	sbci	r31, 0xFD	; 253
     fe8:	c0 82       	st	Z, r12
     fea:	d1 82       	std	Z+1, r13	; 0x01
     fec:	e2 82       	std	Z+2, r14	; 0x02
     fee:	f3 82       	std	Z+3, r15	; 0x03
     ff0:	ca 86       	std	Y+10, r12	; 0x0a
     ff2:	db 86       	std	Y+11, r13	; 0x0b
     ff4:	ec 86       	std	Y+12, r14	; 0x0c
     ff6:	fd 86       	std	Y+13, r15	; 0x0d
     ff8:	80 92 7f 04 	sts	0x047F, r8	; 0x80047f <chain>
     ffc:	90 92 80 04 	sts	0x0480, r9	; 0x800480 <chain+0x1>
    1000:	a0 92 81 04 	sts	0x0481, r10	; 0x800481 <chain+0x2>
    1004:	b0 92 82 04 	sts	0x0482, r11	; 0x800482 <chain+0x3>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <fat+0x4>
    100e:	c5 01       	movw	r24, r10
    1010:	b4 01       	movw	r22, r8
    1012:	91 d8       	rcall	.-3806   	; 0x136 <fat_loadSector>
    1014:	29 c0       	rjmp	.+82     	; 0x1068 <fflushFileData+0x15c>
    1016:	60 91 8f 04 	lds	r22, 0x048F	; 0x80048f <file+0x6>
    101a:	70 91 90 04 	lds	r23, 0x0490	; 0x800490 <file+0x7>
    101e:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <file+0x8>
    1022:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <file+0x9>
    1026:	80 d8       	rcall	.-3840   	; 0x128 <fat_writeSector>
    1028:	1f c0       	rjmp	.+62     	; 0x1068 <fflushFileData+0x15c>
    102a:	e1 15       	cp	r30, r1
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	f8 07       	cpc	r31, r24
    1030:	08 f0       	brcs	.+2      	; 0x1034 <fflushFileData+0x128>
    1032:	bb cf       	rjmp	.-138    	; 0xfaa <fflushFileData+0x9e>
    1034:	e1 58       	subi	r30, 0x81	; 129
    1036:	fd 4f       	sbci	r31, 0xFD	; 253
    1038:	8f e7       	ldi	r24, 0x7F	; 127
    103a:	94 e0       	ldi	r25, 0x04	; 4
    103c:	9e cf       	rjmp	.-196    	; 0xf7a <fflushFileData+0x6e>
    103e:	c5 01       	movw	r24, r10
    1040:	b4 01       	movw	r22, r8
    1042:	61 50       	subi	r22, 0x01	; 1
    1044:	71 09       	sbc	r23, r1
    1046:	81 09       	sbc	r24, r1
    1048:	91 09       	sbc	r25, r1
    104a:	00 91 7f 04 	lds	r16, 0x047F	; 0x80047f <chain>
    104e:	10 91 80 04 	lds	r17, 0x0480	; 0x800480 <chain+0x1>
    1052:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <chain+0x2>
    1056:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <chain+0x3>
    105a:	60 17       	cp	r22, r16
    105c:	71 07       	cpc	r23, r17
    105e:	82 07       	cpc	r24, r18
    1060:	93 07       	cpc	r25, r19
    1062:	08 f4       	brcc	.+2      	; 0x1066 <fflushFileData+0x15a>
    1064:	b3 cf       	rjmp	.-154    	; 0xfcc <fflushFileData+0xc0>
    1066:	91 cf       	rjmp	.-222    	; 0xf8a <fflushFileData+0x7e>
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
    1078:	bf 90       	pop	r11
    107a:	af 90       	pop	r10
    107c:	9f 90       	pop	r9
    107e:	8f 90       	pop	r8
    1080:	7f 90       	pop	r7
    1082:	6f 90       	pop	r6
    1084:	5f 90       	pop	r5
    1086:	4f 90       	pop	r4
    1088:	08 95       	ret

0000108a <ffclose>:
    108a:	40 df       	rcall	.-384    	; 0xf0c <fflushFileData>
    108c:	e9 e8       	ldi	r30, 0x89	; 137
    108e:	f4 e0       	ldi	r31, 0x04	; 4
    1090:	11 82       	std	Z+1, r1	; 0x01
    1092:	10 82       	st	Z, r1
    1094:	12 82       	std	Z+2, r1	; 0x02
    1096:	13 82       	std	Z+3, r1	; 0x03
    1098:	14 82       	std	Z+4, r1	; 0x04
    109a:	15 82       	std	Z+5, r1	; 0x05
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	08 95       	ret

000010a0 <ffseek>:
    10a0:	8f 92       	push	r8
    10a2:	9f 92       	push	r9
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	4b 01       	movw	r8, r22
    10ba:	5c 01       	movw	r10, r24
    10bc:	27 df       	rcall	.-434    	; 0xf0c <fflushFileData>
    10be:	c9 e8       	ldi	r28, 0x89	; 137
    10c0:	d4 e0       	ldi	r29, 0x04	; 4
    10c2:	69 89       	ldd	r22, Y+17	; 0x11
    10c4:	7a 89       	ldd	r23, Y+18	; 0x12
    10c6:	8b 89       	ldd	r24, Y+19	; 0x13
    10c8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ca:	25 db       	rcall	.-2486   	; 0x716 <fat_getFatChainClustersInRow>
    10cc:	40 91 7f 04 	lds	r20, 0x047F	; 0x80047f <chain>
    10d0:	50 91 80 04 	lds	r21, 0x0480	; 0x800480 <chain+0x1>
    10d4:	60 91 81 04 	lds	r22, 0x0481	; 0x800481 <chain+0x2>
    10d8:	70 91 82 04 	lds	r23, 0x0482	; 0x800482 <chain+0x3>
    10dc:	1a 82       	std	Y+2, r1	; 0x02
    10de:	1b 82       	std	Y+3, r1	; 0x03
    10e0:	1c 82       	std	Y+4, r1	; 0x04
    10e2:	1d 82       	std	Y+5, r1	; 0x05
    10e4:	81 14       	cp	r8, r1
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	98 06       	cpc	r9, r24
    10ea:	a1 04       	cpc	r10, r1
    10ec:	b1 04       	cpc	r11, r1
    10ee:	a8 f1       	brcs	.+106    	; 0x115a <ffseek+0xba>
    10f0:	75 01       	movw	r14, r10
    10f2:	64 01       	movw	r12, r8
    10f4:	8e 01       	movw	r16, r28
    10f6:	cf e7       	ldi	r28, 0x7F	; 127
    10f8:	d4 e0       	ldi	r29, 0x04	; 4
    10fa:	e2 e0       	ldi	r30, 0x02	; 2
    10fc:	de 1a       	sub	r13, r30
    10fe:	e1 08       	sbc	r14, r1
    1100:	f1 08       	sbc	r15, r1
    1102:	f8 01       	movw	r30, r16
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	a4 81       	ldd	r26, Z+4	; 0x04
    110a:	b5 81       	ldd	r27, Z+5	; 0x05
    110c:	9e 5f       	subi	r25, 0xFE	; 254
    110e:	af 4f       	sbci	r26, 0xFF	; 255
    1110:	bf 4f       	sbci	r27, 0xFF	; 255
    1112:	82 83       	std	Z+2, r24	; 0x02
    1114:	93 83       	std	Z+3, r25	; 0x03
    1116:	a4 83       	std	Z+4, r26	; 0x04
    1118:	b5 83       	std	Z+5, r27	; 0x05
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	9d 83       	std	Y+5, r25	; 0x05
    1122:	8c 83       	std	Y+4, r24	; 0x04
    1124:	89 2b       	or	r24, r25
    1126:	29 f0       	breq	.+10     	; 0x1132 <ffseek+0x92>
    1128:	4f 5f       	subi	r20, 0xFF	; 255
    112a:	5f 4f       	sbci	r21, 0xFF	; 255
    112c:	6f 4f       	sbci	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	0a c0       	rjmp	.+20     	; 0x1146 <ffseek+0xa6>
    1132:	6e 81       	ldd	r22, Y+6	; 0x06
    1134:	7f 81       	ldd	r23, Y+7	; 0x07
    1136:	88 85       	ldd	r24, Y+8	; 0x08
    1138:	99 85       	ldd	r25, Y+9	; 0x09
    113a:	0f da       	rcall	.-3042   	; 0x55a <fat_getNextCluster>
    113c:	ec da       	rcall	.-2600   	; 0x716 <fat_getFatChainClustersInRow>
    113e:	48 81       	ld	r20, Y
    1140:	59 81       	ldd	r21, Y+1	; 0x01
    1142:	6a 81       	ldd	r22, Y+2	; 0x02
    1144:	7b 81       	ldd	r23, Y+3	; 0x03
    1146:	c1 14       	cp	r12, r1
    1148:	f2 e0       	ldi	r31, 0x02	; 2
    114a:	df 06       	cpc	r13, r31
    114c:	e1 04       	cpc	r14, r1
    114e:	f1 04       	cpc	r15, r1
    1150:	a0 f6       	brcc	.-88     	; 0x10fa <ffseek+0x5a>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	98 22       	and	r9, r24
    1156:	aa 24       	eor	r10, r10
    1158:	bb 24       	eor	r11, r11
    115a:	cb 01       	movw	r24, r22
    115c:	ba 01       	movw	r22, r20
    115e:	0e 94 9b 00 	call	0x136	; 0x136 <fat_loadSector>
    1162:	90 92 8a 04 	sts	0x048A, r9	; 0x80048a <file+0x1>
    1166:	80 92 89 04 	sts	0x0489, r8	; 0x800489 <file>
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	08 95       	ret

00001184 <ffread>:

// *******************************************************************************************************************************
// liest 512 bytes aus dem puffer fat.sector. dann werden neue 512 bytes der datei geladen, sind nicht genuegend verkettete
// sektoren in einer reihe bekannt, wird in der fat nachgeschaut. dann werden weiter bekannte nachgeladen...
// *******************************************************************************************************************************
uint8_t ffread(void){
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29

	uint32_t nc;

	if( file.cntOfBytes == 512 ){							// EINEN SEKTOR GLESEN (ab hier 2 moeglichkeiten !)
    1188:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <file>
    118c:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <file+0x1>
    1190:	81 15       	cp	r24, r1
    1192:	92 40       	sbci	r25, 0x02	; 2
    1194:	89 f5       	brne	.+98     	; 0x11f8 <ffread+0x74>

		chain.cntSecs-=1;										// anzahl der sektoren am stück werden weniger, bis zu 0 dann müssen neue gesucht werden...
    1196:	ef e7       	ldi	r30, 0x7F	; 127
    1198:	f4 e0       	ldi	r31, 0x04	; 4
    119a:	84 81       	ldd	r24, Z+4	; 0x04
    119c:	95 81       	ldd	r25, Z+5	; 0x05
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	95 83       	std	Z+5, r25	; 0x05
    11a2:	84 83       	std	Z+4, r24	; 0x04

		if( 0==chain.cntSecs ){		 						//1.) noetig mehr sektoren der chain zu laden (mit ein bisschen glück nur alle 512*MAX_CLUSTERS_IN_ROW bytes)
    11a4:	89 2b       	or	r24, r25
    11a6:	c1 f4       	brne	.+48     	; 0x11d8 <ffread+0x54>

			#if (MMC_MULTI_BLOCK==TRUE && MMC_OVER_WRITE==FALSE)
				mmc_multi_block_stop_read ();					// stoppen von multiblock aktion
			#endif

			nc = fat_secToClust( file.currentSectorNr );		// umrechnen der aktuellen sektor position in cluster
    11a8:	c9 e8       	ldi	r28, 0x89	; 137
    11aa:	d4 e0       	ldi	r29, 0x04	; 4
    11ac:	6e 81       	ldd	r22, Y+6	; 0x06
    11ae:	7f 81       	ldd	r23, Y+7	; 0x07
    11b0:	88 85       	ldd	r24, Y+8	; 0x08
    11b2:	99 85       	ldd	r25, Y+9	; 0x09
    11b4:	67 d8       	rcall	.-3890   	; 0x284 <fat_secToClust>
			nc = fat_getNextCluster(nc);					// in der fat nach neuem ketten anfang suchen
    11b6:	d1 d9       	rcall	.-3166   	; 0x55a <fat_getNextCluster>
			fat_getFatChainClustersInRow(nc);				// zusammenhängende cluster/sektoren der datei suchen
    11b8:	ae da       	rcall	.-2724   	; 0x716 <fat_getFatChainClustersInRow>
    11ba:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <chain>
			file.currentSectorNr = chain.startSectors - 1;		// hier muss erniedrigt werden, da nach dem if immer ++ gemacht wird
    11be:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <chain+0x1>
    11c2:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <chain+0x2>
    11c6:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <chain+0x3>
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	a1 09       	sbc	r26, r1
    11ce:	b1 09       	sbc	r27, r1
    11d0:	8e 83       	std	Y+6, r24	; 0x06
    11d2:	9f 83       	std	Y+7, r25	; 0x07
    11d4:	a8 87       	std	Y+8, r26	; 0x08
    11d6:	b9 87       	std	Y+9, r27	; 0x09
    11d8:	e9 e8       	ldi	r30, 0x89	; 137
			#if (MMC_MULTI_BLOCK==TRUE && MMC_OVER_WRITE==FALSE)
				mmc_multi_block_start_read (fat.startSectors);	// starten von multiblock lesen ab dem neu gesuchten start sektor der kette.
			#endif
		}

		file.cntOfBytes = 0;
    11da:	f4 e0       	ldi	r31, 0x04	; 4
    11dc:	11 82       	std	Z+1, r1	; 0x01
    11de:	10 82       	st	Z, r1
    11e0:	86 81       	ldd	r24, Z+6	; 0x06

		#if (MMC_MULTI_BLOCK==TRUE && MMC_OVER_WRITE==FALSE)
			fat.currentSectorNr+=1;
			mmc_multi_block_read_sector (fat.sector);			//2.) bekannte sektoren reichen noch, also einfach nachladen..
		#else
			fat_loadSector(file.currentSectorNr+1);				//2.) die bekannten in einer reihe reichen noch.(nur alle 512 bytes)
    11e2:	97 81       	ldd	r25, Z+7	; 0x07
    11e4:	a0 85       	ldd	r26, Z+8	; 0x08
    11e6:	b1 85       	ldd	r27, Z+9	; 0x09
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	0e 94 9b 00 	call	0x136	; 0x136 <fat_loadSector>
    11f8:	e9 e8       	ldi	r30, 0x89	; 137
		#endif
	}
	return fat.sector[file.cntOfBytes++];
    11fa:	f4 e0       	ldi	r31, 0x04	; 4
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	9c 01       	movw	r18, r24
    1202:	2f 5f       	subi	r18, 0xFF	; 255
    1204:	3f 4f       	sbci	r19, 0xFF	; 255
    1206:	31 83       	std	Z+1, r19	; 0x01
    1208:	20 83       	st	Z, r18
    120a:	fc 01       	movw	r30, r24
    120c:	e9 59       	subi	r30, 0x99	; 153
    120e:	fd 4f       	sbci	r31, 0xFD	; 253
    1210:	80 8d       	ldd	r24, Z+24	; 0x18
}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <ffwrite>:
    1218:	cf 92       	push	r12
// sektoren bekannt sein(datenmenge zu gross), werden die alten verkettet und neue gesucht. es ist noetig sich den letzten bekannten einer
// kette zu merken -> file.lastCluster, um auch nicht zusammenhaengende cluster verketten zu koennen (fat_setClusterChain macht das)!
// es ist beim ueberschreiben noetig, die schon beschriebenen sektoren der datei zu laden, damit man die richtigen daten
// hat. das ist bloed, weil so ein daten overhead von 50% entsteht. da lesen aber schneller als schreiben geht, verliert man nicht 50% an geschwindigkeit.
//*******************************************************************************************************************************
void ffwrite( uint8_t c){
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29

	fat.sector[ file.cntOfBytes++ ]=c;							// schreiben des chars auf den puffer sector und zaehler erhoehen (pre-increment)
    1228:	e9 e8       	ldi	r30, 0x89	; 137
    122a:	f4 e0       	ldi	r31, 0x04	; 4
    122c:	20 81       	ld	r18, Z
    122e:	31 81       	ldd	r19, Z+1	; 0x01
    1230:	a9 01       	movw	r20, r18
    1232:	4f 5f       	subi	r20, 0xFF	; 255
    1234:	5f 4f       	sbci	r21, 0xFF	; 255
    1236:	51 83       	std	Z+1, r21	; 0x01
    1238:	40 83       	st	Z, r20
    123a:	f9 01       	movw	r30, r18
    123c:	e9 59       	subi	r30, 0x99	; 153
    123e:	fd 4f       	sbci	r31, 0xFD	; 253
    1240:	80 8f       	std	Z+24, r24	; 0x18

	if( file.cntOfBytes==512 ){									/** SEKTOR VOLL ( 3 moeglichkeiten ab hier !) **/
    1242:	41 15       	cp	r20, r1
    1244:	52 40       	sbci	r21, 0x02	; 2
    1246:	09 f0       	breq	.+2      	; 0x124a <ffwrite+0x32>
    1248:	92 c0       	rjmp	.+292    	; 0x136e <ffwrite+0x156>

		file.cntOfBytes = 0;	  									// ruecksetzen des sektor byte zaehlers.
    124a:	c9 e8       	ldi	r28, 0x89	; 137
    124c:	d4 e0       	ldi	r29, 0x04	; 4
    124e:	19 82       	std	Y+1, r1	; 0x01
    1250:	18 82       	st	Y, r1
		file.seek += 512;											// position in der datei erhoehen, weil grade 512 bytes geschrieben.
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	9b 81       	ldd	r25, Y+3	; 0x03
    1256:	ac 81       	ldd	r26, Y+4	; 0x04
    1258:	bd 81       	ldd	r27, Y+5	; 0x05
    125a:	9e 5f       	subi	r25, 0xFE	; 254
    125c:	af 4f       	sbci	r26, 0xFF	; 255
    125e:	bf 4f       	sbci	r27, 0xFF	; 255
    1260:	8a 83       	std	Y+2, r24	; 0x02
    1262:	9b 83       	std	Y+3, r25	; 0x03
    1264:	ac 83       	std	Y+4, r26	; 0x04
    1266:	bd 83       	std	Y+5, r27	; 0x05
		mmc_write_sector( file.currentSectorNr,fat.sector );	/** 1.) vollen sektor auf karte schreiben, es sind noch freie sektoren bekannt**/
    1268:	6e 81       	ldd	r22, Y+6	; 0x06
    126a:	7f 81       	ldd	r23, Y+7	; 0x07
    126c:	88 85       	ldd	r24, Y+8	; 0x08
    126e:	99 85       	ldd	r25, Y+9	; 0x09
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	52 e0       	ldi	r21, 0x02	; 2
    1274:	69 d2       	rcall	.+1234   	; 0x1748 <mmc_write_sector>
		file.currentSectorNr +=1;									// naechsten sektor zum beschreiben.
    1276:	4e 81       	ldd	r20, Y+6	; 0x06
    1278:	5f 81       	ldd	r21, Y+7	; 0x07
    127a:	68 85       	ldd	r22, Y+8	; 0x08
    127c:	79 85       	ldd	r23, Y+9	; 0x09
    127e:	db 01       	movw	r26, r22
    1280:	ca 01       	movw	r24, r20
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	a1 1d       	adc	r26, r1
    1286:	b1 1d       	adc	r27, r1
    1288:	8e 83       	std	Y+6, r24	; 0x06
    128a:	9f 83       	std	Y+7, r25	; 0x07
    128c:	a8 87       	std	Y+8, r26	; 0x08
    128e:	b9 87       	std	Y+9, r27	; 0x09
		chain.cntSecs -=1;											// einen freien sektor zum beschreiben weniger.
    1290:	ef e7       	ldi	r30, 0x7F	; 127
    1292:	f4 e0       	ldi	r31, 0x04	; 4
    1294:	84 81       	ldd	r24, Z+4	; 0x04
    1296:	95 81       	ldd	r25, Z+5	; 0x05
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	95 83       	std	Z+5, r25	; 0x05
    129c:	84 83       	std	Z+4, r24	; 0x04

		if( chain.cntSecs==0 ){										// ende der bekannten in einer reihe erreicht (freie oder verkettete)
    129e:	89 2b       	or	r24, r25
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <ffwrite+0x8c>
    12a2:	4b c0       	rjmp	.+150    	; 0x133a <ffwrite+0x122>
			if( file.seek > file.length ){						/** 2.) ausserhalb der datei, jetzt ist es noetig die beschriebenen cluster zu verketten und neue freie zu suchen	**/
    12a4:	0a 81       	ldd	r16, Y+2	; 0x02
    12a6:	1b 81       	ldd	r17, Y+3	; 0x03
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    12b0:	ac 85       	ldd	r26, Y+12	; 0x0c
    12b2:	bd 85       	ldd	r27, Y+13	; 0x0d
    12b4:	80 17       	cp	r24, r16
    12b6:	91 07       	cpc	r25, r17
    12b8:	a2 07       	cpc	r26, r18
    12ba:	b3 07       	cpc	r27, r19
    12bc:	50 f5       	brcc	.+84     	; 0x1312 <ffwrite+0xfa>
				fat.bufferDirty = FALSE;							// damit nicht durch z.b. fat_getNextCluster nochmal dieser sektor gescchrieben wird, siehe fat_loadSector
    12be:	07 e6       	ldi	r16, 0x67	; 103
    12c0:	12 e0       	ldi	r17, 0x02	; 2
    12c2:	f8 01       	movw	r30, r16
    12c4:	14 82       	std	Z+4, r1	; 0x04
				fat_setClusterChain( fat_secToClust(chain.startSectors) , fat_secToClust(file.currentSectorNr-1) );	// verketten der beschriebenen.
    12c6:	cb 01       	movw	r24, r22
    12c8:	ba 01       	movw	r22, r20
    12ca:	0e 94 42 01 	call	0x284	; 0x284 <fat_secToClust>
    12ce:	6b 01       	movw	r12, r22
    12d0:	7c 01       	movw	r14, r24
    12d2:	cf e7       	ldi	r28, 0x7F	; 127
    12d4:	d4 e0       	ldi	r29, 0x04	; 4
    12d6:	68 81       	ld	r22, Y
    12d8:	79 81       	ldd	r23, Y+1	; 0x01
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	0e 94 42 01 	call	0x284	; 0x284 <fat_secToClust>
    12e2:	a7 01       	movw	r20, r14
    12e4:	96 01       	movw	r18, r12
    12e6:	c4 dc       	rcall	.-1656   	; 0xc70 <fat_setClusterChain>
				fat_getFreeClustersInRow( chain.lastCluster );		// neue leere sektoren benoetigt, also suchen.
    12e8:	6e 81       	ldd	r22, Y+6	; 0x06
    12ea:	7f 81       	ldd	r23, Y+7	; 0x07
    12ec:	88 85       	ldd	r24, Y+8	; 0x08
    12ee:	99 85       	ldd	r25, Y+9	; 0x09
    12f0:	8a da       	rcall	.-2796   	; 0x806 <fat_getFreeClustersInRow>
				file.currentSectorNr = chain.startSectors;				// setzen des 1. sektors der neuen reihe zum schreiben.
    12f2:	88 81       	ld	r24, Y
    12f4:	99 81       	ldd	r25, Y+1	; 0x01
    12f6:	aa 81       	ldd	r26, Y+2	; 0x02
    12f8:	bb 81       	ldd	r27, Y+3	; 0x03
    12fa:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <file+0x6>
    12fe:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <file+0x7>
    1302:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <file+0x8>
    1306:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <file+0x9>
				fat.bufferDirty = TRUE;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	f8 01       	movw	r30, r16
    130e:	84 83       	std	Z+4, r24	; 0x04
    1310:	14 c0       	rjmp	.+40     	; 0x133a <ffwrite+0x122>
			}
			else {												/** 3.) noch innerhalb der datei, aber es muessen neue verkettete cluster gesucht werden, zum ueberschreiben **/
				fat_getFatChainClustersInRow( fat_getNextCluster(chain.lastCluster) );		// noch innerhalb der datei, deshlab verkettete suchen.
    1312:	cf e7       	ldi	r28, 0x7F	; 127
    1314:	d4 e0       	ldi	r29, 0x04	; 4
    1316:	6e 81       	ldd	r22, Y+6	; 0x06
    1318:	7f 81       	ldd	r23, Y+7	; 0x07
    131a:	88 85       	ldd	r24, Y+8	; 0x08
    131c:	99 85       	ldd	r25, Y+9	; 0x09
    131e:	1d d9       	rcall	.-3526   	; 0x55a <fat_getNextCluster>
    1320:	fa d9       	rcall	.-3084   	; 0x716 <fat_getFatChainClustersInRow>
				file.currentSectorNr = chain.startSectors;				// setzen des 1. sektors der neuen reihe zum schreiben.
    1322:	88 81       	ld	r24, Y
    1324:	99 81       	ldd	r25, Y+1	; 0x01
    1326:	aa 81       	ldd	r26, Y+2	; 0x02
    1328:	bb 81       	ldd	r27, Y+3	; 0x03
    132a:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <file+0x6>
    132e:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <file+0x7>
    1332:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <file+0x8>
    1336:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <file+0x9>
			}
		}

		if( file.seek <= file.length ){
    133a:	e9 e8       	ldi	r30, 0x89	; 137
    133c:	f4 e0       	ldi	r31, 0x04	; 4
    133e:	42 81       	ldd	r20, Z+2	; 0x02
    1340:	53 81       	ldd	r21, Z+3	; 0x03
    1342:	64 81       	ldd	r22, Z+4	; 0x04
    1344:	75 81       	ldd	r23, Z+5	; 0x05
    1346:	82 85       	ldd	r24, Z+10	; 0x0a
    1348:	93 85       	ldd	r25, Z+11	; 0x0b
    134a:	a4 85       	ldd	r26, Z+12	; 0x0c
    134c:	b5 85       	ldd	r27, Z+13	; 0x0d
    134e:	84 17       	cp	r24, r20
    1350:	95 07       	cpc	r25, r21
    1352:	a6 07       	cpc	r26, r22
    1354:	b7 07       	cpc	r27, r23
    1356:	58 f0       	brcs	.+22     	; 0x136e <ffwrite+0x156>
			mmc_read_sector(file.currentSectorNr,fat.sector);		// wegen ueberschreiben, muss der zu beschreibende sektor geladen werden (zustand 3)...
    1358:	60 91 8f 04 	lds	r22, 0x048F	; 0x80048f <file+0x6>
    135c:	70 91 90 04 	lds	r23, 0x0490	; 0x800490 <file+0x7>
    1360:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <file+0x8>
    1364:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <file+0x9>
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	52 e0       	ldi	r21, 0x02	; 2
    136c:	2e d2       	rcall	.+1116   	; 0x17ca <mmc_read_sector>
		}
	}
}
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	08 95       	ret

00001380 <ffwrites>:
// *******************************************************************************************************************************
// schreibt string auf karte, siehe ffwrite()
// ein string sind zeichen, '\0' bzw. 0x00 bzw dezimal 0 wird als string ende gewertet !!
// wenn sonderzeichen auf die karte sollen, lieber ffwrite benutzen!
// *******************************************************************************************************************************
void ffwrites( uint8_t *s ){
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	ec 01       	movw	r28, r24
    while (*s){
    1386:	88 81       	ld	r24, Y
    1388:	88 23       	and	r24, r24
    138a:	29 f0       	breq	.+10     	; 0x1396 <ffwrites+0x16>
    138c:	21 96       	adiw	r28, 0x01	; 1
    	ffwrite(*s++);
    138e:	44 df       	rcall	.-376    	; 0x1218 <ffwrite>
// schreibt string auf karte, siehe ffwrite()
// ein string sind zeichen, '\0' bzw. 0x00 bzw dezimal 0 wird als string ende gewertet !!
// wenn sonderzeichen auf die karte sollen, lieber ffwrite benutzen!
// *******************************************************************************************************************************
void ffwrites( uint8_t *s ){
    while (*s){
    1390:	89 91       	ld	r24, Y+
    1392:	81 11       	cpse	r24, r1
    1394:	fc cf       	rjmp	.-8      	; 0x138e <ffwrites+0xe>
    	ffwrite(*s++);
    }
    fat.bufferDirty = TRUE;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <fat+0x4>
  }
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <__vector_21>:



// *****************************************************************************************************************
ISR (TIMER0_COMPA_vect)
{
    13a2:	1f 92       	push	r1
    13a4:	0f 92       	push	r0
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	0f 92       	push	r0
    13aa:	11 24       	eor	r1, r1
    13ac:	8f 93       	push	r24
	TimingDelay = (TimingDelay==0) ? 0 : TimingDelay-1;
    13ae:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <TimingDelay>
    13b2:	88 23       	and	r24, r24
    13b4:	21 f0       	breq	.+8      	; 0x13be <__vector_21+0x1c>
    13b6:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <TimingDelay>
    13ba:	81 50       	subi	r24, 0x01	; 1
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <__vector_21+0x1e>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <TimingDelay>
}
    13c4:	8f 91       	pop	r24
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <main>:
}



// *****************************************************************************************************************
void main(void){
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	66 97       	sbiw	r28, 0x16	; 22
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61

	// lfn oder sfn
	#if (MMC_LFN_SUPPORT == TRUE)
		uint8_t file_name [] = "test_file.txt";
	#else 
		uint8_t file_name [] = "test.txt";
    13ec:	89 e0       	ldi	r24, 0x09	; 9
    13ee:	ee e0       	ldi	r30, 0x0E	; 14
    13f0:	f2 e0       	ldi	r31, 0x02	; 2
    13f2:	de 01       	movw	r26, r28
    13f4:	11 96       	adiw	r26, 0x01	; 1
    13f6:	01 90       	ld	r0, Z+
    13f8:	0d 92       	st	X+, r0
    13fa:	8a 95       	dec	r24
    13fc:	e1 f7       	brne	.-8      	; 0x13f6 <main+0x26>
	#endif
	
	// string zum auf die karte schreiben.
	#if (MMC_WRITE == TRUE)
		uint8_t str [] = "Hallo Datei!";
    13fe:	8d e0       	ldi	r24, 0x0D	; 13
    1400:	e7 e1       	ldi	r30, 0x17	; 23
    1402:	f2 e0       	ldi	r31, 0x02	; 2
    1404:	de 01       	movw	r26, r28
    1406:	1a 96       	adiw	r26, 0x0a	; 10
    1408:	01 90       	ld	r0, Z+
    140a:	0d 92       	st	X+, r0
    140c:	8a 95       	dec	r24
    140e:	e1 f7       	brne	.-8      	; 0x1408 <main+0x38>


// *****************************************************************************************************************
static void timer0_init(){

	TimingDelay = 0;		// initialisierung der zaehl variable	
    1410:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <TimingDelay>

	TCCR0A = 1<<WGM01; 		// timer0 im ctc mode
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = 1<<OCIE0A;		// compare interrupt an
    1418:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>

	TCNT0 = START_TCNT;		// ab wo hochgezaehlt wird,
    141c:	84 e6       	ldi	r24, 0x64	; 100
    141e:	86 bd       	out	0x26, r24	; 38
	OCR0A = TOP_OCR;		// maximum bis wo gezaehlt wird bevor compare match	
    1420:	8b e9       	ldi	r24, 0x9B	; 155
    1422:	87 bd       	out	0x27, r24	; 39

	TCCR0B = PRESCALER;		// wenn prescaler gesetzt wird, lauft timer los
    1424:	85 e0       	ldi	r24, 0x05	; 5
    1426:	85 bd       	out	0x25, r24	; 37
	sei();					// interrupts anschalten, wegen compare match
    1428:	78 94       	sei
	// initialisierung, auf jeden fall vor mmc_init(), 
	// denn da wird der timer benoetigt!
	timer0_init();

	// uart config *****************************************************
	uinit();
    142a:	25 d2       	rcall	.+1098   	; 0x1876 <uinit>

	uputs((uint8_t*)"\nBoot");
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	92 e0       	ldi	r25, 0x02	; 2

	// sd/mmc config  **************************************************
	if( FALSE == mmc_init() ){
    1430:	14 d2       	rcall	.+1064   	; 0x185a <uputs>
    1432:	af d0       	rcall	.+350    	; 0x1592 <mmc_init>
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <main+0x6a>
		return;
	} 

	uputs((uint8_t*)"...");
    1438:	46 c0       	rjmp	.+140    	; 0x14c6 <main+0xf6>
    143a:	86 e0       	ldi	r24, 0x06	; 6
    143c:	92 e0       	ldi	r25, 0x02	; 2
			
	// fat config ******************************************************
	if( FALSE == fat_loadFatData() ){
    143e:	0d d2       	rcall	.+1050   	; 0x185a <uputs>
    1440:	73 dc       	rcall	.-1818   	; 0xd28 <fat_loadFatData>
    1442:	88 23       	and	r24, r24
    1444:	09 f4       	brne	.+2      	; 0x1448 <main+0x78>
		return;
	}

	// wenn auf dem terminal "Boot...OK" zu lesen ist, war initialisierung erfolgreich!
	uputs((uint8_t*)"OK\n");
    1446:	3f c0       	rjmp	.+126    	; 0x14c6 <main+0xf6>
    1448:	8a e0       	ldi	r24, 0x0A	; 10
    144a:	92 e0       	ldi	r25, 0x02	; 2

	#if (MMC_WRITE ==TRUE)		// create and append only if write is TRUE
		// ****************************************************
		// if file exists, it will be opened and then append to it.
		if( MMC_FILE_OPENED == ffopen(file_name,'r') ){			
    144c:	06 d2       	rcall	.+1036   	; 0x185a <uputs>
    144e:	62 e7       	ldi	r22, 0x72	; 114
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	1c dd       	rcall	.-1480   	; 0xe8e <ffopen>
    1456:	81 11       	cpse	r24, r1
    1458:	11 c0       	rjmp	.+34     	; 0x147c <main+0xac>
			ffseek(file.length);
    145a:	60 91 93 04 	lds	r22, 0x0493	; 0x800493 <file+0xa>
    145e:	70 91 94 04 	lds	r23, 0x0494	; 0x800494 <file+0xb>
    1462:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <file+0xc>
    1466:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <file+0xd>
		   	ffwrites(str);				
    146a:	1a de       	rcall	.-972    	; 0x10a0 <ffseek>
    146c:	ce 01       	movw	r24, r28
			ffwrite(0x0D);		// new line in file
    146e:	0a 96       	adiw	r24, 0x0a	; 10
    1470:	87 df       	rcall	.-242    	; 0x1380 <ffwrites>
    1472:	8d e0       	ldi	r24, 0x0D	; 13
		   	ffwrite(0x0A);
    1474:	d1 de       	rcall	.-606    	; 0x1218 <ffwrite>
    1476:	8a e0       	ldi	r24, 0x0A	; 10
			ffclose();
    1478:	cf de       	rcall	.-610    	; 0x1218 <ffwrite>
		}
		
		// ***************************************************
		// if the file does not exist, it will be created and written to it.
		if(MMC_FILE_CREATED == ffopen(file_name,'c') ){
    147a:	07 de       	rcall	.-1010   	; 0x108a <ffclose>
    147c:	63 e6       	ldi	r22, 0x63	; 99
    147e:	ce 01       	movw	r24, r28
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	05 dd       	rcall	.-1526   	; 0xe8e <ffopen>
			ffwrites(str);				
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	41 f4       	brne	.+16     	; 0x1498 <main+0xc8>
    1488:	ce 01       	movw	r24, r28
    148a:	0a 96       	adiw	r24, 0x0a	; 10
			ffwrite(0x0D);		// new line in file
    148c:	79 df       	rcall	.-270    	; 0x1380 <ffwrites>
    148e:	8d e0       	ldi	r24, 0x0D	; 13
    1490:	c3 de       	rcall	.-634    	; 0x1218 <ffwrite>
		   	ffwrite(0x0A);
    1492:	8a e0       	ldi	r24, 0x0A	; 10
    1494:	c1 de       	rcall	.-638    	; 0x1218 <ffwrite>
			ffclose();
    1496:	f9 dd       	rcall	.-1038   	; 0x108a <ffclose>
		} 	
	#endif 

	// ***************************************************
	// read file complete and print via uart!
	if( MMC_FILE_OPENED == ffopen(file_name,'r') ){			
    1498:	62 e7       	ldi	r22, 0x72	; 114
    149a:	ce 01       	movw	r24, r28
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	f7 dc       	rcall	.-1554   	; 0xe8e <ffopen>
    14a0:	81 11       	cpse	r24, r1
    14a2:	11 c0       	rjmp	.+34     	; 0x14c6 <main+0xf6>
		seek = file.length;
    14a4:	c0 90 93 04 	lds	r12, 0x0493	; 0x800493 <file+0xa>
    14a8:	d0 90 94 04 	lds	r13, 0x0494	; 0x800494 <file+0xb>
    14ac:	e0 90 95 04 	lds	r14, 0x0495	; 0x800495 <file+0xc>
    14b0:	f0 90 96 04 	lds	r15, 0x0496	; 0x800496 <file+0xd>
		do{
			uputc( ffread() );						
    14b4:	67 de       	rcall	.-818    	; 0x1184 <ffread>
    14b6:	c9 d1       	rcall	.+914    	; 0x184a <uputc>
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	c8 1a       	sub	r12, r24
		}while(--seek);
    14bc:	d1 08       	sbc	r13, r1
    14be:	e1 08       	sbc	r14, r1
    14c0:	f1 08       	sbc	r15, r1
    14c2:	c1 f7       	brne	.-16     	; 0x14b4 <main+0xe4>
    14c4:	e2 dd       	rcall	.-1084   	; 0x108a <ffclose>
    14c6:	66 96       	adiw	r28, 0x16	; 22
		ffclose();
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
	}
	
	// retrun from main.c
	return;

}
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	cf 90       	pop	r12
    14de:	08 95       	ret

000014e0 <spi_write_byte>:
    uint8_t a;
#endif

    // mmc/sd in hardware spi
#if (MMC_SOFT_SPI==FALSE)
    SPDR = byte;                            //Sendet ein Byte
    14e0:	8e bd       	out	0x2e, r24	; 46
    loop_until_bit_is_set(SPSR,SPIF);
    14e2:	0d b4       	in	r0, 0x2d	; 45
    14e4:	07 fe       	sbrs	r0, 7
    14e6:	fd cf       	rjmp	.-6      	; 0x14e2 <spi_write_byte+0x2>
        MMC_Write |= (1<<SPI_Clock);        //setzt Clock Impuls wieder auf (High)
        MMC_Write &= ~(1<<SPI_Clock);       //erzeugt ein Clock Impuls (LOW)
    }
    MMC_Write |= (1<<SPI_MOSI);             //setzt Output wieder auf High
#endif
}
    14e8:	08 95       	ret

000014ea <spi_read_byte>:
// *****************************************************************************
static uint8_t spi_read_byte(void) {

    // mmc/sd in hardware spi
#if (MMC_SOFT_SPI==FALSE)
    SPDR = 0xff;
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	8e bd       	out	0x2e, r24	; 46
    loop_until_bit_is_set(SPSR,SPIF);
    14ee:	0d b4       	in	r0, 0x2d	; 45
    14f0:	07 fe       	sbrs	r0, 7
    14f2:	fd cf       	rjmp	.-6      	; 0x14ee <spi_read_byte+0x4>
    return (SPDR);
    14f4:	8e b5       	in	r24, 0x2e	; 46
        }
        MMC_Write &=~(1<<SPI_Clock);                //erzeugt ein Clock Impuls (Low)
    }
    return (Byte);
#endif
}
    14f6:	08 95       	ret

000014f8 <mmc_disable>:
}

// **********************************************************************************************************************************
static void mmc_disable() {

    MMC_CS_HIGH;
    14f8:	28 9a       	sbi	0x05, 0	; 5
    spi_read_byte();
    14fa:	f7 cf       	rjmp	.-18     	; 0x14ea <spi_read_byte>
    14fc:	08 95       	ret

000014fe <mmc_wait_ready>:
// **********************************************************************************************************************************
// wartet darauf, dass die mmc karte in idle geht
// **********************************************************************************************************************************
static uint8_t mmc_wait_ready (void) {

    TimingDelay = 50;
    14fe:	82 e3       	ldi	r24, 0x32	; 50
    1500:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <TimingDelay>

    do {
        if(  spi_read_byte() == 0xFF ) return TRUE;
    1504:	f2 df       	rcall	.-28     	; 0x14ea <spi_read_byte>
    1506:	8f 3f       	cpi	r24, 0xFF	; 255
    1508:	29 f0       	breq	.+10     	; 0x1514 <mmc_wait_ready+0x16>
    } while ( TimingDelay );
    150a:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <TimingDelay>
    150e:	81 11       	cpse	r24, r1
    1510:	f9 cf       	rjmp	.-14     	; 0x1504 <mmc_wait_ready+0x6>
    1512:	08 95       	ret
static uint8_t mmc_wait_ready (void) {

    TimingDelay = 50;

    do {
        if(  spi_read_byte() == 0xFF ) return TRUE;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    } while ( TimingDelay );

    return FALSE;
}
    1516:	08 95       	ret

00001518 <mmc_send_cmd>:

    return TRUE;
}

// **********************************************************************************************************************************
static uint8_t mmc_send_cmd (   uint8_t cmd,    uint32_t arg) {
    1518:	ff 92       	push	r15
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	c8 2f       	mov	r28, r24
    1524:	d4 2f       	mov	r29, r20
    1526:	15 2f       	mov	r17, r21
    1528:	06 2f       	mov	r16, r22
    152a:	f7 2e       	mov	r15, r23

    uint8_t n, res;
    // Select the card and wait for ready
    mmc_disable();
    152c:	e5 df       	rcall	.-54     	; 0x14f8 <mmc_disable>

// **********************************************************************************************************************************
static uint8_t mmc_enable() {

    MMC_CS_LOW;
    if( !mmc_wait_ready() ) {
    152e:	28 98       	cbi	0x05, 0	; 5
    1530:	e6 df       	rcall	.-52     	; 0x14fe <mmc_wait_ready>
    1532:	81 11       	cpse	r24, r1
        mmc_disable();
    1534:	14 c0       	rjmp	.+40     	; 0x155e <mmc_send_cmd+0x46>

    uint8_t n, res;
    // Select the card and wait for ready
    mmc_disable();
    if ( FALSE == mmc_enable() ) {
 		uputs("mmc enable false.\r");
    1536:	e0 df       	rcall	.-64     	; 0x14f8 <mmc_disable>
    1538:	84 e2       	ldi	r24, 0x24	; 36
    153a:	92 e0       	ldi	r25, 0x02	; 2
    153c:	8e d1       	rcall	.+796    	; 0x185a <uputs>
       return 0xFF;
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    spi_write_byte( (uint8_t)(arg >> 16) ); // Argument[23..16]
    spi_write_byte( (uint8_t)(arg >> 8) );  // Argument[15..8]
    spi_write_byte( (uint8_t)arg );         // Argument[7..0]
    n = 0x01;                                       // Dummy CRC + Stop
    if (cmd == CMD0) n = 0x95;                      // Valid CRC for CMD0(0)
    if (cmd == CMD8) n = 0x87;                      // Valid CRC for CMD8(0x1AA)
    1540:	22 c0       	rjmp	.+68     	; 0x1586 <mmc_send_cmd+0x6e>
    1542:	c8 30       	cpi	r28, 0x08	; 8
    spi_write_byte(n);
    1544:	d1 f0       	breq	.+52     	; 0x157a <mmc_send_cmd+0x62>
    1546:	81 e0       	ldi	r24, 0x01	; 1

    // Receive command response
    if (cmd == CMD12) spi_read_byte();              // Skip a stuff byte when stop reading
    1548:	cb df       	rcall	.-106    	; 0x14e0 <spi_write_byte>
    154a:	cc 30       	cpi	r28, 0x0C	; 12
    154c:	09 f4       	brne	.+2      	; 0x1550 <mmc_send_cmd+0x38>
    154e:	cd df       	rcall	.-102    	; 0x14ea <spi_read_byte>

    return TRUE;
}

// **********************************************************************************************************************************
static uint8_t mmc_send_cmd (   uint8_t cmd,    uint32_t arg) {
    1550:	c4 e6       	ldi	r28, 0x64	; 100

    // Receive command response
    if (cmd == CMD12) spi_read_byte();              // Skip a stuff byte when stop reading
    n = 100;                                         // Wait for a valid response in timeout of 10 attempts
    do
        res = spi_read_byte();
    1552:	cb df       	rcall	.-106    	; 0x14ea <spi_read_byte>
    1554:	88 23       	and	r24, r24
    while ( (res & 0x80) && --n );
    1556:	bc f4       	brge	.+46     	; 0x1586 <mmc_send_cmd+0x6e>
    1558:	c1 50       	subi	r28, 0x01	; 1
    155a:	d9 f7       	brne	.-10     	; 0x1552 <mmc_send_cmd+0x3a>
    if ( FALSE == mmc_enable() ) {
 		uputs("mmc enable false.\r");
       return 0xFF;
    }
    // Send command packet
    spi_write_byte(0x40 | cmd);                     // Start + Command index
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <mmc_send_cmd+0x6e>
    155e:	8c 2f       	mov	r24, r28
    1560:	80 64       	ori	r24, 0x40	; 64
    spi_write_byte( (uint8_t)(arg >> 24) ); // Argument[31..24]
    1562:	be df       	rcall	.-132    	; 0x14e0 <spi_write_byte>
    1564:	8f 2d       	mov	r24, r15
    1566:	bc df       	rcall	.-136    	; 0x14e0 <spi_write_byte>
    spi_write_byte( (uint8_t)(arg >> 16) ); // Argument[23..16]
    1568:	80 2f       	mov	r24, r16
    156a:	ba df       	rcall	.-140    	; 0x14e0 <spi_write_byte>
    spi_write_byte( (uint8_t)(arg >> 8) );  // Argument[15..8]
    156c:	81 2f       	mov	r24, r17
    156e:	b8 df       	rcall	.-144    	; 0x14e0 <spi_write_byte>
    spi_write_byte( (uint8_t)arg );         // Argument[7..0]
    1570:	8d 2f       	mov	r24, r29
    1572:	b6 df       	rcall	.-148    	; 0x14e0 <spi_write_byte>
    1574:	cc 23       	and	r28, r28
    n = 0x01;                                       // Dummy CRC + Stop
    if (cmd == CMD0) n = 0x95;                      // Valid CRC for CMD0(0)
    1576:	21 f0       	breq	.+8      	; 0x1580 <mmc_send_cmd+0x68>
    1578:	e4 cf       	rjmp	.-56     	; 0x1542 <mmc_send_cmd+0x2a>
    157a:	87 e8       	ldi	r24, 0x87	; 135
    if (cmd == CMD8) n = 0x87;                      // Valid CRC for CMD8(0x1AA)
    spi_write_byte(n);
    157c:	b1 df       	rcall	.-158    	; 0x14e0 <spi_write_byte>
    157e:	e8 cf       	rjmp	.-48     	; 0x1550 <mmc_send_cmd+0x38>
    1580:	85 e9       	ldi	r24, 0x95	; 149
    1582:	ae df       	rcall	.-164    	; 0x14e0 <spi_write_byte>
    1584:	e5 cf       	rjmp	.-54     	; 0x1550 <mmc_send_cmd+0x38>
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    do
        res = spi_read_byte();
    while ( (res & 0x80) && --n );

    return res;                                     // Return with the response value
}
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	08 95       	ret

00001592 <mmc_init>:
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14




// **********************************************************************************************************************************
uint8_t mmc_init (void) {
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	29 97       	sbiw	r28, 0x09	; 9
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61

// *****************************************************************************
static void spi_init(void) {

    // port configuration der mmc/sd/sdhc karte
    MMC_Direction_REG &=~(1<<SPI_MISO);         // miso auf input
    15b2:	23 98       	cbi	0x04, 3	; 4
    MMC_Direction_REG |= (1<<SPI_Clock);        // clock auf output
    15b4:	21 9a       	sbi	0x04, 1	; 4
    MMC_Direction_REG |= (1<<SPI_MOSI);         // mosi auf output
    15b6:	22 9a       	sbi	0x04, 2	; 4
    MMC_Direction_REG |= (1<<SPI_SS);           // chip select auf output
    15b8:	20 9a       	sbi	0x04, 0	; 4

    // hardware spi: bus clock = idle low, spi clock / 128 , spi master mode
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
    15ba:	83 e5       	ldi	r24, 0x53	; 83
    15bc:	8c bd       	out	0x2c, r24	; 44

    MMC_Write |= (1<<SPI_SS);           // chip selet auf high, karte anwaehlen
    15be:	28 9a       	sbi	0x05, 0	; 5

    uint8_t cmd, ty, ocr[4];
    uint16_t n, j;

    spi_init();
    mmc_disable();
    15c0:	9b df       	rcall	.-202    	; 0x14f8 <mmc_disable>
    15c2:	04 e6       	ldi	r16, 0x64	; 100
    15c4:	10 e0       	ldi	r17, 0x00	; 0

    for (n = 100; n; n--) spi_read_byte();                      // 80+ dummy clocks
    15c6:	91 df       	rcall	.-222    	; 0x14ea <spi_read_byte>
    15c8:	01 50       	subi	r16, 0x01	; 1
    15ca:	11 09       	sbc	r17, r1
    15cc:	e1 f7       	brne	.-8      	; 0x15c6 <mmc_init+0x34>
    15ce:	04 e6       	ldi	r16, 0x64	; 100
    15d0:	10 e0       	ldi	r17, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0

    ty = 0;
    j=100;
    do {
        if (mmc_send_cmd(CMD0, 0) == 1) {                       // Enter Idle state
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	ba 01       	movw	r22, r20
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	9e df       	rcall	.-196    	; 0x1518 <mmc_send_cmd>
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	09 f0       	breq	.+2      	; 0x15e2 <mmc_init+0x50>
    15e0:	7c c0       	rjmp	.+248    	; 0x16da <mmc_init+0x148>
    15e2:	84 e6       	ldi	r24, 0x64	; 100
            j=0;
            TimingDelay = 100;                                  // Initialization timeout of 1000 msec
    15e4:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <TimingDelay>
    15e8:	4a ea       	ldi	r20, 0xAA	; 170

            if (mmc_send_cmd(CMD8, 0x1AA) == 1) {               // SDv2?
    15ea:	51 e0       	ldi	r21, 0x01	; 1
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	88 e0       	ldi	r24, 0x08	; 8
    15f2:	92 df       	rcall	.-220    	; 0x1518 <mmc_send_cmd>
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	09 f0       	breq	.+2      	; 0x15fa <mmc_init+0x68>
    15f8:	43 c0       	rjmp	.+134    	; 0x1680 <mmc_init+0xee>
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	6c 01       	movw	r12, r24
    1600:	7e 01       	movw	r14, r28
    1602:	95 e0       	ldi	r25, 0x05	; 5
    1604:	e9 0e       	add	r14, r25
    1606:	f1 1c       	adc	r15, r1
    1608:	86 01       	movw	r16, r12
                for (n = 0; n < 4; n++) {
                    ocr[n] = spi_read_byte();                   // Get trailing return value of R7 resp
    160a:	6f df       	rcall	.-290    	; 0x14ea <spi_read_byte>
    160c:	f8 01       	movw	r30, r16
    160e:	81 93       	st	Z+, r24
    1610:	8f 01       	movw	r16, r30
    1612:	ee 16       	cp	r14, r30
        if (mmc_send_cmd(CMD0, 0) == 1) {                       // Enter Idle state
            j=0;
            TimingDelay = 100;                                  // Initialization timeout of 1000 msec

            if (mmc_send_cmd(CMD8, 0x1AA) == 1) {               // SDv2?
                for (n = 0; n < 4; n++) {
    1614:	ff 06       	cpc	r15, r31
    1616:	c9 f7       	brne	.-14     	; 0x160a <mmc_init+0x78>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
                    ocr[n] = spi_read_byte();                   // Get trailing return value of R7 resp
                }
                if (ocr[2] == 0x01 && ocr[3] == 0xAA) {         // The card can work at vdd range of 2.7-3.6V
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	09 f0       	breq	.+2      	; 0x1620 <mmc_init+0x8e>
    161e:	48 c0       	rjmp	.+144    	; 0x16b0 <mmc_init+0x11e>
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	8a 3a       	cpi	r24, 0xAA	; 170
    1624:	79 f0       	breq	.+30     	; 0x1644 <mmc_init+0xb2>
    1626:	00 e0       	ldi	r16, 0x00	; 0
    1628:	44 c0       	rjmp	.+136    	; 0x16b2 <mmc_init+0x120>
                    while (TimingDelay) {                       // Wait for leaving idle state (ACMD41 with HCS bit)
                        mmc_send_cmd(CMD55, 0);
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	ba 01       	movw	r22, r20
    1630:	87 e3       	ldi	r24, 0x37	; 55
    1632:	72 df       	rcall	.-284    	; 0x1518 <mmc_send_cmd>
                        if(!mmc_send_cmd(ACMD41, 1UL << 30))
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	70 e4       	ldi	r23, 0x40	; 64
    163c:	89 e2       	ldi	r24, 0x29	; 41
    163e:	6c df       	rcall	.-296    	; 0x1518 <mmc_send_cmd>
    1640:	88 23       	and	r24, r24
    1642:	c1 f0       	breq	.+48     	; 0x1674 <mmc_init+0xe2>
    1644:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <TimingDelay>
            if (mmc_send_cmd(CMD8, 0x1AA) == 1) {               // SDv2?
                for (n = 0; n < 4; n++) {
                    ocr[n] = spi_read_byte();                   // Get trailing return value of R7 resp
                }
                if (ocr[2] == 0x01 && ocr[3] == 0xAA) {         // The card can work at vdd range of 2.7-3.6V
                    while (TimingDelay) {                       // Wait for leaving idle state (ACMD41 with HCS bit)
    1648:	81 11       	cpse	r24, r1
    164a:	ef cf       	rjmp	.-34     	; 0x162a <mmc_init+0x98>
    164c:	13 c0       	rjmp	.+38     	; 0x1674 <mmc_init+0xe2>
                        if(!mmc_send_cmd(ACMD41, 1UL << 30))
                            break;
                    }

                    while(TimingDelay) {
                        if (mmc_send_cmd(CMD58, 0) == 0x00) {    // Check CCS bit in the OCR
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	ba 01       	movw	r22, r20
    1654:	8a e3       	ldi	r24, 0x3A	; 58
    1656:	60 df       	rcall	.-320    	; 0x1518 <mmc_send_cmd>
    1658:	81 11       	cpse	r24, r1
    165a:	0c c0       	rjmp	.+24     	; 0x1674 <mmc_init+0xe2>
                            for (n = 0; n < 4; n++) {
                                ocr[n] = spi_read_byte();
    165c:	46 df       	rcall	.-372    	; 0x14ea <spi_read_byte>
    165e:	f6 01       	movw	r30, r12
    1660:	81 93       	st	Z+, r24
    1662:	6f 01       	movw	r12, r30
    1664:	ee 15       	cp	r30, r14
                            break;
                    }

                    while(TimingDelay) {
                        if (mmc_send_cmd(CMD58, 0) == 0x00) {    // Check CCS bit in the OCR
                            for (n = 0; n < 4; n++) {
    1666:	ff 05       	cpc	r31, r15
    1668:	c9 f7       	brne	.-14     	; 0x165c <mmc_init+0xca>
    166a:	89 81       	ldd	r24, Y+1	; 0x01
                                ocr[n] = spi_read_byte();
                            }
                            ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  // SDv2
    166c:	86 fd       	sbrc	r24, 6
    166e:	2e c0       	rjmp	.+92     	; 0x16cc <mmc_init+0x13a>
    1670:	04 e0       	ldi	r16, 0x04	; 4
    1672:	1f c0       	rjmp	.+62     	; 0x16b2 <mmc_init+0x120>
    1674:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <TimingDelay>
                        mmc_send_cmd(CMD55, 0);
                        if(!mmc_send_cmd(ACMD41, 1UL << 30))
                            break;
                    }

                    while(TimingDelay) {
    1678:	81 11       	cpse	r24, r1
    167a:	e9 cf       	rjmp	.-46     	; 0x164e <mmc_init+0xbc>
    167c:	00 e0       	ldi	r16, 0x00	; 0
    167e:	19 c0       	rjmp	.+50     	; 0x16b2 <mmc_init+0x120>
                            break;
                        }
                    }
                }
            } else {                                            // SDv1 or MMCv3
                if (mmc_send_cmd(ACMD41, 0) <= 1)   {
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	ba 01       	movw	r22, r20
    1686:	89 e2       	ldi	r24, 0x29	; 41
    1688:	47 df       	rcall	.-370    	; 0x1518 <mmc_send_cmd>
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	18 f0       	brcs	.+6      	; 0x1694 <mmc_init+0x102>
    168e:	01 e0       	ldi	r16, 0x01	; 1
                    ty = CT_SD1;
                    cmd = ACMD41;                               // SDv1
                } else {
                    ty = CT_MMC;
    1690:	11 e0       	ldi	r17, 0x01	; 1
                    cmd = CMD1;                                 // MMCv3
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <mmc_init+0x106>
    1694:	02 e0       	ldi	r16, 0x02	; 2
                    }
                }
            } else {                                            // SDv1 or MMCv3
                if (mmc_send_cmd(ACMD41, 0) <= 1)   {
                    ty = CT_SD1;
                    cmd = ACMD41;                               // SDv1
    1696:	19 e2       	ldi	r17, 0x29	; 41
                } else {
                    ty = CT_MMC;
                    cmd = CMD1;                                 // MMCv3
                }
                while (TimingDelay && mmc_send_cmd(cmd, 0));    // Wait for leaving idle state
    1698:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <TimingDelay>
    169c:	88 23       	and	r24, r24
    169e:	49 f0       	breq	.+18     	; 0x16b2 <mmc_init+0x120>
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	ba 01       	movw	r22, r20
    16a6:	81 2f       	mov	r24, r17
    16a8:	37 df       	rcall	.-402    	; 0x1518 <mmc_send_cmd>
    16aa:	81 11       	cpse	r24, r1
    16ac:	f5 cf       	rjmp	.-22     	; 0x1698 <mmc_init+0x106>
    16ae:	01 c0       	rjmp	.+2      	; 0x16b2 <mmc_init+0x120>
    16b0:	00 e0       	ldi	r16, 0x00	; 0
            }
            if(ty != (CT_SD2 | CT_BLOCK)) {
                while(TimingDelay && (mmc_send_cmd(CMD16, 512) != 0));
    16b2:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <TimingDelay>
    16b6:	88 23       	and	r24, r24
    16b8:	51 f0       	breq	.+20     	; 0x16ce <mmc_init+0x13c>
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	52 e0       	ldi	r21, 0x02	; 2
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	80 e1       	ldi	r24, 0x10	; 16
    16c4:	29 df       	rcall	.-430    	; 0x1518 <mmc_send_cmd>
    16c6:	81 11       	cpse	r24, r1
    16c8:	f4 cf       	rjmp	.-24     	; 0x16b2 <mmc_init+0x120>
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <mmc_init+0x13c>
    16cc:	0c e0       	ldi	r16, 0x0C	; 12
                    while(TimingDelay) {
                        if (mmc_send_cmd(CMD58, 0) == 0x00) {    // Check CCS bit in the OCR
                            for (n = 0; n < 4; n++) {
                                ocr[n] = spi_read_byte();
                            }
                            ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  // SDv2
    16ce:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <TimingDelay>
                while (TimingDelay && mmc_send_cmd(cmd, 0));    // Wait for leaving idle state
            }
            if(ty != (CT_SD2 | CT_BLOCK)) {
                while(TimingDelay && (mmc_send_cmd(CMD16, 512) != 0));
            }
            if(!TimingDelay) ty = 0;
    16d2:	81 11       	cpse	r24, r1
    16d4:	07 c0       	rjmp	.+14     	; 0x16e4 <mmc_init+0x152>
    16d6:	00 e0       	ldi	r16, 0x00	; 0
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <mmc_init+0x152>
    16da:	01 50       	subi	r16, 0x01	; 1
    16dc:	11 09       	sbc	r17, r1
    16de:	09 f0       	breq	.+2      	; 0x16e2 <mmc_init+0x150>
        } else {
            j--;
        }
    } while(j>0);
    16e0:	78 cf       	rjmp	.-272    	; 0x15d2 <mmc_init+0x40>
    16e2:	00 e0       	ldi	r16, 0x00	; 0
    16e4:	0f 2e       	mov	r0, r31

    fat.card_type = ty;
    16e6:	f7 e6       	ldi	r31, 0x67	; 103
    16e8:	cf 2e       	mov	r12, r31
    16ea:	f2 e0       	ldi	r31, 0x02	; 2
    16ec:	df 2e       	mov	r13, r31
    16ee:	f0 2d       	mov	r31, r0
    16f0:	f6 01       	movw	r30, r12
    16f2:	07 8b       	std	Z+23, r16	; 0x17
    16f4:	7e 01       	movw	r14, r28
    char buff[5] = {'\0'};
    16f6:	f5 e0       	ldi	r31, 0x05	; 5
    16f8:	ef 0e       	add	r14, r31
    16fa:	f1 1c       	adc	r15, r1
    16fc:	85 e0       	ldi	r24, 0x05	; 5
    16fe:	f7 01       	movw	r30, r14
    1700:	11 92       	st	Z+, r1
    1702:	8a 95       	dec	r24
    itoa(ty, (char *)buff, 10);
    1704:	e9 f7       	brne	.-6      	; 0x1700 <mmc_init+0x16e>
    1706:	4a e0       	ldi	r20, 0x0A	; 10
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	b7 01       	movw	r22, r14
    170c:	80 2f       	mov	r24, r16
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	01 d1       	rcall	.+514    	; 0x1914 <itoa>
	uputs((char *)buff);
    1712:	c7 01       	movw	r24, r14
    1714:	a2 d0       	rcall	.+324    	; 0x185a <uputs>
    1716:	80 e0       	ldi	r24, 0x00	; 0
	uputs('\0');
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9f d0       	rcall	.+318    	; 0x185a <uputs>
    171c:	ed de       	rcall	.-550    	; 0x14f8 <mmc_disable>
    171e:	81 e0       	ldi	r24, 0x01	; 1
    mmc_disable();
    1720:	f6 01       	movw	r30, r12
    1722:	97 89       	ldd	r25, Z+23	; 0x17

    if( fat.card_type == 0 ) {
        return FALSE;
    1724:	91 11       	cpse	r25, r1
    1726:	01 c0       	rjmp	.+2      	; 0x172a <mmc_init+0x198>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	29 96       	adiw	r28, 0x09	; 9
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
#if (MMC_MAX_SPEED==TRUE)
    spi_maxSpeed();
#endif

    return TRUE;
}
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	08 95       	ret

00001748 <mmc_write_sector>:
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17


// **********************************************************************************************************************************
// Routine zum schreiben eines Blocks(512Byte) auf die MMC/SD-Karte
// **********************************************************************************************************************************
uint8_t mmc_write_sector (uint32_t addr,uint8_t *buffer) {
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	8a 01       	movw	r16, r20

    uint8_t resp;
    uint8_t retrys;
    uint16_t count;

    if ( !(fat.card_type & CT_BLOCK) ) {
    1754:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <fat+0x17>
    1758:	23 fd       	sbrc	r18, 3
    175a:	09 c0       	rjmp	.+18     	; 0x176e <mmc_write_sector+0x26>
        addr *= 512;                // Convert to byte address if needed
    175c:	05 2e       	mov	r0, r21
    175e:	59 e0       	ldi	r21, 0x09	; 9
    1760:	66 0f       	add	r22, r22
    1762:	77 1f       	adc	r23, r23
    1764:	88 1f       	adc	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	5a 95       	dec	r21
    176a:	d1 f7       	brne	.-12     	; 0x1760 <mmc_write_sector+0x18>
    176c:	50 2d       	mov	r21, r0
    }

    if ( mmc_send_cmd(CMD24, addr) != 0) {  // enables card
    176e:	ab 01       	movw	r20, r22
    1770:	bc 01       	movw	r22, r24
    1772:	88 e1       	ldi	r24, 0x18	; 24
    1774:	d1 de       	rcall	.-606    	; 0x1518 <mmc_send_cmd>
    1776:	f8 2e       	mov	r15, r24
    1778:	81 11       	cpse	r24, r1
    177a:	1e c0       	rjmp	.+60     	; 0x17b8 <mmc_write_sector+0x70>
        return FALSE;
    }

    if ( FALSE == mmc_wait_ready() ) {
    177c:	c0 de       	rcall	.-640    	; 0x14fe <mmc_wait_ready>
    177e:	88 23       	and	r24, r24
    1780:	f1 f0       	breq	.+60     	; 0x17be <mmc_write_sector+0x76>
        return FALSE;
    }

    spi_write_byte(0xFE);           // Xmit data token
    1782:	8e ef       	ldi	r24, 0xFE	; 254
    1784:	ad de       	rcall	.-678    	; 0x14e0 <spi_write_byte>
    1786:	e8 01       	movw	r28, r16
    1788:	1e 5f       	subi	r17, 0xFE	; 254

    count = 512;
    do {                            // Xmit the 512 byte data block to MMC
        spi_write_byte(*buffer++);
    178a:	89 91       	ld	r24, Y+
    178c:	a9 de       	rcall	.-686    	; 0x14e0 <spi_write_byte>
    178e:	c0 17       	cp	r28, r16
    } while (--count);
    1790:	d1 07       	cpc	r29, r17
    1792:	d9 f7       	brne	.-10     	; 0x178a <mmc_write_sector+0x42>

    spi_write_byte(0xFF);           // CRC (Dummy)
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	a4 de       	rcall	.-696    	; 0x14e0 <spi_write_byte>
    spi_write_byte(0xFF);
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	a2 de       	rcall	.-700    	; 0x14e0 <spi_write_byte>
    179c:	c4 e1       	ldi	r28, 0x14	; 20

    retrys = 20;
    179e:	a5 de       	rcall	.-694    	; 0x14ea <spi_read_byte>
    do {
        resp = spi_read_byte();     // Reveive data response, 20 retrys if not acepted
    17a0:	8f 71       	andi	r24, 0x1F	; 31
    17a2:	85 30       	cpi	r24, 0x05	; 5
    } while( (resp & 0x1F) != 0x05 && --retrys);
    17a4:	21 f0       	breq	.+8      	; 0x17ae <mmc_write_sector+0x66>
    17a6:	c1 50       	subi	r28, 0x01	; 1
    17a8:	d1 f7       	brne	.-12     	; 0x179e <mmc_write_sector+0x56>
    17aa:	8f 2d       	mov	r24, r15

    if ( retrys == 0) {             // If not accepted, return with error
        return FALSE;
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <mmc_write_sector+0x76>
    17ae:	cc 23       	and	r28, r28
    retrys = 20;
    do {
        resp = spi_read_byte();     // Reveive data response, 20 retrys if not acepted
    } while( (resp & 0x1F) != 0x05 && --retrys);

    if ( retrys == 0) {             // If not accepted, return with error
    17b0:	29 f0       	breq	.+10     	; 0x17bc <mmc_write_sector+0x74>
    17b2:	a2 de       	rcall	.-700    	; 0x14f8 <mmc_disable>
        return FALSE;
    }

    mmc_disable();
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	03 c0       	rjmp	.+6      	; 0x17be <mmc_write_sector+0x76>

    return TRUE;
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	01 c0       	rjmp	.+2      	; 0x17be <mmc_write_sector+0x76>
    if ( !(fat.card_type & CT_BLOCK) ) {
        addr *= 512;                // Convert to byte address if needed
    }

    if ( mmc_send_cmd(CMD24, addr) != 0) {  // enables card
        return FALSE;
    17bc:	8f 2d       	mov	r24, r15
    17be:	df 91       	pop	r29
    do {
        resp = spi_read_byte();     // Reveive data response, 20 retrys if not acepted
    } while( (resp & 0x1F) != 0x05 && --retrys);

    if ( retrys == 0) {             // If not accepted, return with error
        return FALSE;
    17c0:	cf 91       	pop	r28
    }

    mmc_disable();

    return TRUE;
}
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	08 95       	ret

000017ca <mmc_read_sector>:
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17


// **********************************************************************************************************************************
// Routine zum lesen eines Blocks(512Byte) von der MMC/SD-Karte
// **********************************************************************************************************************************
uint8_t mmc_read_sector (uint32_t addr,uint8_t *buffer) {
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	8a 01       	movw	r16, r20

    uint8_t token;
    uint16_t count;

    if ( !(fat.card_type & CT_BLOCK) ) addr *= 512; // Convert to byte address if needed
    17d4:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <fat+0x17>
    17d8:	23 fd       	sbrc	r18, 3
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <mmc_read_sector+0x24>
    17dc:	05 2e       	mov	r0, r21
    17de:	59 e0       	ldi	r21, 0x09	; 9
    17e0:	66 0f       	add	r22, r22
    17e2:	77 1f       	adc	r23, r23
    17e4:	88 1f       	adc	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	5a 95       	dec	r21
    17ea:	d1 f7       	brne	.-12     	; 0x17e0 <mmc_read_sector+0x16>
    17ec:	50 2d       	mov	r21, r0

    if ( mmc_send_cmd(CMD17, addr) != 0 ) {
    17ee:	ab 01       	movw	r20, r22
    17f0:	bc 01       	movw	r22, r24
    17f2:	81 e1       	ldi	r24, 0x11	; 17
    17f4:	91 de       	rcall	.-734    	; 0x1518 <mmc_send_cmd>
    17f6:	c8 2f       	mov	r28, r24
    17f8:	88 23       	and	r24, r24
    17fa:	29 f0       	breq	.+10     	; 0x1806 <mmc_read_sector+0x3c>
		uputs("mmc_read_sector false.\r");
    17fc:	87 e3       	ldi	r24, 0x37	; 55
    17fe:	92 e0       	ldi	r25, 0x02	; 2
    1800:	2c d0       	rcall	.+88     	; 0x185a <uputs>
        return FALSE;
    1802:	c0 e0       	ldi	r28, 0x00	; 0
    1804:	1c c0       	rjmp	.+56     	; 0x183e <mmc_read_sector+0x74>
    }

    TimingDelay = 20;
    1806:	84 e1       	ldi	r24, 0x14	; 20
    1808:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <TimingDelay>
    do {                            // Wait for data packet in timeout of 200ms
        token = spi_read_byte();
    180c:	6e de       	rcall	.-804    	; 0x14ea <spi_read_byte>
    } while ( (token == 0xFF) && TimingDelay );
    180e:	8f 3f       	cpi	r24, 0xFF	; 255
    1810:	29 f4       	brne	.+10     	; 0x181c <mmc_read_sector+0x52>
    1812:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <TimingDelay>
    1816:	81 11       	cpse	r24, r1
    1818:	f9 cf       	rjmp	.-14     	; 0x180c <mmc_read_sector+0x42>
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <mmc_read_sector+0x56>

    if(token != 0xFE) {
    181c:	8e 3f       	cpi	r24, 0xFE	; 254
		uputs("not valid data token.\r");
    181e:	21 f0       	breq	.+8      	; 0x1828 <mmc_read_sector+0x5e>
    1820:	8f e4       	ldi	r24, 0x4F	; 79
    1822:	92 e0       	ldi	r25, 0x02	; 2
        return FALSE;               // If not valid data token, retutn with error
    1824:	1a d0       	rcall	.+52     	; 0x185a <uputs>
    1826:	0b c0       	rjmp	.+22     	; 0x183e <mmc_read_sector+0x74>
    1828:	e8 01       	movw	r28, r16
    }

    count = 512;
    do {                            // Receive the data block into buffer
        *buffer++ = spi_read_byte();
    182a:	1e 5f       	subi	r17, 0xFE	; 254
    182c:	5e de       	rcall	.-836    	; 0x14ea <spi_read_byte>
    } while (--count);
    182e:	89 93       	st	Y+, r24
    1830:	c0 17       	cp	r28, r16

    spi_read_byte();                // Discard CRC
    1832:	d1 07       	cpc	r29, r17
    1834:	d9 f7       	brne	.-10     	; 0x182c <mmc_read_sector+0x62>
    spi_read_byte();
    1836:	59 de       	rcall	.-846    	; 0x14ea <spi_read_byte>
    1838:	58 de       	rcall	.-848    	; 0x14ea <spi_read_byte>

    mmc_disable();
    183a:	5e de       	rcall	.-836    	; 0x14f8 <mmc_disable>
    183c:	c1 e0       	ldi	r28, 0x01	; 1

    return TRUE;                    // Return with success
    183e:	8c 2f       	mov	r24, r28
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	08 95       	ret

0000184a <uputc>:


//***********************Funktionen**********************************
void uputc(uint8_t c){		//zeichen senden

	loop_until_bit_is_set(UCSR0A,UDRE0);	// warten bis puffer frei ist
    184a:	e0 ec       	ldi	r30, 0xC0	; 192
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	90 81       	ld	r25, Z
    1850:	95 ff       	sbrs	r25, 5
    1852:	fd cf       	rjmp	.-6      	; 0x184e <uputc+0x4>
	UDR0 = c;								// zeichen schreiben
    1854:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1858:	08 95       	ret

0000185a <uputs>:
}	

//*******************************************************************
void uputs (uint8_t *s){		//string senden
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	ec 01       	movw	r28, r24
	
  while(*s) uputc(*s++);				//sendet zeichenkette, bis ende.. '\0'    
    1860:	88 81       	ld	r24, Y
    1862:	88 23       	and	r24, r24
    1864:	29 f0       	breq	.+10     	; 0x1870 <uputs+0x16>
    1866:	21 96       	adiw	r28, 0x01	; 1
    1868:	f0 df       	rcall	.-32     	; 0x184a <uputc>
    186a:	89 91       	ld	r24, Y+
    186c:	81 11       	cpse	r24, r1
    186e:	fc cf       	rjmp	.-8      	; 0x1868 <uputs+0xe>
  
}
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <uinit>:


//*******************************************************************
void uinit (void){					//init usart Tx, 8n1 ,UDRE interupt enable

      UBRR0H = (BRC57600>>8);                                      // Baudrate Register1 (9600) UART0
    1876:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
      UBRR0L = (BRC57600);                                         // Baudrate Register2 (9600) UART0
    187a:	80 e1       	ldi	r24, 0x10	; 16
    187c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
      UCSR0B = (1<<RXEN0)|(1<<TXEN0);                             // Enable RX und TX UART 0
    1880:	88 e1       	ldi	r24, 0x18	; 24
    1882:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
      UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);                           // Übertragene Bits: 8 und parity disabled UART0
    1886:	86 e0       	ldi	r24, 0x06	; 6
    1888:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    188c:	08 95       	ret

0000188e <__udivmodsi4>:
    188e:	a1 e2       	ldi	r26, 0x21	; 33
    1890:	1a 2e       	mov	r1, r26
    1892:	aa 1b       	sub	r26, r26
    1894:	bb 1b       	sub	r27, r27
    1896:	fd 01       	movw	r30, r26
    1898:	0d c0       	rjmp	.+26     	; 0x18b4 <__udivmodsi4_ep>

0000189a <__udivmodsi4_loop>:
    189a:	aa 1f       	adc	r26, r26
    189c:	bb 1f       	adc	r27, r27
    189e:	ee 1f       	adc	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	a2 17       	cp	r26, r18
    18a4:	b3 07       	cpc	r27, r19
    18a6:	e4 07       	cpc	r30, r20
    18a8:	f5 07       	cpc	r31, r21
    18aa:	20 f0       	brcs	.+8      	; 0x18b4 <__udivmodsi4_ep>
    18ac:	a2 1b       	sub	r26, r18
    18ae:	b3 0b       	sbc	r27, r19
    18b0:	e4 0b       	sbc	r30, r20
    18b2:	f5 0b       	sbc	r31, r21

000018b4 <__udivmodsi4_ep>:
    18b4:	66 1f       	adc	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	88 1f       	adc	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	1a 94       	dec	r1
    18be:	69 f7       	brne	.-38     	; 0x189a <__udivmodsi4_loop>
    18c0:	60 95       	com	r22
    18c2:	70 95       	com	r23
    18c4:	80 95       	com	r24
    18c6:	90 95       	com	r25
    18c8:	9b 01       	movw	r18, r22
    18ca:	ac 01       	movw	r20, r24
    18cc:	bd 01       	movw	r22, r26
    18ce:	cf 01       	movw	r24, r30
    18d0:	08 95       	ret

000018d2 <__muluhisi3>:
    18d2:	09 d0       	rcall	.+18     	; 0x18e6 <__umulhisi3>
    18d4:	a5 9f       	mul	r26, r21
    18d6:	90 0d       	add	r25, r0
    18d8:	b4 9f       	mul	r27, r20
    18da:	90 0d       	add	r25, r0
    18dc:	a4 9f       	mul	r26, r20
    18de:	80 0d       	add	r24, r0
    18e0:	91 1d       	adc	r25, r1
    18e2:	11 24       	eor	r1, r1
    18e4:	08 95       	ret

000018e6 <__umulhisi3>:
    18e6:	a2 9f       	mul	r26, r18
    18e8:	b0 01       	movw	r22, r0
    18ea:	b3 9f       	mul	r27, r19
    18ec:	c0 01       	movw	r24, r0
    18ee:	a3 9f       	mul	r26, r19
    18f0:	70 0d       	add	r23, r0
    18f2:	81 1d       	adc	r24, r1
    18f4:	11 24       	eor	r1, r1
    18f6:	91 1d       	adc	r25, r1
    18f8:	b2 9f       	mul	r27, r18
    18fa:	70 0d       	add	r23, r0
    18fc:	81 1d       	adc	r24, r1
    18fe:	11 24       	eor	r1, r1
    1900:	91 1d       	adc	r25, r1
    1902:	08 95       	ret

00001904 <toupper>:
    1904:	91 11       	cpse	r25, r1
    1906:	08 95       	ret
    1908:	81 56       	subi	r24, 0x61	; 97
    190a:	8a 51       	subi	r24, 0x1A	; 26
    190c:	08 f4       	brcc	.+2      	; 0x1910 <toupper+0xc>
    190e:	80 52       	subi	r24, 0x20	; 32
    1910:	85 58       	subi	r24, 0x85	; 133
    1912:	08 95       	ret

00001914 <itoa>:
    1914:	45 32       	cpi	r20, 0x25	; 37
    1916:	51 05       	cpc	r21, r1
    1918:	18 f4       	brcc	.+6      	; 0x1920 <itoa+0xc>
    191a:	42 30       	cpi	r20, 0x02	; 2
    191c:	08 f0       	brcs	.+2      	; 0x1920 <itoa+0xc>
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <__itoa_ncheck>
    1920:	fb 01       	movw	r30, r22
    1922:	10 82       	st	Z, r1
    1924:	cb 01       	movw	r24, r22
    1926:	08 95       	ret

00001928 <__itoa_ncheck>:
    1928:	bb 27       	eor	r27, r27
    192a:	4a 30       	cpi	r20, 0x0A	; 10
    192c:	31 f4       	brne	.+12     	; 0x193a <__itoa_ncheck+0x12>
    192e:	99 23       	and	r25, r25
    1930:	22 f4       	brpl	.+8      	; 0x193a <__itoa_ncheck+0x12>
    1932:	bd e2       	ldi	r27, 0x2D	; 45
    1934:	90 95       	com	r25
    1936:	81 95       	neg	r24
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	01 c0       	rjmp	.+2      	; 0x193e <__utoa_common>

0000193c <__utoa_ncheck>:
    193c:	bb 27       	eor	r27, r27

0000193e <__utoa_common>:
    193e:	fb 01       	movw	r30, r22
    1940:	55 27       	eor	r21, r21
    1942:	aa 27       	eor	r26, r26
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	aa 1f       	adc	r26, r26
    194a:	a4 17       	cp	r26, r20
    194c:	10 f0       	brcs	.+4      	; 0x1952 <__utoa_common+0x14>
    194e:	a4 1b       	sub	r26, r20
    1950:	83 95       	inc	r24
    1952:	50 51       	subi	r21, 0x10	; 16
    1954:	b9 f7       	brne	.-18     	; 0x1944 <__utoa_common+0x6>
    1956:	a0 5d       	subi	r26, 0xD0	; 208
    1958:	aa 33       	cpi	r26, 0x3A	; 58
    195a:	08 f0       	brcs	.+2      	; 0x195e <__utoa_common+0x20>
    195c:	a9 5d       	subi	r26, 0xD9	; 217
    195e:	a1 93       	st	Z+, r26
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	79 f7       	brne	.-34     	; 0x1942 <__utoa_common+0x4>
    1964:	b1 11       	cpse	r27, r1
    1966:	b1 93       	st	Z+, r27
    1968:	11 92       	st	Z+, r1
    196a:	cb 01       	movw	r24, r22
    196c:	00 c0       	rjmp	.+0      	; 0x196e <strrev>

0000196e <strrev>:
    196e:	dc 01       	movw	r26, r24
    1970:	fc 01       	movw	r30, r24
    1972:	67 2f       	mov	r22, r23
    1974:	71 91       	ld	r23, Z+
    1976:	77 23       	and	r23, r23
    1978:	e1 f7       	brne	.-8      	; 0x1972 <strrev+0x4>
    197a:	32 97       	sbiw	r30, 0x02	; 2
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <strrev+0x18>
    197e:	7c 91       	ld	r23, X
    1980:	6d 93       	st	X+, r22
    1982:	70 83       	st	Z, r23
    1984:	62 91       	ld	r22, -Z
    1986:	ae 17       	cp	r26, r30
    1988:	bf 07       	cpc	r27, r31
    198a:	c8 f3       	brcs	.-14     	; 0x197e <strrev+0x10>
    198c:	08 95       	ret

0000198e <_exit>:
    198e:	f8 94       	cli

00001990 <__stop_program>:
    1990:	ff cf       	rjmp	.-2      	; 0x1990 <__stop_program>
